<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nova`s Wiki</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://quano.gitee.io/"/>
  <updated>2024-10-13T17:42:59.294Z</updated>
  <id>https://quano.gitee.io/</id>
  
  <author>
    <name>Nova</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4.自编码在ECG场景异常检测</title>
    <link href="https://quano.gitee.io/wk/%E7%AE%97%E6%B3%95/006.%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/%E5%AE%9E%E8%B7%B5/004.%E8%87%AA%E7%BC%96%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B_ECG%E5%BF%83%E7%94%B5%E5%9B%BE/"/>
    <id>https://quano.gitee.io/wk/算法/006.算法工程/实践/004.自编码实现异常检测_ECG心电图/</id>
    <published>2024-10-13T16:48:57.000Z</published>
    <updated>2024-10-13T17:42:59.294Z</updated>
    
    <content type="html"><![CDATA[<style>/* 为表头 th 元素设置右对齐样式 */table th {  text-align: right;}/* 暗黑风格表格样式 */table {  font-size: 12px;  width: 100%;}</style><h1 id="1-问题背景介绍"><a href="#1-问题背景介绍" class="headerlink" title="1. 问题背景介绍"></a>1. 问题背景介绍</h1><p>ECG指心电图， ECG数据中的异常可能预示着心脏疾病等健康问题。</p><p>对ECG数据进行异常检测可以帮助医生及时发现潜在的健康风险。</p><p>实现方法：</p><ol><li>构建Autoencoder 模型对正常的ECG数据进行训练，使得模型能够学习到正常 ECG信号的特征。 </li><li>当输入新的ECG数据时， 如果重构后的信号与原始信号之间的差异较大， 则判断该数据为异常的ECG信号， 可能存在心脏疾病 等异常情况。 </li></ol><p>以下的项目 对ECG 数据进行预处理，例如 去除噪声、标准化等操作， 以提高模型的性能。</p><h1 id="2-基于自编码器的异常检测"><a href="#2-基于自编码器的异常检测" class="headerlink" title="2. 基于自编码器的异常检测"></a>2. 基于自编码器的异常检测</h1><p>Autoencoder-based anomaly detection</p><h2 id="2-1-什么是异常检测"><a href="#2-1-什么是异常检测" class="headerlink" title="2.1 什么是异常检测"></a>2.1 什么是异常检测</h2><p>What is anomaly detection?</p><p>Anomaly detection (aka outlier analysis) is a step in data mining that identifies data points, events, and/or observations that deviate from a dataset’s normal behavior. Anomalous data can indicate critical incidents, such as a technical glitch, or potential opportunities, for instance a change in consumer behavior. Machine learning is progressively being used to automate anomaly detection.</p><p>异常检测（也称为离群值分析）是数据挖掘中的一个步骤，它可以识别偏离数据集正常行为的数据点、事件和 / 或观察结果。异常数据可以指示关键事件，例如技术故障，或者潜在的机会，例如消费者行为的变化。机器学习正逐渐被用于实现异常检测的自动化。</p><h2 id="2-2-基于自编码器的异常检测"><a href="#2-2-基于自编码器的异常检测" class="headerlink" title="2.2 基于自编码器的异常检测"></a>2.2 基于自编码器的异常检测</h2><p>Autoencoder-based anomaly detection</p><p>自编码器是一种无监督学习的神经网络结构，在异常检测中，基于自编码器的方法通常利用自编码器学习正常数据的模式，然后通过比较新数据与自编码器重构数据的差异来检测异常。如果新数据的重构误差较大，则可能被判定为异常数据。</p><h3 id="2-2-1-什么是自编码"><a href="#2-2-1-什么是自编码" class="headerlink" title="2.2.1 什么是自编码"></a>2.2.1 什么是自编码</h3><p>What is Autoencoder?<br>自编码器尽可能地学习产生与输入相同的输出。通过这个学习过程，输入的表示可以在潜在空间中被有效地压缩。换句话说，它压缩了维度并将输入的表示存储在潜在空间中。</p><div class="note info"><p>自编码器的目标是学习如何将输入数据编码为低维表示，然后再将这个低维表示解码回尽可能接近原始输入的数据。所以在训练自编码器时，输入数据既是期望的输出数据。(先encode,再decode)</p></div><h3 id="2-2-2-自编码异常检测原理"><a href="#2-2-2-自编码异常检测原理" class="headerlink" title="2.2.2 自编码异常检测原理"></a>2.2.2 自编码异常检测原理</h3><h2 id="2-3-自编码异常检测应用场景"><a href="#2-3-自编码异常检测应用场景" class="headerlink" title="2.3 自编码异常检测应用场景"></a>2.3 自编码异常检测应用场景</h2><p>Autoencoder-based anomaly detection</p><h3 id="2-3-1-网络安全领域"><a href="#2-3-1-网络安全领域" class="headerlink" title="2.3.1 网络安全领域"></a>2.3.1 网络安全领域</h3><ol><li>网络入侵检测：网络系统中会产生大量的网络流量数据，包括数据包的源地址、目的地址、协议类型、流量大小等信息。自编码异常检测可以对正常的网络流量模式进行学习，当出现与正常模式不同的异常流量时，如大量的恶意扫描、DDoS 攻击等，自编码器能够检测到这种异常，及时发出警报并采取相应的防护措施，保护网络系统的安全。</li><li>用户行为异常检测：对于企业的内部网络系统或在线服务平台，自编码器可以分析用户的行为数据，如登录时间、访问的页面、操作行为等，检测出异常的用户行为，例如异常的频繁登录失败、异常的大量数据下载等，可能是用户账号被盗用或内部员工的违规操作等情况。</li></ol><h3 id="2-3-1-其它场景"><a href="#2-3-1-其它场景" class="headerlink" title="2.3.1 其它场景"></a>2.3.1 其它场景</h3><ol><li>工业制造领域：<ul><li>设备故障预测与诊断</li><li>产品质量检测</li></ul></li><li>金融领域<ul><li>信用卡欺诈检测</li><li>金融市场异常检测</li></ul></li><li>医疗健康领域<ul><li>疾病早起预警</li><li>医疗影像异常检测</li></ul></li><li>智慧交通领域<ul><li>交通流量异常检测</li><li>车辆故障检测</li></ul></li><li>能源领域<ul><li>电力系统异常检测</li><li>能源消耗异常检测</li></ul></li></ol><h3 id="2-3-2-在网络安全领域的应用案例"><a href="#2-3-2-在网络安全领域的应用案例" class="headerlink" title="2.3.2 在网络安全领域的应用案例"></a>2.3.2 在网络安全领域的应用案例</h3><p><strong><em>自编码异常检测技术</em></strong></p><ol><li>网络入侵检测<ul><li>基于堆叠自编码器的入侵检测：</li><li>结合深度学习模型的入侵检测：</li></ul></li><li>用户行为异常检测<ul><li>在线服务平台用户行为检测。</li><li>企业内部网络用户行为分析。</li></ul></li><li>恶意软件检测<ul><li>基于行为特征的恶意软件检测：</li><li>恶意软件变种检测</li></ul></li><li><strong><em>网络流量异常检测</em></strong><ul><li>异常流量模式识别：</li><li>流量特征异常检测：</li></ul></li></ol><p>推荐：异常流量模式识别、流量特征异常检测、结合深度学习模型的入侵检测、在线服务平台用户行为检测（todo:怎么做?）</p><h3 id="2-3-4-未来发展趋势"><a href="#2-3-4-未来发展趋势" class="headerlink" title="2.3.4 未来发展趋势"></a>2.3.4 未来发展趋势</h3><p>Autoencoder-based anomaly detection</p><p>与其它技术的融合：</p><ul><li>与深度学习其它模型结合：</li><li>实时性和适应性的增强：实时检测、动态使用。<ul><li>实时检测：随着网络攻击的速度和复杂性不断增加，对异常检测的实时性要求越来越高。未来，自编码异常检测技术将不断优化算法和模型结构，提高检测的速度和效率，以满足实时检测的需求。例如，采用硬件加速技术，如使用 GPU、FPGA 等硬件设备来加速自编码器的计算，减少检测的时间延迟；或者开发轻量级的自编码器模型，在保证检测准确性的前提下，降低模型的计算复杂度，提高实时性。</li></ul></li></ul><h1 id="3-项目介绍-模型实践"><a href="#3-项目介绍-模型实践" class="headerlink" title="3. 项目介绍(模型实践)"></a>3. 项目介绍(模型实践)</h1><h2 id="3-1-kaggle相关项目-医疗健康-ECG"><a href="#3-1-kaggle相关项目-医疗健康-ECG" class="headerlink" title="3.1 kaggle相关项目(医疗健康:ECG)"></a>3.1 kaggle相关项目(医疗健康:ECG)</h2><p><a href="https://www.kaggle.com/code/ohseokkim/dectecting-anomaly-using-autoencoder/comments">kaggle项目:Dectecting Anomaly using Autoencoder</a><br><a href="https://www.kaggle.com/code/novatensor/dectecting-anomaly/edit#Modeling">编辑的:fork from Dectecting Anomaly using Autoencoder</a><br>模型文件见：kaggle的以上项目链接</p><p><a href="https://www.kaggle.com/code/mineshjethva/ecg-anomaly-detection">废弃:kaggle项目:ECG Anomaly Detection</a></p><h2 id="3-2-数据集介绍"><a href="#3-2-数据集介绍" class="headerlink" title="3.2 数据集介绍"></a>3.2 数据集介绍</h2><p>此数据集包含患者的心电图读数。每一行对应一位患者的一次完整心电图。每一个心电图都由 140 个数据点（读数）组成。</p><ol><li>第 0 至 139 列包含特定患者的心电图数据点。这些是浮点数。</li><li>标签显示心电图是正常还是异常。它是一个分类变量，值为 0 或 1。</li></ol><!-- 在页面中显示表格 --><div id="csv-table"></div><h3 id="3-2-1-Plot-ECG"><a href="#3-2-1-Plot-ECG" class="headerlink" title="3.2.1 Plot ECG"></a>3.2.1 Plot ECG</h3><p>Plot the normal/abnormal ECG.</p><div id="chart"></div><h3 id="3-2-2-Preprocessing"><a href="#3-2-2-Preprocessing" class="headerlink" title="3.2.2 Preprocessing"></a>3.2.2 Preprocessing</h3><p>数据预处理：归一化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">preProcessing</span> = (<span class="params">data0</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> data1 = data0.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Number</span>(item))</span><br><span class="line">    <span class="comment">// 归一化</span></span><br><span class="line">    <span class="keyword">const</span> min_val = -<span class="number">6.2808752</span>; <span class="comment">// _.min(data1);</span></span><br><span class="line">    <span class="keyword">const</span> max_val = <span class="number">7.4021031</span>;  <span class="comment">//_.max(data1);</span></span><br><span class="line">    data1.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, index</span>) =&gt;</span> &#123;</span><br><span class="line">        data0[index] = (element-min_val)/(max_val-min_val);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info"><p>关于数据归一化：归一化时， 取了原始数据集的最大值、最小值。 当然有多种取法： 整个数据集(单个特征单独取、所有特征一起取)</p><ul><li>如果特征尺度差异很大，特征分别归一化可能更合适；如果特征尺度相对接近，一起归一化可能更简单有效。</li><li>训练时的归一化，在推理时怎么处理呢？ <strong><em>记录训练时的统计信息</em></strong>(均值、标准差、最大最小值) ，用于推理时特征处理.</li></ul></div><div class="note warning"><p>问题：<br>如果把 异常的模式数据 作为正常 加到训练集中，会有什么影响？ 自编码器 对不同模式的 学习能力强不强，还是说适合指针对 某个范围内的 模式序列？</p></div><h2 id="3-3-模型训练"><a href="#3-3-模型训练" class="headerlink" title="3.3 模型训练"></a>3.3 模型训练</h2><h3 id="3-3-1-模型定义"><a href="#3-3-1-模型定义" class="headerlink" title="3.3.1 模型定义"></a>3.3.1 模型定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnomalyDetector</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">super</span>(AnomalyDetector, self).__init__()</span><br><span class="line">    self.encoder = tf.keras.Sequential([</span><br><span class="line">      <span class="comment"># 表示创建一个全连接层，也称为密集层。 有32个神经元。</span></span><br><span class="line">      layers.Dense(<span class="number">32</span>, activation=<span class="string">&quot;relu&quot;</span>),</span><br><span class="line">      layers.Dense(<span class="number">16</span>, activation=<span class="string">&quot;relu&quot;</span>),</span><br><span class="line">      layers.Dense(<span class="number">8</span>, activation=<span class="string">&quot;relu&quot;</span>)])</span><br><span class="line">    </span><br><span class="line">    self.decoder = tf.keras.Sequential([</span><br><span class="line">      layers.Dense(<span class="number">16</span>, activation=<span class="string">&quot;relu&quot;</span>),</span><br><span class="line">      layers.Dense(<span class="number">32</span>, activation=<span class="string">&quot;relu&quot;</span>),</span><br><span class="line">      layers.Dense(<span class="number">140</span>, activation=<span class="string">&quot;sigmoid&quot;</span>)])</span><br><span class="line">  <span class="comment"># 定义了call方法，这是模型的前向传播方法。当调用模型实例时，这个方法会被自动调用。</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, x</span>):</span><br><span class="line">    encoded = self.encoder(x)</span><br><span class="line">    decoded = self.decoder(encoded)</span><br><span class="line">    <span class="keyword">return</span> decoded</span><br><span class="line"></span><br><span class="line">autoencoder = AnomalyDetector()</span><br><span class="line"><span class="comment"># 指定了优化器为Adam优化器；指定了损失函数为平均绝对误差（Mean Absolute Error，MAE）</span></span><br><span class="line">autoencoder.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;mae&#x27;</span>)</span><br></pre></td></tr></table></figure><div class="note info"><p>encoder 是一个由三层全连接层组成的神经网络。每层的神经元数量分别为 32、16 和 8，激活函数均为relu。这个编码器将输入数据压缩成低维表示。<br>decoder 同样是一个由三层全连接层组成的神经网络。每层的神经元数量分别为 16、32 和 140，激活函数为relu和sigmoid。这个解码器将低维表示解码回原始数据的形状。</p></div><div class="note info"><p>输入数据维度与神经元之间关系：<br>1.连接方式：如果是一个全连接层，输入数据的每个特征(维度)都会连接到该层的每个神经元. 输入数据维度n,m个神经元，则总共有n*m个连接<br>2.神经元数量对模型的影响：表达能力、过拟合风险</p><ol><li>选择合适的神经元数量</li></ol></div><div class="note info"><p>关于模型输出：依据自编码器的工作原理，解码器处理后，最终的输出为一个向量，其维度与输入数据一致。以尽量接近地还原原始输入。<br>问题：那怎么用于实际场景 判断当前数据是否异常呢(怎么分类)? 计算2个张量之间的差异(使用 平均绝对误差MAE方法)，详见模型测试(Test model)</p></div><div class="note warning"><p>encoder,decoder架构在深度学习模型中的定位? 为什么是三层的网络.</p></div><h3 id="3-3-2-模型训练"><a href="#3-3-2-模型训练" class="headerlink" title="3.3.2 模型训练"></a>3.3.2 模型训练</h3><p>The autoencoder is trained using only regular ECGs, but evaluated using the full test set.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">history = autoencoder.fit(normal_train_data, normal_train_data, </span><br><span class="line">          epochs=<span class="number">20</span>, </span><br><span class="line">          batch_size=<span class="number">512</span>,</span><br><span class="line">          validation_data=(test_data, test_data),</span><br><span class="line">          shuffle=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 两个参数都是 normal_train_data 的原因? (先编码为低维表示,再解码回尽可能接近原始输入的数据,因此)输入数据既是期望的输出数据。</span></span><br><span class="line"><span class="comment"># - 第一个normal_train_data是输入到自编码器的原始数据.</span></span><br><span class="line"><span class="comment"># - 第二个normal_train_data是自编码器应该学习去重构的目标数据。由于自编码器的目的就是尽可能地重构输入数据.</span></span><br></pre></td></tr></table></figure><h3 id="3-3-3-模型保存"><a href="#3-3-3-模型保存" class="headerlink" title="3.3.3 模型保存"></a>3.3.3 模型保存</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存整个模型</span></span><br><span class="line">autoencoder.save(<span class="string">&#x27;/kaggle/working/my_autoencoder_model&#x27;</span>)</span><br><span class="line"><span class="comment"># 或者只保存模型的权重</span></span><br><span class="line">autoencoder.save_weights(<span class="string">&#x27;/kaggle/working/my_autoencoder_weights.h5&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-3-4-plot-model"><a href="#3-3-4-plot-model" class="headerlink" title="3.3.4 plot model"></a>3.3.4 plot model</h3><p>loss<br>If the reconstruction error is greater than one standard deviation from the normal training example, classify the ECG as abnormal. First, let’s plot the normal ECG of the training set, the reconstruction after being encoded and decoded by the autoencoder, and the reconstruction error.</p><h3 id="3-3-5-Test-model"><a href="#3-3-5-Test-model" class="headerlink" title="3.3.5 Test model"></a>3.3.5 Test model</h3><p>分别用 normal data 和 abnormal data 进行测试.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推理（single_data 为一个 tf.Tensor</span></span><br><span class="line">single_data = normal_train_data[<span class="number">0</span>]</span><br><span class="line">reconstructed_data = autoencoder.predict(np.expand_dims(single_data, axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(reconstructed_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将解码后的张量 计算残差,  然后设一个阈值。</span></span><br><span class="line"><span class="comment"># 阈值的获取 通过 测试 正常、异常数据集的分布。</span></span><br></pre></td></tr></table></figure><h3 id="3-3-6-模型加载和推理"><a href="#3-3-6-模型加载和推理" class="headerlink" title="3.3.6 模型加载和推理"></a>3.3.6 模型加载和推理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">model_path = <span class="string">&#x27;/home/tensor/quano/tensorflow_project/autoencoder_model&#x27;</span></span><br><span class="line"><span class="comment"># 加载保存的模型</span></span><br><span class="line">loaded_autoencoder = tf.keras.models.load_model(model_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推理</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例输入数据</span></span><br><span class="line">input_data = np.array([<span class="number">0.5703046609377435</span>,<span class="number">0.46561659035884023</span>,<span class="number">0.29058116682096913</span>,<span class="number">0.17791583430341332</span>,<span class="number">0.09538919607875133</span>,<span class="number">0.08467857469305494</span>,<span class="number">0.2019510401474509</span>,<span class="number">0.3163002239066622</span>,<span class="number">0.337320325941027</span>,<span class="number">0.414248838646481</span>,<span class="number">0.4707059485726145</span>,<span class="number">0.4691904978026605</span>,<span class="number">0.4776775491926345</span>,<span class="number">0.48004090308321257</span>,<span class="number">0.47027246326919925</span>,<span class="number">0.4729926787942067</span>,<span class="number">0.4791714871023365</span>,<span class="number">0.4802746855193069</span>,<span class="number">0.46928869645287685</span>,<span class="number">0.4610686345968992</span>,<span class="number">0.46148039363623056</span>,<span class="number">0.4465829036650596</span>,<span class="number">0.45325327885669453</span>,<span class="number">0.4561009344727237</span>,<span class="number">0.44896180387861906</span>,<span class="number">0.4432531994880092</span>,<span class="number">0.43402174656668135</span>,<span class="number">0.4430723455872177</span>,<span class="number">0.4325052631268151</span>,<span class="number">0.43014902464619126</span>,<span class="number">0.4145465801111444</span>,<span class="number">0.41206530598678215</span>,<span class="number">0.4042027816414794</span>,<span class="number">0.4105454307414929</span>,<span class="number">0.4082913235344385</span>,<span class="number">0.4034299396645247</span>,<span class="number">0.39648476384706394</span>,<span class="number">0.393320447639678</span>,<span class="number">0.3915881544590333</span>,<span class="number">0.39603877907195106</span>,<span class="number">0.4074695404581618</span>,<span class="number">0.4053117945820319</span>,<span class="number">0.4173487887501802</span>,<span class="number">0.4162455852173646</span>,<span class="number">0.42334117857952025</span>,<span class="number">0.4459063725914117</span>,<span class="number">0.4455184110026689</span>,<span class="number">0.44474098888251545</span>,<span class="number">0.44404327967106405</span>,<span class="number">0.4567321697060647</span>,<span class="number">0.45217464629027443</span>,<span class="number">0.45325041515267184</span>,<span class="number">0.460829305634432</span>,<span class="number">0.4669593432008878</span>,<span class="number">0.46631943865612946</span>,<span class="number">0.4743283178341371</span>,<span class="number">0.46297092117729954</span>,<span class="number">0.47388949889659626</span>,<span class="number">0.4678889792582658</span>,<span class="number">0.46734479729460654</span>,<span class="number">0.48026674134241665</span>,<span class="number">0.48439838203938396</span>,<span class="number">0.48574668791223624</span>,<span class="number">0.48985567856962836</span>,<span class="number">0.4931734825597144</span>,<span class="number">0.48830411577865324</span>,<span class="number">0.49913936646380563</span>,<span class="number">0.5057091963669927</span>,<span class="number">0.5078240970388735</span>,<span class="number">0.513230286274736</span>,<span class="number">0.5211992662445427</span>,<span class="number">0.5149918325895467</span>,<span class="number">0.5199009290250793</span>,<span class="number">0.5074853718068091</span>,<span class="number">0.5113434097896654</span>,<span class="number">0.5092939451639706</span>,<span class="number">0.5073481524121105</span>,<span class="number">0.5110537944798174</span>,<span class="number">0.5096124087253724</span>,<span class="number">0.49639560197212335</span>,<span class="number">0.49456538201189726</span>,<span class="number">0.5014910057995196</span>,<span class="number">0.5063671130721592</span>,<span class="number">0.5020293695854213</span>,<span class="number">0.5007152441365781</span>,<span class="number">0.4958237410929754</span>,<span class="number">0.48436235333355754</span>,<span class="number">0.4914246074628358</span>,<span class="number">0.48253574954511186</span>,<span class="number">0.4772388391495147</span>,<span class="number">0.4755063515667492</span>,<span class="number">0.47530029920459643</span>,<span class="number">0.48763381361205554</span>,<span class="number">0.47761297699346644</span>,<span class="number">0.4745832345579325</span>,<span class="number">0.47575447225550305</span>,<span class="number">0.47009120521663034</span>,<span class="number">0.45409669348083376</span>,<span class="number">0.4687486393221862</span>,<span class="number">0.4767007399258976</span>,<span class="number">0.4795878650191238</span>,<span class="number">0.47514804507144476</span>,<span class="number">0.4761949406877303</span>,<span class="number">0.4856189189454463</span>,<span class="number">0.4876376366101524</span>,<span class="number">0.49962776744299886</span>,<span class="number">0.5284430101010977</span>,<span class="number">0.5431970757419092</span>,<span class="number">0.5495933513246893</span>,<span class="number">0.5488369809078774</span>,<span class="number">0.5231477513926921</span>,<span class="number">0.4934438615604616</span>,<span class="number">0.4988147587722185</span>,<span class="number">0.5099680323252431</span>,<span class="number">0.5161331652480952</span>,<span class="number">0.4907889556471781</span>,<span class="number">0.466802485537816</span>,<span class="number">0.43299440444190435</span>,<span class="number">0.41644001145569315</span>,<span class="number">0.4182245147607959</span>,<span class="number">0.43140410154710257</span>,<span class="number">0.4321411603788044</span>,<span class="number">0.42124117378743486</span>,<span class="number">0.42373569210440104</span>,<span class="number">0.42885276080573775</span>,<span class="number">0.43089887674527705</span>,<span class="number">0.43537636466177837</span>,<span class="number">0.4391244324344211</span>,<span class="number">0.43714183556075653</span>,<span class="number">0.44534281180581864</span>,<span class="number">0.45330930781348977</span>,<span class="number">0.4882133636066645</span>,<span class="number">0.5786804690028633</span>,<span class="number">0.5858615883356332</span>,<span class="number">0.5959517819304003</span>,<span class="number">0.5952476516022831</span>,<span class="number">0.5700759388034695</span>,<span class="number">0.4850423339485966</span>,<span class="number">0.4233501875830645</span>,<span class="number">0.4759834370270104</span>])</span><br><span class="line"></span><br><span class="line">tensor = tf.convert_to_tensor(input_data)</span><br><span class="line"><span class="built_in">print</span>(tensor)</span><br><span class="line"><span class="built_in">print</span>(tf.shape(tensor))</span><br><span class="line"><span class="comment"># 进行推理</span></span><br><span class="line">reconstructed_data = loaded_autoencoder.predict(np.expand_dims(tensor, axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(reconstructed_data)</span><br><span class="line"><span class="comment"># 计算MAE：平均绝对误差.</span></span><br><span class="line">train_loss_0 = tf.keras.losses.mae(reconstructed_data, tensor)</span><br><span class="line"><span class="built_in">print</span>(train_loss_0.numpy())</span><br><span class="line"></span><br></pre></td></tr></table></figure><script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script><script src="https://d3js.org/d3.v7.min.js"></script><script>  // CSV 数据  const csvData = `-0.11252183,-2.8272038,-3.7738969,-4.3497511,-4.376041,-3.4749863,-2.1814082,-1.8182865,-1.2505219,-0.47749208,-0.36380791,-0.49195659,-0.42185509,-0.30920086,-0.4959387,-0.34211867,-0.35533627,-0.36791303,-0.31650279,-0.41237405,-0.47167181,-0.41345783,-0.36461703,-0.44929829,-0.47141866,-0.42477658,-0.46251673,-0.55247236,-0.47537519,-0.6942,-0.7018681,-0.59381178,-0.66068415,-0.71383066,-0.76980688,-0.67228161,-0.65367605,-0.63940562,-0.55930228,-0.59167032,-0.49322332,-0.46305183,-0.30164382,-0.23273401,-0.12505488,-0.15394314,-0.024357404,-0.065608758,0.034999258,0.061935219,0.07119542,0.12392505,0.10312371,0.22522849,0.12868305,0.30248315,0.25727621,0.19635161,0.17938297,0.24472863,0.34121687,0.32820441,0.40604169,0.44660507,0.42406823,0.48151204,0.4778438,0.62408259,0.57458456,0.59801319,0.5645919,0.607979,0.62063457,0.65625291,0.68474806,0.69427284,0.66558377,0.57579577,0.63813479,0.61491695,0.56908343,0.46857572,0.44281777,0.46827436,0.43249295,0.40795792,0.41862256,0.36253075,0.41095901,0.47166633,0.37216676,0.33787543,0.22140511,0.27399747,0.29866408,0.26356357,0.34256352,0.41950529,0.58660736,0.86062387,1.1733446,1.2581791,1.4337887,1.7005334,1.9990431,2.1253411,1.9932907,1.9322463,1.7974367,1.5222839,1.2511679,0.99873034,0.48372242,0.023132292,-0.19491383,-0.22091729,-0.24373668,-0.25469462,-0.29113555,-0.25649034,-0.22787425,-0.32242276,-0.28928586,-0.31816951,-0.36365359,-0.39345584,-0.26641886,-0.25682316,-0.28869399,-0.16233755,0.16034772,0.79216787,0.93354122,0.79695779,0.57862066,0.2577399,0.22807718,0.12343082,0.92528624,0.19313742,1.0-1.1008778,-3.9968398,-4.2858426,-4.5065789,-4.0223767,-3.2343676,-1.5661258,-0.99225766,-0.75467971,0.042321173,0.14895093,0.18352707,0.29487608,0.19023267,0.235575,0.25348712,0.2217424,0.050233259,0.17804214,0.13956318,0.046794433,0.043007139,0.10654432,0.012654003,0.0039948539,0.045724179,-0.045999362,-0.072666959,-0.071077909,-0.15386649,-0.22725443,-0.2492697,-0.25348935,-0.33283516,-0.26432996,-0.34582525,-0.31078107,-0.33415978,-0.30617791,-0.17456252,-0.20616017,-0.22447967,-0.048683931,-0.019621159,0.094805186,0.11678639,0.18518592,0.23052577,0.13802707,0.24442554,0.27169477,0.25900331,0.26920166,0.12706463,0.20207339,0.25598343,0.15311526,0.21021583,0.19108187,0.19092702,0.21051006,0.20710764,0.20488835,0.20086474,0.34691963,0.3480019,0.25453726,0.33197465,0.3566903,0.34992982,0.43037963,0.46750163,0.48606309,0.4031884,0.47895569,0.39739177,0.46412003,0.45179539,0.36136121,0.3798309,0.34278528,0.39910656,0.3875084,0.25570346,0.28403408,0.28499257,0.25010809,0.17303626,0.14942257,0.141685,0.22226096,0.17284705,0.15077932,0.17656601,0.28094204,0.48993901,0.66088884,0.8931933,1.0269972,1.2023937,1.5574096,1.8084277,2.1643459,2.0707467,1.9036136,1.7644552,1.5077694,1.2934277,0.89456215,0.57801575,0.24434305,-0.28644345,-0.51588134,-0.73270694,-0.83246547,-0.80331806,-0.83625248,-0.77786456,-0.77475301,-0.73340394,-0.72138631,-0.83209517,-0.71198159,-0.7518673,-0.7577196,-0.85311967,-0.76698841,-0.68816064,-0.51992349,0.039406169,0.56032676,0.53835583,0.65688079,0.78748958,0.72404623,0.55578372,0.47633335,0.77381971,1.1196209,-1.4362499,1.0-0.56708802,-2.5934502,-3.8742297,-4.5840949,-4.1874487,-3.1514617,-1.7429402,-1.4906585,-1.1835803,-0.39422869,-0.28289676,-0.35692576,-0.28729745,-0.3994889,-0.47324409,-0.37904758,-0.39903903,-0.17859449,-0.33952226,-0.49844722,-0.33725108,-0.42547978,-0.42395228,-0.46317045,-0.49325315,-0.54974899,-0.52983109,-0.53093478,-0.5023649,-0.41736768,-0.52634573,-0.47100496,-0.67678428,-0.89861193,-0.61057104,-0.5301643,-0.76567438,-0.58193724,-0.53784761,-0.55638598,-0.43802347,-0.43624802,-0.40011375,-0.13498651,-0.23934677,-0.12024439,-0.0019714041,0.28500048,0.31564573,0.10736401,0.10952148,0.15807843,0.29189779,0.2612945,0.18840714,0.14065136,0.26336542,0.28720706,0.31431725,0.17794238,0.13829008,0.32106868,0.45816774,0.25191615,0.26135293,0.27748753,0.29879325,0.45907535,0.41914662,0.52050892,0.53776119,0.60321071,0.47563399,0.52169287,0.73524831,0.72954106,0.71852334,0.49843316,0.54544098,0.60482668,0.52129639,0.39438062,0.40502023,0.59756305,0.53113004,0.3776509,0.46770093,0.45756933,0.34111609,0.40791318,0.45912699,0.40393661,0.2981912,0.46110053,0.6646591,0.58775722,0.70132474,0.91720459,1.2479873,1.5055679,1.6401054,1.8109878,2.1853978,2.2629849,2.0529202,1.890488,1.793033,1.5647844,1.2346189,0.90030201,0.55195714,0.25822163,-0.128587,-0.092585287,-0.16860627,-0.4959888,-0.39503448,-0.32823831,-0.44813804,-0.26823009,-0.45641485,-0.35786694,-0.31750833,-0.43411223,-0.54920348,-0.32461549,-0.26808235,-0.22038421,-0.11742905,0.61405916,1.2848254,0.88607336,0.5314524,0.31137684,-0.021918959,-0.71368344,-0.53219671,0.32109663,0.90422673,-0.42179659,1.00.80023202,-0.87425189,-2.3847613,-3.9732924,-4.3382241,-3.8024222,-2.5345096,-1.7834233,-1.5944504,-0.75319899,-0.29810663,-0.42892797,-0.49135079,-0.36130424,-0.33929554,-0.32495154,-0.29011333,-0.36305106,-0.52568383,-0.59742301,-0.57552317,-0.56750306,-0.50455484,-0.61840616,-0.68281354,-0.74384873,-0.81558784,-0.82690193,-0.78237433,-0.92946196,-0.99967167,-1.0609695,-1.0078773,-1.0287349,-1.1226293,-1.0286499,-1.0465146,-1.0633724,-1.1224228,-0.98324201,-0.85586525,-0.791266,-0.58875425,-0.51830558,-0.39729838,-0.35433285,-0.20742492,-0.088266017,-0.16873361,-0.067592085,-0.032772281,0.071899471,0.081485179,0.067225257,0.13271969,0.070240933,0.10043175,0.15041753,0.10988654,0.14886026,0.20874762,0.22823622,0.27366422,0.29952441,0.32706231,0.24231412,0.38610522,0.41908722,0.43971785,0.48895381,0.54171511,0.57386922,0.63355476,0.41167103,0.44091729,0.5887054,0.53086502,0.55896452,0.60687423,0.61472869,0.53777156,0.59929423,0.64046303,0.56839906,0.54471048,0.55795891,0.53776149,0.47229245,0.46659561,0.63441689,0.42517487,0.42077721,0.44052297,0.36102802,0.35929943,0.32136632,0.42132549,0.50512195,0.67748866,0.90869284,0.98223031,1.1553635,1.3362539,1.6275344,1.7175939,1.6964865,1.7416856,1.674078,1.5469278,1.3317385,1.1101682,0.92221037,0.52177665,0.15485176,-0.1238607,-0.20299778,-0.24795602,-0.21912177,-0.2146952,-0.31921472,-0.19859713,-0.15161786,-0.12959259,-0.074938934,-0.19680704,-0.17479482,-0.20883265,-0.21075375,-0.10048537,0.19744621,0.966606,1.1488838,0.95843425,1.0590254,1.3716823,1.2773918,0.96030393,0.97101956,1.6143924,1.4214563,1.01.5225911,0.090146502,-2.3048594,-3.8464567,-4.9756669,-5.1222201,-3.5175835,-1.9529461,-1.6653285,-0.61271733,0.15978408,0.1390482,0.25517634,0.28751406,0.15385271,0.19107336,0.27561786,0.2907129,0.14039185,0.027916922,0.033551012,-0.17029102,-0.079020421,-0.040056011,-0.13774058,-0.21585129,-0.34216506,-0.21832591,-0.36291507,-0.39515543,-0.60864334,-0.64259456,-0.75017731,-0.66339098,-0.69423388,-0.76075209,-0.85578278,-0.89908005,-0.92278298,-0.86188518,-0.70547832,-0.73500271,-0.57030078,-0.58539589,-0.48830704,-0.17954798,-0.18485645,-0.1954939,-0.20504064,-0.031418833,-0.093779327,-0.079059605,0.024642189,0.10851936,0.09976356,0.20934888,0.053945868,0.20334453,0.12123955,0.11379352,0.2906042,0.34713735,0.36558619,0.42180942,0.46720686,0.40057942,0.54883792,0.63873276,0.6676709,0.74164367,0.85068305,0.76574687,0.83291793,0.66303613,0.71582558,0.6877828,0.66115856,0.71186278,0.69214033,0.51129505,0.48625219,0.58101535,0.64773502,0.58838177,0.57040062,0.50347029,0.34664437,0.44327704,0.32165099,0.24917348,0.22546789,0.22264848,0.39140769,0.2542928,0.2128369,0.22886292,0.15137256,-0.067479997,0.13300226,0.24181068,0.28131515,0.22056519,0.23488984,0.36383793,0.39146,0.5555207,0.94979904,1.1516786,1.2391987,1.2288493,0.87734413,0.47090645,0.54439632,0.69700632,0.7813637,0.43457943,0.10637308,-0.35622216,-0.58273556,-0.55831824,-0.37798224,-0.36789708,-0.51704136,-0.48290892,-0.41289218,-0.38489522,-0.32362985,-0.27234512,-0.29947295,-0.18725917,-0.078253778,0.39933766,1.6371971,1.7354562,1.8735201,1.8638855,1.5194615,0.35594853,-0.48818377,0.23199584,1.0-0.032245388,-0.54504988,-0.82233951,-1.6050845,-1.8057748,-2.0080666,-2.2339748,-2.191458,-2.0580713,-1.8808487,-1.5980847,-1.0734666,-0.60601763,-0.40062774,-0.30974032,-0.27599315,-0.16190422,0.10850521,0.30977527,0.41252896,0.53814803,0.54247379,0.42785112,0.37815942,0.36188738,0.37976272,0.45375055,0.5483923,0.67794169,0.66825595,0.4131611,0.22767328,0.27982432,0.35898388,0.40398305,0.43035215,0.40867432,0.42049766,0.42107193,0.32161806,0.22971489,0.20655718,0.22594547,0.34068889,0.44956444,0.40496562,0.30956912,0.24239092,0.17865089,0.18501601,0.33981574,0.51298385,0.47234082,0.24335581,0.082250646,0.041823061,0.04329214,0.16040296,0.26450173,0.21102713,0.22029886,0.31735332,0.31367233,0.31088657,0.38498299,0.36784817,0.2984939,0.31753582,0.32696731,0.29884615,0.3674174,0.47894802,0.51140793,0.49840732,0.49130584,0.50073549,0.49360933,0.53874692,0.63148766,0.57849716,0.53415701,0.6395139,0.67505033,0.5978203,0.48834268,0.39688329,0.42172264,0.51001168,0.55461096,0.59630145,0.57140413,0.45837937,0.44734872,0.50965739,0.53081508,0.51322441,0.46546407,0.49637166,0.60659122,0.66603659,0.62919292,0.54553078,0.54543892,0.60964795,0.59777943,0.57261331,0.60459362,0.57085274,0.48861488,0.48893631,0.51936437,0.55129762,0.61166333,0.61427183,0.55032934,0.48756962,0.41517402,0.39897417,0.53464846,0.66442392,0.63454566,0.56613755,0.47991327,0.29107729,0.10251066,0.018347409,0.043036237,0.038287591,-0.168029,-0.44347067,-0.90642467,-1.6213757,-2.3290905,-3.0498941,-3.6204134,-4.2104818,-4.043785,-3.0518127,-2.8068663,-0.87966639,0.0`;  const preProcessing = (data0) => {      const data1 = data0.map(item => Number(item))      // 归一化       const min_val = -6.2808752; // _.min(data1);       const max_val = 7.4021031;  //_.max(data1);       data1.forEach((element, index) => {      data0[index] = (element-min_val)/(max_val-min_val);    });  }  const display = (data0, normal, title) => {      // 复制数组      const dataArray = Array.from(data0);      const label = dataArray.pop()// 最后一个标签元素      preProcessing(dataArray)    console.log(JSON.stringify(dataArray));       // 图形绘制.       const width = 400;      const height = 300;      const margin = { top: 20, right: 20, bottom: 30, left: 40 };      const svg = d3.select("#chart")       .append("svg")       .attr("width", width + margin.left + margin.right)       .attr("height", height + margin.top + margin.bottom);      const g = svg.append("g")       .attr("transform", `translate(${margin.left},${margin.top})`);      // 假设数据点的 x 值为索引      const xScale = d3.scaleLinear()       .domain([0, dataArray.length - 1])       .range([0, width]);      const yScale = d3.scaleLinear()       .domain([0, d3.max(dataArray)])       .range([height, 0]);      const lineGenerator = d3.line()       .x((d, i) => xScale(i))       .y(d => yScale(d));      g.append("path")       .datum(dataArray)       .attr("d", lineGenerator)       .attr("stroke", normal? "steelblue" : "red")       .attr("stroke-width", 2)       .attr("fill", "none");      // X 轴      g.append("g")       .attr("transform", `translate(0,${height})`)       .call(d3.axisBottom(xScale));        const yAxis = d3.axisLeft(yScale).ticks(5).tickFormat(d => d.toFixed(1));      // Y 轴      g.append("g")       .call(yAxis);      // 添加边框      g.append("rect")       .attr("width", width)       .attr("height", height)       .attr("stroke", "black")       .attr("stroke-width", 0.5)       .attr("fill", "none");     // 添加标题      svg.append("text")      .attr("x", width / 2)      .attr("y", margin.top / 2)      .style("text-anchor", "middle")      .text(title);      // 以更细粒度的 y 轴间隔创建田字格      const numCellsX = 7; // x 轴方向格子数量      const numCellsY = 6; // y 轴方向格子数量      const cellWidth = width / numCellsX;      const cellHeight = height / numCellsY;      for (let i = 0; i < numCellsY; i++) {        for (let j = 0; j < numCellsX; j++) {          g.append("rect")           .attr("x", j * cellWidth)           .attr("y", i * cellHeight)           .attr("width", cellWidth)           .attr("height", cellHeight)           .attr("stroke", "gray")           .attr("stroke-width", 0.5)           .attr("stroke-opacity", 0.4)           .attr("fill", "none");        }  }  }  // 设置一个标志变量，决定是否使用自增数字作为表头  const useNumericHeaders = true;  // 使用 PapaParse 解析 CSV 数据  Papa.parse(csvData, {    complete: function (results) {      const data = results.data;      display(data[4], true, "A Normal ECG(5)")      display(data[5], false, "An Anomalous ECG(6)")      let table = '<table border="1" cellpadding="5">';      table += '<thead><tr>';      // 第一行第一列为空.      table += `<th></th>`;      if (useNumericHeaders) {        // 使用从 0 开始自增的数字作为表头        for (let i = 0; i < Object.keys(data[0]).length; i++) {          table += `<th>${i}</th>`;        }      } else {        // 使用第一行数据作为表头        const headerRow = data[0];        for (const value of Object.values(headerRow)) {          table += `<th>${value}</th>`;        }      }      table += '</tr></thead>';      table += '<tbody>';      // 创建表格内容，从第二行开始      const start = useNumericHeaders? 0 : 1;      for (let i = start; i < data.length; i++) {        const row = data[i];        table += `<tr><td>${i+1}</td>`;        for (const value of Object.values(row)) {          table += `<td>${value}</td>`;        }        table += '</tr>';      }      table += '</tbody></table>';      // 将表格插入页面      const tableContainer = document.getElementById('csv-table');      tableContainer.innerHTML = table;      // 判断表格宽度是否超过一定值，如果是则添加滚动条      const tableElement = tableContainer.querySelector('table');      const maxWidth = 500; // 设置一个最大宽度，超过这个宽度就添加滚动条      if (tableElement.offsetWidth > maxWidth) {        tableContainer.style.overflowX = 'auto';      }    }  }); </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style&gt;
/* 为表头 th 元素设置右对齐样式 */
table th {
  text-align: right;
}
/* 暗黑风格表格样式 */
table {
  font-size: 12px;
  width: 100%;
}
&lt;/style&gt;

&lt;h1 id
      
    
    </summary>
    
      <category term="算法" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="006.算法工程" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="实践" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="python" scheme="https://quano.gitee.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>0.基金股票</title>
    <link href="https://quano.gitee.io/wk/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%5B3%5D%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%5B3%5D%E6%8A%95%E8%B5%84/001.%E5%9F%BA%E9%87%91%E8%82%A1%E7%A5%A8/"/>
    <id>https://quano.gitee.io/wk/项目管理/[3]生活学习/[3]投资/001.基金股票/</id>
    <published>2024-10-08T12:21:38.345Z</published>
    <updated>2024-10-08T16:14:11.817Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="d4b232aa67b5616dbec69218a42178e185bcbb6079a10ce7bc4f433e2fcea567">6529a249a0af82b27e00ec9fb492a165b9e5611a926b8b592eb1228cf6519e33e5d9989bdfe8cc6e517bd46ec735d719742cea8579d87d28c5e410c3632746e8d64f0bc1d2d62176f195ff1e5a01c12cde6937b77455fd615eda4e50c8ea67228f02b7bdc7e96619671153400c63404b545f2b7e1fd11fdbe5d316e4d447a0eba45414ea42c7aa6ac872f565ee12c3ab66b5c8e31504907f99bb2fe03cb5158aa35ec9f39dd0b0d30b16a1e6327004c9dd5b1f4ec3388d7b57ba8c24ed495e2503a4443329f12418ef69d74b5a43577dc661d0aa97320e8b6206f0e02dba711dc230ce9dc91c47f0df5849eeecb5e929cbce101551c0b6219a66cb31f7ac574d68a11535663c89fbb6532b8190f1a5b352fa75383c0460165228ba42efc28b8fdd0c54e4c207500bed17fb8e0fe09fbfdbcd8102d71ff6ae7ce0df08fea17805a3a6dfa3a6fc9868383fa04a0b04469d345ea4448f3831f124b0c28e9f4fd1e3b85c752b8b7942d52b200c8b95ce73001b6b0a8216e0c730c933d9321785c0aac8c0d73bb99d47e6b37d96cf6096d5648306de4bc37a2ead5add211fbf19b71a46c5a984ba1c55e6a50dd20e375293df6d1423bd29d42aeec5289b60962b8f30aa871012203e941f5b8ce8962b4470fc856370d0f1841d76f023e8aa034427baa738ce9ed5eee3428d1b29eb78d32c011b5c324cea169386a7eae71ed98a9e2a31ff236397fee50778f38a49d0ea3f1919fc78d9ed1239aec7732a40f9e24757d5224662a507688ec6eb973ac331f78d58ccfff6de830cffef3e6c10ab1eac6b8c3f01286cfbbde35d573e4f5bcd283ca9674feaf0d37674ea7739bc0adc6b5f9a1e6b155a640afb05223534274aeb22f6dd59361f0d9adbd358c7f26309ffe553433cbcc1cc74c9b3cb5699afb5c9251d12528e5ce1b523949533bc2934ce1fc6d763fc6f17d3a85365b2630b737a7198546ec087fad5ca31034cf3a6665c52c9993b0a397e2b768f3e097b5e8bd12de09f5625357f3f1a4bc370e78ef2e1e9001d8ba89243d9ae9c9df75f8e6162a381b88cd33ea2799688c268418bfbc8432dbb0b63892794818e2db1603b70cb93d1b81ec3fef3489f5d05e4b2f272c6fbc7948c39d77bc226bcd5302b1f24c69d0331f1d7bcb99b3076075847340752fadc986cc2da757fed6f1bdb1736e8fad578db30371878b0a4ef2964f23afe7150b98525bd339f14b99c03da8caf0f6290f45a43f2a9a5708145cce8a122f0624b0b75f2eec68f1d785decd00c953dc65ad83142a80e5bca1429bcdeb6c6a21ece8c2403cf95c5381afe8e8083e512715677a5a93745799f743037f2f5653b0a20fe77a3d842fe1e5a84b005f8ca80971c5d972d672b2b73755499913f26f8010fbbb1b70c5b87f7095acb7c4378ed2dac79f2afa4b2698dfcd56bccfa28eee0986548f19458ca712632565a733d2f46d7ca501629aed68d949f8cf2e4090a7b73b1a98b1a418221449ea632a81fafb6eba0d59813cef961f38da9da1a257369a762150018830376203ca67c17f969062d8b8b90ca7a091393b39edb9361ab6a9ca6220443772835af045fda3b190d7f291cb9f8b5909282a06e9ead485bc463f0b1f6ec4d9d9b7607a753c4c57ea557bd4a754b1fcc4dd654ce45bac9197bd6a4fb5e310f03ded141546c01f6b45df19ca023ae85d609f820470d33327201e1373f4ed80fa58393a2c028532c9378eada1c8581ff5eeaedefbdc5eab40f9e287a97fc48d9953b4a80f3d0c778c4b8bd199a801714d1c5027e61258f7e6729be0f8ba568f64b3d4920dd726115bb7f5c5bb237ad1464d0922a3f4d4d1a5fe308378977dbb1cf4080f4c82f12268bd1b868b07dd4fa445f6821c7d508d338f44b343dfb0ab147745e38590a399ba9385e4728b17d993e578cb1ce256a6715c484d94b6ee56103ce35da5d605079b4b308af976b9913919651cba0748de71738d6852b60f861fa935589b677406dc25e44f3b85f18a7e480db1f0e90131f765549c2e10912c203c1ca3db0bb8a1a48753e3bab9008986ef203016dbf1da3752ed632c350c133499047c422095a0caf3e863012339e9e65cdb4a57e288b188b21aee574c8a8450d2fdb825785a4a4294fc902747a3373bc6c9c524029d17140d83aa71bf1a1b5cd5c784bcdc4b73014f3777ecec4e1d911501154d22103660c620570277b928bfbebc0cf6aaa1fa9cfd9dbc12feba9e385dc8099f2494c33b5f993eacf21bfb373fd5e703e3a5a24935a4b9efcb617e4809abbea4baabe5104364763407c2a2adb08054cce8553104e80cf32221107db92f8dd86e91479e3182817aafc1ecf6902be3f601e15ef97bcd6113ca1e3e2928e5f70ebe5211e001743cbfb3c8cc7083e79e7127f579c8d7d0709d00bf86823cefec9e34403847e221cab25d06d26361b981239ad773483c5f4cf9407ff81af94ccc8bbb09979cabe6dc7a32360f4282e7bc4bf36723b41baae371c16158251a94c525ff04effc6483a7556743bad8b19b51d2f5583b3232358086e8ecf3cd909c12660f541eb27c4f92f3067be3e674a4d1303311016a64c4950fdd8bad3e22d786411e0dc807e90661b0f8b3a8050fe86ca795867ada8749f5fae3e7c19fadbe0a467a500ac9bcebfa0116458cad93b1b47d4488c39c9faa893dbfa87b28c6ed44dd0a47b4811273d0b6719e59c6ec8c6c5fc4bf525fe460370c3a26f0aafb27ecb38ac4948914d337161fe5af6d82e28f0f06e9b76526bcbdc378d9772fc9e9a1ce90bfc66983cc723615efcea24c92ea441a04967c15d667dcc7824be35436ed5edf41e17881e68f16e8c79af6acf23afbf250eb99722dcb118da31d3b05333ae3c8edc5769db7c5f62d391da356503f882df23a41c870e54ddc61cf41384a7d4075945cb7e7e913a8e6150611fd05c144ec3b87ed91c3275d3813c3114716ec9ddf8433c713df674e076263e722a4e2b3e4e20b015999d71b0f981aa72a2c78bf1c104137f3ed9c1a1a2ecfd4ecf80c1901774788e58c44421c97b14b5d017816a25d21fb4efcdf74b5292150fcff1312d01c0c38a749f66d4a97dce8992a92f38e7b00fb94dae1da5958136153450dcab71ee769be634eb101c914ed50e8d97ebf052994e85bc322a52d8bb05cf85b1ad88fc88109e8929b0f3d8c770ad2c39c723e2a383a6c11d33ad8c205087f8d116279cb2bef3e8eec8be8f115c07cb40efde4e10448aafe319ed95b615b1f947a3e7cd7e904e1f58f40a7e8ed2dd0091b56640fa19772735f1748e4adc0b3a8d90cac9f88b5502e29dac7cfb5f4058b70d5fe2343fb81d856524b10deb634865a4a4799ad2e93ed7e850f0f00b3790317a66cf0e1a75aebd77be5e82af1c5493e1d94ec31b73b3bc9b7f5af9e53054bd1272d3e77f9a59a7da5ba8eb3f376586bce51c08ef904adf9fe199df47f94d710dd3b7e40df0c65ac9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，需要密码才能继续阅读。
    
    </summary>
    
      <category term="项目管理" scheme="https://quano.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="[3]生活学习" scheme="https://quano.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="[3]投资" scheme="https://quano.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E6%8A%95%E8%B5%84/"/>
    
    
      <category term="private" scheme="https://quano.gitee.io/tags/private/"/>
    
  </entry>
  
  <entry>
    <title>开窍</title>
    <link href="https://quano.gitee.io/wk/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%5B3%5D%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/002.%E5%BC%80%E7%AA%8D/"/>
    <id>https://quano.gitee.io/wk/项目管理/[3]生活学习/学习方法/002.开窍/</id>
    <published>2024-10-03T01:56:24.000Z</published>
    <updated>2024-10-02T17:45:44.159Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="9418b95a03848209fdb5fa51981f885cc6709977f97d0882587472c794794ae8">37df3367815823fa6a74ef48ceb50665da80319be16bd28d400d62fa12f57c66</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，需要密码才能继续阅读。
    
    </summary>
    
      <category term="项目管理" scheme="https://quano.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="[3]生活学习" scheme="https://quano.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="学习方法" scheme="https://quano.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="生活学习" scheme="https://quano.gitee.io/tags/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2.特征工程方案v2</title>
    <link href="https://quano.gitee.io/wk/%E7%AE%97%E6%B3%95/006.%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/002.%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%E6%96%B9%E6%A1%88v2/"/>
    <id>https://quano.gitee.io/wk/算法/006.算法工程/特征工程/002.特征工程方案v2/</id>
    <published>2024-09-13T16:48:57.000Z</published>
    <updated>2024-10-06T07:57:33.095Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="239c9aa0c16b8b7082edce0922f6a932f40407646941cd3c116f77fc36e650b3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，需要密码才能继续阅读。
    
    </summary>
    
      <category term="算法" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="006.算法工程" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="特征工程" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="private" scheme="https://quano.gitee.io/tags/private/"/>
    
      <category term="feature engineering" scheme="https://quano.gitee.io/tags/feature-engineering/"/>
    
  </entry>
  
  <entry>
    <title>3.特征工程系列_降维</title>
    <link href="https://quano.gitee.io/wk/%E7%AE%97%E6%B3%95/006.%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/003.%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%E7%B3%BB%E5%88%97_%E9%99%8D%E7%BB%B4/"/>
    <id>https://quano.gitee.io/wk/算法/006.算法工程/特征工程/003.特征工程系列_降维/</id>
    <published>2024-09-13T16:48:57.000Z</published>
    <updated>2024-10-03T18:05:03.332Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="13f2adf104015e444b9f88597d1aed53cd52da314726344d8bf612162ab064ff">6529a249a0af82b27e00ec9fb492a165c4e83dd8141b5e09c527f584514dbf917a069630a8b6e34420c1eba6d8bb552d6c926b532db7704125dc781c4f33335077c8fae29c4ad5bc7774f40faec5213281b64c28c1584694580a59a56c60a3b68bf514f60c0ef28cebbbf3f273e1dd5fc1669e5788a5194e49d6526e1c529b109cbeae70eccc4a1644d7952469cd1e89ad16c55069cb42b0fcba2822ef3dca513fb26d6284a6302918cb20a566edcce1b66d4ff60c8bcb01a83f7378d6d76052a09bb3623b3a75b710386d0c2c2d167a5f0af0254b99f614d0a3e865a20cdc35aace5e01eeafc68b7068d84b8e022d272428ded9e837fe2f663d32e04f85a6ef9208cc39b58481c2283ac4212421a3cf5fab50839d590495432b199172cf80a7b3e679710cf6966b756b1969a028675bc5dcc7882b2d379fea0cf298b3b686be1da31ef454b1b76772ffe2239c10d1377ff6c7130b88bf34eb3f75219c596288b58fb525de3c685fb4d42d3caf49c3ca88baee23a8e210cd2d5165a712b28882ac05a69ce514c69f10186716cd18c29fcaaf0abe0c7c92b3715ef0de7acac04d4a55788d48915229e3ffa2abdbc03856df62147c7344aff179060c9145494d9206eeecd92dfb5ac1ce4a2f3bdb4f165a1cdbf168c60303ddf6178fd8a521862f2e49098e45e2894f57c3cf247754a541c4cd0f39210ec658e0242bcbcc00de38e6d75074c65f79b369cd2906fd295d082dd5a58cc29e245cfce0cb76b7b924d4db26f35111b9eef7a85c7e8625b7ed0eb94e74b015312004316f541e113e5121ce1853dc1582f70903cf7e1646a11eda45788441acf1a368e638f7d2a6d2914dd6c715e579636ac14323f79293daab7e510d8e763289a4d9f7da20bbdcb538e5470628968810e28db628048094b321687ac42cd3e8fefc8bc676258577481b1a57c8dea0dd7762eb289356f1fd002011c03c476196aefc518c2dd415f9a61f7455649cb485cdda999c6938de17ccf397898f8472e3d7e0eb4055f73081ce925c8f3bfeb097e78327956866b2046a7c7e32887049d4086373c108de236df9ef37b6d90c88a75412dd0c8983a5595400911e4b86169aa42409c0454de67bf0aec0cd17d213248b564f36aae2171c9caa75121c6ec8576e52d7c4703fb2fd512f139bb1360cc91a7641ae8898c59224ada48243d3fe678aed09fd7a693e599b5bc185d29c2a798d8449f0a9495875475105b616649744cb2c2bf368550fa7ce8f9868fe2ce44ed6905dc046d53920e57cf0b0db68f4e6cfb82bb2b76d89a38bbca6984dd49a218fc4e5b374f3f4ed1c04fc89c528bfd5aa3d8ff720cb68d59e9c8c98ad16e7feb79874a1bbdf0a3d4fa2c5005b6d8bd51b7f700658c3a636d6202cd8750e4c2bd457d976aefd599ee4ef2d7d385781721f527e997efccc9d3cec8a29aafbbc1b3d22083fe99ac2f12afe0cb9d7f4e48abea204aca40fd713a0ca782dd64c563a3101c9f92a4d8f281bfd92ff54d2612a661763981b5be7183b20cfb003299602324c5064a8fe6863b8107758741ba3c5797948f7e9d3dac297295a1ac20044e8e1c06a022e2dac4837aacfe0a9359499f4264c9c217fceed7a2df8bfcefc10b28dbc0963584c1c7268a79058c19353c03c6ea1ce25cda5ee441fd635020e45668fd5536cc0bab4051c38334e5f89937e828003d7a1a4404b2a88ec2fcbd2740422ec0e27146f79aab033f0a13420aef86df5cacd55256edd70f5afc95424aa7480150a8d3da46006eacbf12010116210284d771e128e0a868277abf31b942cba58c60fc1601ccc322e7ff2c355de997525adc500e37da2d3023e96a43ca5a6ab9a8192d52e01bc53fac3095e0efa3a4afb71706daf6fd39b64ef5899f69dd8e97cae4aff61c6c262b2eb0c8a4ab111d35d1fc44ef8d146f344aec5c8b4c83b04f6f542ac0be66ed8a34d4007ad2a840035190a2cd873e56c3e73de0c1effb7caf3bf9afbd6a8159ddb37ff870febbfcab10b280b677e706ab15faebb51951de62c5cca3dd9134c36110efa8c8d85ce3257e220f269a3c087b579074a28d6c257e6f395e30d9a4cdd80cdcda6e8427c600f76a156e93fbd295b0ac13f9810fee2d8bfcc572b95ea4887c60ea2889fa5daca4d63e46224d4d6eb11551c6bd7f36d0429d0fd6bcc1570352c60213cc6a33018d82877a4a556a7a3880c0a1715f023ecb65623137eb718737aca178a28a661aeac1f15ee72cde1a1f1563e2ef1973ff0496b30e154f57d5914039018d1ceb9f997d83df11a1ea822da8337c4fb433781bf6959c52a488a8e65cd9d337110dac0b8a137b47b1024c8ce9600728a09409bbaaddc49223e8055d748fa7e1b43d9cbd30cd0545cb99296941cdfe15de7a7481f1551af760403bc750f1a81a4ae2939ad51ef6d4f9d14ab42aa0fcf867a73cb8e9c1fde51fb06a816f3f7312ec603bda56d565b5e744bfda93f43ea07e13d193ac925aac26e047340c737b9269b62cf8e977395624a5ba77c3b0df047be74adc0521e9bcc5939b349f24557a137c010aaa94ee174f60f6bdac2bca389236bb414d5a4392a7c35d34bb9e3f96b5fd0c72652112d4c8e63d7104154286728fb7ac1d2ff31cc0bb69310f6e27a8f852cd9f2a76e11cecbf320bfaa4b196ef47473852a03396a5789e464de9dc83e65dfe29d2fe20283366cce4abfff4b97aab519167e9b3cf764e2af21d53bf5c98bf681f979ea9912fc8be951752b8c236e6ef61c63f087bff63a6cc3ab9e26dfdb3bcc4de41e7180d65fc987d7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，需要密码才能继续阅读。
    
    </summary>
    
      <category term="算法" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="006.算法工程" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="特征工程" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="private" scheme="https://quano.gitee.io/tags/private/"/>
    
      <category term="feature engineering" scheme="https://quano.gitee.io/tags/feature-engineering/"/>
    
  </entry>
  
  <entry>
    <title>VScode搭建C++开发环境</title>
    <link href="https://quano.gitee.io/wk/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%5B2%5D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/%5B%E9%87%8D%E7%82%B9%5D%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/VScode%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://quano.gitee.io/wk/平台工具/[2]计算机基础/编程语言/C++/[重点]开发环境/VScode开发环境搭建/</id>
    <published>2024-09-10T17:13:34.000Z</published>
    <updated>2024-10-03T14:04:00.231Z</updated>
    
    <content type="html"><![CDATA[<p>一门语言的开发， 最重要和基础的是 编译器和环境。</p><p>与java语言相比，c++有一些相关的编译器，比如clang等。 而环境有所不同，java依赖JRE，c++依赖一些库和动态链接库。</p><p>关键词： 编译器、环境、依赖管理、vscode(Build Task)、vscode(Debug)</p><h1 id="1-C-编译器"><a href="#1-C-编译器" class="headerlink" title="1. C++编译器"></a>1. C++编译器</h1><h2 id="1-1-c-环境"><a href="#1-1-c-环境" class="headerlink" title="1.1 c++环境"></a>1.1 c++环境</h2><p>不同于java， 需要安装jdk，即：开发工具包，包括<strong><em>编译器(javac)</em></strong>、<strong><em>运行时环境(JRE)</em></strong>.</p><p>而c++ 不需要java那样 完整的运行时环境(JRE)。 但 C++ 程序在运行时会依赖一些库和动态链接库（DLL 或 .so 文件），<br>主要涉及到<strong><em><span style="color: blue;">标准库</span></em></strong>和<strong><em><span style="color: blue;">依赖管理</span></em></strong>。</p><p>另外就是c++的<strong><em><span style="color: blue;">编译器</span></em></strong>：clang是更加现代化、模块化，编译速度更快，适合大型项目的编译器。</p><h2 id="1-2-clang-编译器-安装"><a href="#1-2-clang-编译器-安装" class="headerlink" title="1.2 clang(编译器)安装"></a>1.2 clang(编译器)安装</h2><p>编译器选择clang。 通常情况下，Mac上已经安装好了clang。<br>如果没有(clang —version 没有结果) 或则版本不符合使用要求， 则可以重新安装。<br>安装方式包括：<em><span style="color: blue;">1. 基于Commond Line Tools， 重新安装CLT。 2. 基于llvm，brew install llvm</span></em></p><h2 id="1-3-c-标准库"><a href="#1-3-c-标准库" class="headerlink" title="1.3 c++标准库"></a>1.3 c++标准库</h2><h2 id="1-4-依赖管理"><a href="#1-4-依赖管理" class="headerlink" title="1.4 依赖管理"></a>1.4 依赖管理</h2><h1 id="2-插件安装"><a href="#2-插件安装" class="headerlink" title="2. 插件安装"></a>2. 插件安装</h1><p>这一块比较简单， 在vscode中 找到需要的 c++相关插件，安装即可，在这里不展开了。</p><h1 id="3-开发环境配置"><a href="#3-开发环境配置" class="headerlink" title="3. 开发环境配置"></a>3. 开发环境配置</h1><h2 id="3-1-环境"><a href="#3-1-环境" class="headerlink" title="3.1 环境"></a>3.1 环境</h2><p>如何在 vscode中查看 c++使用了 什么环境？ 即clang 编译器及c++库。</p><ol><li>打开 vsCode 的Settings，搜索”C++“，包含了一些配置项。</li><li>或者在VSCdoe中打开终端，输入命令 clang —version。</li></ol><h2 id="3-2-Build-Task"><a href="#3-2-Build-Task" class="headerlink" title="3.2 Build Task"></a>3.2 Build Task</h2><p>VSCode中的 Terminal -&gt; Run Build Task</p><p>实现原理： 通过.vscode下的tasks.json  文件描述， 实现将 相关的命令打包成任务。<br>优点：不用每次输入一大串 命令。</p><h2 id="3-3-Debug"><a href="#3-3-Debug" class="headerlink" title="3.3 Debug"></a>3.3 Debug</h2><p>c++ Debug的原理：主要依赖于编译器生成的调试信息和调试器的功能。<br>以下是调试的关键点：</p><ul><li>编译器生成调试信息（在编译 C++ 程序时，可以使用编译选项（如 -g）来生成调试信息。 包括：变量名、行号和函数调用等）</li><li>调试器（如 GDB、LLDB 或 VSCode 内置调试工具）：使用这些调试信息来提供逐步执行、设置断点和查看变量值的功能。</li><li>调试器能够在运行时暂停程序，检查程序状态，并帮助找出错误或异常行为。</li><li>源代码映射：<span style="color: blue;">调试器将机器代码映射回源代码</span>。 允许开发者在源代码中看到程序执行的具体位置。</li></ul><h1 id="draft"><a href="#draft" class="headerlink" title="draft"></a>draft</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>多平台几乎相同的使用体验，除了部分快捷键不一样。</li><li>非常轻量，启动速度很快。</li><li>强大的扩展功能，C++与CMake Tools都是扩展。</li><li>内置终端，来回切换很方便。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>IntelliSense不如VS的好用，经常找不到符号，需要重新解析文件。相比于VS2019原生支持CMake，体验差很多。</li><li>Mac下不支持”Jump to Cursor”，而Xcode支持这个功能。对于调试还是有些不方便。</li></ul><h2 id="配合CMake-ToolsCMake"><a href="#配合CMake-ToolsCMake" class="headerlink" title="配合CMake ToolsCMake"></a>配合CMake ToolsCMake</h2><p>主要使用settings.json配置文件，以往需要手动输入的命令、传递的参数都可以写在这个文件里。在配置文件中传递参数在cmake.configureSettings中设置参数，相当于传入了-D+参数给CMake。也可以使用cmake.configureArgs，但是官方不推荐。</p><h2 id="在配置文件中设置环境变量"><a href="#在配置文件中设置环境变量" class="headerlink" title="在配置文件中设置环境变量"></a>在配置文件中设置环境变量</h2><p>有3个字段可以设置：cmake.configureEnvironment: 仅用于CMake配置阶段cmake.buildEnvironment: 仅用于编译阶段cmake.environment: 同时用于CMake配置与编译阶段为Debug/Release设置不同环境变量可以通过CMake Variants实现，在buildType这个variant中分别在Debug/Release的env字段中设置。构建不同配置的目标文件还是用CMake Variants，创建一个新的variant设置不同的配置。这个variant会与其它variant排列组合生成很多kit。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.zhihu.com/question/353722203">使用VSCode+CMake开发C++</a><br><a href="https://blog.csdn.net/Feiyuemoxuan/article/details/110147332">Mac使用VS Code配置C++编译和调试环境</a></p><p><a href="https://blog.csdn.net/qq_45596100/article/details/121114828">M1芯片Mac配置vscode调试C++环境</a><br><a href="https://zhuanlan.zhihu.com/p/463083502">M1 McacBook 配置 VS Code debug C++配置(CodeLLDB)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一门语言的开发， 最重要和基础的是 编译器和环境。&lt;/p&gt;
&lt;p&gt;与java语言相比，c++有一些相关的编译器，比如clang等。 而环境有所不同，java依赖JRE，c++依赖一些库和动态链接库。&lt;/p&gt;
&lt;p&gt;关键词： 编译器、环境、依赖管理、vscode(Build 
      
    
    </summary>
    
      <category term="平台工具" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"/>
    
      <category term="[2]计算机基础" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="编程语言" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="C++" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"/>
    
      <category term="[重点]开发环境" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/%E9%87%8D%E7%82%B9-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="rocksdb源码" scheme="https://quano.gitee.io/tags/rocksdb%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>C++开发环境构建</title>
    <link href="https://quano.gitee.io/wk/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%5B2%5D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/%5B%E9%87%8D%E7%82%B9%5D%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA/"/>
    <id>https://quano.gitee.io/wk/平台工具/[2]计算机基础/编程语言/C++/[重点]开发环境/C++开发环境构建/</id>
    <published>2024-09-09T17:13:34.000Z</published>
    <updated>2024-09-18T18:03:18.578Z</updated>
    
    <content type="html"><![CDATA[<p>C++的开发环境，目前常用的IDE是vscode。 macOS安装 开发工具(例如xcode、commondlinetools) 之后，其包含了c++的标准库。<br>通过环境变量等方法正确的引入标准库以及三方库 即可实现 基于vscode开发 c++的项目。</p><p>然而，环境搭建的过程中，重要的是：</p><ul><li><span style="color: blue;">对于编译器、构建工具、库及其管理 的理解、对C++版本的理解。</span></li><li><span style="color: blue;">如何使用 vscode、clang++、make、cmake 开发和构建 c++的项目；如何debug调试；以及理解这些工具和过程的原理。</span></li><li><span style="color: blue;">可能会遇到哪些常见的问题？ 怎么解决、以及怎么持续深入学习c++的项目。</span></li></ul><span id="more"></span><h1 id="1-编译器"><a href="#1-编译器" class="headerlink" title="1.编译器"></a>1.编译器</h1><p>常见的编译器有：GCC、Clang、Microsoft Visual C++等等。<br><span style="font-size: 12px;color: blue;"><em>clang更加现代化、模块化，编译速度更快，适合大型项目</em></span></p><p>许多编译器即支持c也支持c++，但对于c++的一些新特性和复杂的语法结构，编译器的优化和处理可能有所不同。</p><h2 id="1-1-编译和运行"><a href="#1-1-编译和运行" class="headerlink" title="1.1 编译和运行"></a>1.1 编译和运行</h2><p>最简单的C程序<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This is a C program.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译与运行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc helloworld.c -o helloworld</span><br><span class="line"><span class="comment"># 或者 clang example.c -o example</span></span><br><span class="line">./helloworld</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">This is a C program.</span><br></pre></td></tr></table></figure></p><h1 id="2-c-版本-clang版本"><a href="#2-c-版本-clang版本" class="headerlink" title="2. c++版本/clang版本"></a>2. c++版本/clang版本</h1><p>不同来源版本的clang可能存在差异<br><span style="font-size: 12px;color: blue;">mac系统自带的Clang编译器不支持OpenMP，需要手动安装Clang(基于llvm)，即 brew install llvm.</span><br><span style="font-size: 12px;color: blue;">然后配置环境变量，后续所有开发场景都可以使用此版本的clang和基于llvm的工具。</span></p><p>clang++版本</p><p>这些编译工具(clang/g++) 路径在xcode或者commondlinetools 路径下.</p><p><strong>1.怎么理解c++的版本？</strong></p><p><strong>2.clang的版本和c++版本的关系？</strong></p><p><strong>3.clang版本的区别？和make有兼容性问题吗？</strong></p><p><strong>4.怎么查看c++的库路径和版本信息？</strong><br>mac系统库路径一般在：/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libc++.1.tbd</span><br><span class="line">libc++.tbd</span><br><span class="line">libc++abi.tbd</span><br></pre></td></tr></table></figure><p>.tbd 是苹果操作系统的文件格式，用于描述动态库的符号信息。以上3个是<strong><em><span style="color: red;">C++标准库的实现</span></em></strong>。<br>linux中呢？</p><h1 id="3-库和库管理"><a href="#3-库和库管理" class="headerlink" title="3.库和库管理"></a>3.库和库管理</h1><p>c++相关的库 一般在开发工具的环境路径/目录(/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib)、<br>以及 系统的基础lib路径(/usr/lib、/usr/local/lib/)下。 例如mac中，在xcode、Command Line Tools 工具的路径下。<br><span style="font-size: 12px;color: blue;"><em>开发环境、运行时环境项目 会从这些路径下找 需要的库内容。</em></span> <span style="font-size: 12px;color: blue;"><em>「c++主要涉及 头文件(include)、库文件(lib)路径」</em></span></p><h2 id="3-1-库"><a href="#3-1-库" class="headerlink" title="3.1 库"></a>3.1 库</h2><p>c++的库. </p><h3 id="3-1-1-C-标准库"><a href="#3-1-1-C-标准库" class="headerlink" title="3.1.1 C++标准库"></a>3.1.1 C++标准库</h3><p>提供了一些列重要的模块。<br>（容器、算法、迭代器、字符串、输入输出、智能指针、线程、日期和时间、类型特性、元编程、异常处理等）</p><h3 id="3-1-2-STL和Boost"><a href="#3-1-2-STL和Boost" class="headerlink" title="3.1.2 STL和Boost"></a>3.1.2 STL和Boost</h3><p>STL 和 Boost 是 C++ 开发中两个重要的库。<br>STL（标准模板库）是 C++ 标准库的一部分<br>Boost 是一个大型的开源 C++ 库集合，它提供了许多扩展功能和库，这些库在功能和性能上都经过了严格的测试和验证。Boost 的设计目的是为 C++ 开发者提供可重用的组件，许多 Boost 库的设计理念和接口最终被采纳到 C++ 标准库中。</p><p>STL 是 C++ 开发的基础库，而 Boost 则是 C++ 开发的高级库，提供了更多扩展和增强功能。两者在 C++ 编程中各有其重要作用，Boost 库中的许多功能也为 C++ 标准库的演进做出了贡献。</p><h2 id="3-2-库管理"><a href="#3-2-库管理" class="headerlink" title="3.2 库管理"></a>3.2 库管理</h2><p>介绍下 通过环境变量 正确、方便的 引入开发环境/项目。<br>另外介绍下 常见的安装的软件的 开发相关的库。</p><p>项目是如果找到 这些库的呢？<br>以c++库和头文件为例：</p><ol><li>当前目录、当前项目</li><li>编译时指定的头文件目录（有 -I -L 参数指定）</li><li>系统环境变量 CPLUS_INCLUDE_PATH 或 C_INCLUDE_PATH 指定的目录</li><li>gcc默认目录： /usr/include;/usr/local/include;等等.(各系统平台可能会有不同)</li></ol><h3 id="3-2-1-环境变量"><a href="#3-2-1-环境变量" class="headerlink" title="3.2.1 环境变量"></a>3.2.1 环境变量</h3><p>和java同理，要用这些 不同路径下的 库和头文件，可能会涉及 环境变量的配置。 或者ide环境的配置。<br>主要目的是通过环境变量 正确、方便的 将需要的库引入开发环境/项目。<br><span style="font-size: 12px;color: blue;">(有些ide中直接配置即可，不用配置环境变量；但通过环境变量配置可能后续使用起来更方便些)</span></p><p>常见的库路径如下：</p><div class="table-container"><table><thead><tr><th>来源</th><th>说明</th><th>路径</th></tr></thead><tbody><tr><td>CommandLineTools</td><td>CommandLineTools</td><td>/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include</td></tr><tr><td>XCode</td><td>XCode</td><td>/Applications/Xcode.app/Contents/Developer/Platforms/ MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib</td></tr><tr><td>系统库</td><td>通常是<span style="color: red;">系统自带</span>的库文件(属于系统核心部分)</td><td>/usr/lib/</td></tr><tr><td>系统(手动安装)</td><td>类Unix系统(如macOS/Linux)中常用的目录，存放本地安装的库文件(<span style="color: red;">手动或第三方软件安装</span>)</td><td>/usr/local/lib/</td></tr><tr><td>本地头文件</td><td>类Unix系统(如macOS/Linux)中常用的目录，存放本地安装的库文件(<span style="color: red;">手动或第三方软件安装</span>)</td><td>/usr/local/include/</td></tr></tbody></table></div><p>当手动安装或者下载的第三方的软件的路在别的指定路径下，需要在某个项目中使用时。 相关的库和头文件 路径可以通过 环境变量的配置引入项目。 例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CPATH=<span class="variable">$CPATH</span>:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib</span><br><span class="line"><span class="built_in">export</span> C_INCLUDE_PATH=<span class="variable">$C_INCLUDE_PATH</span>:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include</span><br><span class="line"><span class="built_in">export</span> CPLUS_INCLUDE_PATH=<span class="variable">$CPLUS_INCLUDE_PATH</span>:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include</span><br></pre></td></tr></table></figure><h3 id="3-2-2-CommandLineTools和XCode"><a href="#3-2-2-CommandLineTools和XCode" class="headerlink" title="3.2.2 CommandLineTools和XCode"></a>3.2.2 CommandLineTools和XCode</h3><p>这两个都是mac上的开发工具。 CommandLineTools 是轻量级的，主要提供了命令行开发工具； XCode是功能强大的集成开发环境(IDE).<br><span style="font-size: 12px;color: blue;">如果是iOS、macOS、watchOS和tvOS的开发，可以安装XCode； 其它情况，建议安装CommandLineTools即可(仅几百M)</span></p><div class="table-container"><table><thead><tr><th>类型</th><th>CommandLineTools</th><th>XCode</th></tr></thead><tbody><tr><td>安装包大小</td><td>几百M</td><td>几个GB，甚至10多GB</td></tr><tr><td>用途</td><td>主要提供命令行工具，如<span style="color: red;">编译器(Clang、GCC等)、链接器、调试器(LLDB)</span>和其他基本的开发工具</td><td>功能强大的集成开发环境(IDE)，代码编辑、调试、界面设计、版本控制等；模拟器、性能分析、测试等高级功能</td></tr><tr><td>使用场景</td><td>常用于 脚本编写、小型项目开发、自动化构建等</td><td>适合专业的IOS和macOS应用程序开发，以及需要图形界面设计和高级开发功能的项目</td></tr><tr><td>更新方式</td><td>通过命令行工具(如xcode-select —install)</td><td>通过Mac App Store进行更新，需要较长时间</td></tr></tbody></table></div><p><em><span style="color: blue;">一些c++的项目，需要的 三方库和头文件，可以通过引入 CommandLineTools 下的</span></em>。</p><h3 id="3-2-3-llvm和clang"><a href="#3-2-3-llvm和clang" class="headerlink" title="3.2.3 llvm和clang"></a>3.2.3 llvm和clang</h3><p><strong>1.什么是LLVM？</strong><br>LLVM(Low Level Virtual Machine) 是一个开源的 编译器基础设施项目。</p><p><strong>2.包含的工具集？</strong></p><ul><li>包括Clang编译器，它是一个基于LLVM的C、C++和Objective-C 编译器。</li><li>LLDB调试器，用于调试程序。</li><li>其他工具如lli（LLVM解释器）、llvm-link（链接器）等</li></ul><p><strong>3.有什么特点和优势？</strong></p><ul><li>可扩展性、性能优化、跨平台、开源和活跃的社区。</li></ul><p><strong>4.能做什么？</strong></p><ul><li>编译器开发</li><li>代码优化</li><li>程序分析和调试</li><li>跨平台开发</li><li>工具和库(Clang、LLDB、Polly)</li></ul><p><strong>安装和查看</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mac默认的一般是 基于xcode中的。 建议自己安装</span></span><br><span class="line">brew install llvm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">brew info llvm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/opt/llvm/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="comment">## 这样 clang也是基于llvm的。 而不是基于xcode的clang 15.0.0版本</span></span><br><span class="line"><span class="comment">## 实质的 安装路径在：/usr/local/Cellar/llvm/  /usr/local/opt/llvm/ 是链接过去的</span></span><br><span class="line"><span class="comment">## 不同版本的macOS系统，homebrew 安装这种三方工具的 路径不太一样(新版系统 在/opt/homebrew/...)</span></span><br></pre></td></tr></table></figure></p><h3 id="3-2-4-GCC和GDB"><a href="#3-2-4-GCC和GDB" class="headerlink" title="3.2.4 GCC和GDB"></a>3.2.4 GCC和GDB</h3><p>重点：谈到 llvm和clang， 同样的介绍下 GCC和GDB。</p><ol><li>clang是LLVM项目的一部分， 是一个开源的编译器前端。 </li><li>而gcc 是GUN Compiler Collection的缩写，是一个成熟的开源编译器集合</li><li>使用 Clang 还是 GCC？如果 Clang 能够完全满足你的编译需求， 并且不依赖GCC特有的功能，那么可以仅使用clang。<br>如果老项目基于GCC，可能需要同时使用gcc和clang。</li></ol><p>GDB 类似 lldb 主要用于调试（生成调试信息）。</p><p>两者的比较：<br>LLVM 和 Clang 在设计上较为现代，提供了优秀的错误和警告信息、更快的编译速度、更好的 C++ 标准支持和先进的静态分析工具。<br>GCC 依然是一个成熟、稳定且功能强大的编译器，具有广泛的语言和平台支持，适合很多传统和生产环境。</p><h1 id="4-构建"><a href="#4-构建" class="headerlink" title="4.构建"></a>4.构建</h1><p>构建工具 <strong><em>类似java的 maven</em></strong>，用于较大型项目的构建。常见的构建工具包括：make、cmake、bazel。</p><ul><li>make是传统的构建工具，简单高效，适合小到中型项目、在Unix和类Unix系统上使用。</li><li>cmake是跨平台(win/linux/macOS/android等)的构建工具，广泛用于C和C++项目。 通过「CMakeLists.txt」描述项目构建过程。</li></ul><h2 id="4-1-make"><a href="#4-1-make" class="headerlink" title="4.1 make"></a>4.1 make</h2><p>make是个构建工具，类似于maven。<br>Makefile定义了项目的依赖关系和构建规则。</p><p><strong>1.发展背景和现状</strong><br>make起源于AT&amp;T贝尔实验室，当前由FSF维护， GUN项目提供make的GUN版本。（目前大多数开发环境和操作系统中使用的make实际上是指GUN make，简称make）</p><p><strong>2.make的基本概念</strong><br>Makefile、目标、依赖、规则。</p><h3 id="4-1-1-Makefile"><a href="#4-1-1-Makefile" class="headerlink" title="4.1.1 Makefile"></a>4.1.1 Makefile</h3><p>Makefile的基本结构</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变量定义 「定义了 (CC) 和编译选项 (CFLAGS)」</span></span><br><span class="line">CC = gcc</span><br><span class="line">CFLAGS = -Wall -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标规则</span></span><br><span class="line"><span class="section">myprogram: main.o foo.o</span></span><br><span class="line"><span class="variable">$(CC)</span> -o myprogram main.o foo.o</span><br><span class="line"><span class="comment">## myprogram 是最终生成的可执行文件，它依赖于 main.o 和 foo.o。</span></span><br><span class="line"><span class="comment">## 生成 myprogram 的命令是 $(CC) -o myprogram main.o foo.o。</span></span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c main.c</span><br><span class="line"><span class="comment">## main.o 是一个目标文件，它依赖于 main.c 源文件。生成 main.o 的命令是 $(CC) $(CFLAGS) -c main.c。</span></span><br><span class="line"></span><br><span class="line"><span class="section">foo.o: foo.c</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c foo.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理规则</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f myprogram main.o foo.o</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>xgboost的Makefile解读</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变量定义 「定义了 (CC) 和编译选项 (CFLAGS)」</span></span><br><span class="line">CC = gcc</span><br><span class="line">CFLAGS = -Wall -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标规则</span></span><br><span class="line"><span class="section">myprogram: main.o foo.o</span></span><br><span class="line"><span class="variable">$(CC)</span> -o myprogram main.o foo.o</span><br><span class="line"><span class="comment">## myprogram 是最终生成的可执行文件，它依赖于 main.o 和 foo.o。</span></span><br><span class="line"><span class="comment">## 生成 myprogram 的命令是 $(CC) -o myprogram main.o foo.o。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ALL_DEP = <span class="variable">$(<span class="built_in">filter</span>-out build/cli_main.o, <span class="variable">$(ALL_OBJ)</span>)</span> <span class="variable">$(LIB_DEP)</span></span><br><span class="line"><span class="comment"># 这个函数调用从 $(ALL_OBJ) 中排除 build/cli_main.o 文件，返回剩余的对象文件列表。</span></span><br><span class="line"></span><br><span class="line">CLI_OBJ = build/cli_main.o</span><br><span class="line"></span><br><span class="line"><span class="section">build/%.o: src/%.cc</span></span><br><span class="line">@mkdir -p $(@D)</span><br><span class="line"><span class="variable">$(CXX)</span> <span class="variable">$(CFLAGS)</span> -MM -MT build/<span class="variable">$*</span>.o <span class="variable">$&lt;</span> &gt;build/<span class="variable">$*</span>.d</span><br><span class="line"><span class="variable">$(CXX)</span> -c <span class="variable">$(CFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">xgboost: <span class="variable">$(CLI_OBJ)</span> <span class="variable">$(ALL_DEP)</span></span></span><br><span class="line"><span class="variable">$(CXX)</span> <span class="variable">$(CFLAGS)</span> -o <span class="variable">$@</span>  <span class="variable">$(<span class="built_in">filter</span> %.o %.a, <span class="variable">$^</span>)</span>  <span class="variable">$(LDFLAGS)</span></span><br><span class="line"><span class="comment">## 目标：xgboost 是我们要构建的目标，通常是一个可执行文件。</span></span><br><span class="line"><span class="comment">## 依赖：$(CLI_OBJ) 和 $(ALL_DEP) 是构建 xgboost 所需的依赖文件或对象。</span></span><br><span class="line"><span class="comment">## $(CLI_OBJ) 可能是编译生成的对象文件，而 $(ALL_DEP) 可能包括其他需要的文件（如库文件或额外的对象文件）。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## $(CXX)：这是编译器变量，通常设置为 C++ 编译器，如 g++ 或 clang++。</span></span><br><span class="line"><span class="comment">## $(CFLAGS)：这些是编译标志，通常用于设置编译器选项，如优化级别和调试信息。对于链接阶段，这个变量可能会被用来设置链接选项。</span></span><br><span class="line"><span class="comment">## -o $@：$@ 是自动变量，表示规则中的目标，即 xgboost。-o 选项用于指定输出文件名。</span></span><br><span class="line"><span class="comment">## $(filter %.o %.a, $^)：$^ 是自动变量，表示所有依赖文件的列表。$(filter %.o %.a, $^) 是一个函数，用于筛选出扩展名为 .o 和 .a 的文件。</span></span><br><span class="line"><span class="comment">##   这个函数确保只有 .o 对象文件和 .a 库文件被传递给链接器。</span></span><br><span class="line"><span class="comment">## $(LDFLAGS)：这些是链接标志，用于设置链接器选项，例如库路径和库文件。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c main.c</span><br><span class="line"><span class="comment">## main.o 是一个目标文件，它依赖于 main.c 源文件。生成 main.o 的命令是 $(CC) $(CFLAGS) -c main.c。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">foo.o: foo.c</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c foo.c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理规则</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f myprogram main.o foo.o</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>构建过程中，是怎么找到依赖的。 比如 每个源文件是单独构建的，构建的时候，如果依赖其它的 构建，这个关系怎么找到的？<br>也就是说 怎么知道那个需要先构建？</p><h2 id="4-2-cmake"><a href="#4-2-cmake" class="headerlink" title="4.2 cmake"></a>4.2 cmake</h2><p><em><span style="color: red;">CMake是一个 构建系统生成器</span></em>。 主要作用是 生成特定与平台和构建工具的构建配置文件。<br>实际的构建过程则依赖生成的这些构建配置文件所对应的构建工具。</p><h3 id="4-2-1-什么是cmake"><a href="#4-2-1-什么是cmake" class="headerlink" title="4.2.1 什么是cmake"></a>4.2.1 什么是cmake</h3><p>cmake相比较make，有以下优点：</p><ul><li>跨平台支持：支持多种操作系统，如Linux、macOS、Windows等。能够生成适用于不同平台的构建系统配置文件。</li><li>构建配置：通过一个或多个CMakeLists.txt文件来描述项目的配置。</li><li>自动化和简化构建：生成适用于不同构建工具的配置文件， 使得用户可以使用选择喜欢的构建工具(make/MSBuild等)<br>如果系统中有多个C编译器，可以明确指定要使用的编译器</li></ul><h3 id="4-2-2-cmake使用方法"><a href="#4-2-2-cmake使用方法" class="headerlink" title="4.2.2 cmake使用方法"></a>4.2.2 cmake使用方法</h3><p>CMakeLists.txt</p><p><strong>1. 安装cmake</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># macOS</span></span><br><span class="line">brew install cmake</span><br><span class="line"><span class="comment"># linux</span></span><br><span class="line">sudo apt-get install cmake   <span class="comment"># 对于 Debian/Ubuntu 系统</span></span><br><span class="line">sudo yum install cmake       <span class="comment"># 对于 Red Hat/CentOS 系统</span></span><br><span class="line"><span class="comment"># Window</span></span><br><span class="line">choco install cmake</span><br></pre></td></tr></table></figure></p><p><strong>2. 创建CMakeLists.txt</strong><br>CMakeLists.txt 文件是 CMake 的核心配置文件，用于描述构建项目的规则。一个基本的 CMakeLists.txt 文件可能如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.10)  # 设置 CMake 的最低版本要求</span><br><span class="line">project(MyProject VERSION 1.0)        # 定义项目名称和版本</span><br><span class="line"></span><br><span class="line"># 设置 C++ 标准</span><br><span class="line">set(CMAKE_CXX_STANDARD 17)</span><br><span class="line">set(CMAKE_CXX_STANDARD_REQUIRED True)</span><br><span class="line"></span><br><span class="line"># 添加可执行文件</span><br><span class="line">add_executable(MyExecutable main.cpp foo.cpp)</span><br><span class="line"></span><br><span class="line">#cmake_minimum_required：指定所需的 CMake 最低版本。</span><br><span class="line">#project：定义项目的名称和版本。</span><br><span class="line">#set：设置 CMake 变量，这里设置 C++ 标准。</span><br><span class="line">#add_executable：定义要生成的可执行文件及其源文件。</span><br></pre></td></tr></table></figure><p><strong>3. 创建构建目录</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br></pre></td></tr></table></figure></p><p><strong>4. 生成构建系统配置文件</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在构建目录中运行 CMake，指定源代码目录（通常是 .. 表示上级目录）：</span></span><br><span class="line">cmake ..</span><br></pre></td></tr></table></figure></p><p><strong>5. 执行构建</strong><br>使用make等构建工具执行</p><h3 id="4-2-3-高级用法"><a href="#4-2-3-高级用法" class="headerlink" title="4.2.3 高级用法"></a>4.2.3 高级用法</h3><p><strong>1.定义库</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add_library(MyLibrary STATIC lib.cpp)</span><br><span class="line">target_link_libraries(MyExecutable PRIVATE MyLibrary)</span><br></pre></td></tr></table></figure></p><p><strong>2.查找和使用外部库</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find_package(OpenCV REQUIRED)</span><br><span class="line">include_directories($&#123;OpenCV_INCLUDE_DIRS&#125;)</span><br><span class="line">target_link_libraries(MyExecutable $&#123;OpenCV_LIBS&#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 设置编译选项：</span><br><span class="line">target_compile_options(MyExecutable PRIVATE -Wall -Wextra)</span><br><span class="line"># 设置构建选项</span><br><span class="line">option(USE_CUSTOM_FEATURE &quot;Enable custom feature&quot; OFF)</span><br><span class="line">if(USE_CUSTOM_FEATURE)</span><br><span class="line">  add_definitions(-DCUSTOM_FEATURE)</span><br><span class="line">endif()</span><br><span class="line"># 运行测试</span><br><span class="line">enable_testing()</span><br><span class="line">add_test(NAME MyTest COMMAND MyExecutable)</span><br></pre></td></tr></table></figure><h3 id="4-2-1-版本查看"><a href="#4-2-1-版本查看" class="headerlink" title="4.2.1 版本查看"></a>4.2.1 版本查看</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">clang --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看c++版本</span></span><br><span class="line">g++ --version </span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">clang++ --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看cmake</span></span><br><span class="line">cmake --version</span><br></pre></td></tr></table></figure><h1 id="5-常见库及问题"><a href="#5-常见库及问题" class="headerlink" title="5.常见库及问题"></a>5.常见库及问题</h1><h2 id="5-1-xgboost项目构建和调试"><a href="#5-1-xgboost项目构建和调试" class="headerlink" title="5.1 xgboost项目构建和调试"></a>5.1 xgboost项目构建和调试</h2><p>xgboost项目构建和调试过程中遇到的问题？<br><span style="font-size: 12px;color: blue;">主要就是 mac系统自带的Clang编译器不支持OpenMP，需要手动安装Clang(基于llvm)，即 brew install llvm.</span></p><h3 id="1-unsupported-option-‘-fopenmp’"><a href="#1-unsupported-option-‘-fopenmp’" class="headerlink" title="(1.)unsupported option ‘-fopenmp’"></a>(1.)unsupported option ‘-fopenmp’</h3><p><strong>1.命令</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clang++ -DDMLC_LOG_CUSTOMIZE=1 -std=c++11 -Wall -Wno-unknown-pragmas -Iinclude   -Idmlc-core/include -Irabit/include </span><br><span class="line"> -I/include -O3 -funroll-loops -msse2 -fPIC -fopenmp -MM -MT build/learner.o src/learner.cc &gt;build/learner.d</span><br></pre></td></tr></table></figure></p><p><strong>2.现象</strong><br>clang: error: unsupported option ‘-fopenmp’<br>make: <em>*</em> [build/learner.o] Error 1</p><p><strong>3.问题分析</strong><br>OpenMP 是一个用于多处理器编程的应用程序接口(API),专门设计用于在共享内存系统上并行化计算密集型任务。<br>是一种编写并行程序的标准化工具，可以显著简化多线程编程的复杂性。<br><span style="font-size: 12px;color: blue;">OpenMP的执行模式采用fork-join模式</span></p><p>出现以上问题，可能的原因有：</p><ul><li>Clang版本不支持OpenMP</li><li>未安装OpenMP运行时库</li><li><span style="color: blue;">Clang配置问题：你的 Clang 安装可能没有启用 OpenMP 支持</span>。需要确保使用的 Clang 编译器版本正确地配置了 OpenMP。<br>(重点)：1. 开头使用 c++ 进行编译. 2. 改为clang++后还是提示。 因此可能是<span style="color: red;">clang编译器</span>的原因</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#macOS 自带的 Clang 编译器可能不支持 OpenMP，因此你可以通过 Homebrew 安装一个支持 OpenMP 的 Clang 版本</span></span><br><span class="line">brew install llvm</span><br></pre></td></tr></table></figure><p><strong>4.解决办法</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 修改makefile的 变量配置，使其使用clang++</span></span><br><span class="line">CXX = clang++</span><br><span class="line">CC = clang</span><br><span class="line"><span class="comment"># 2. 通过llvm 安装新的clang编译器</span></span><br><span class="line">brew install llvm</span><br><span class="line"><span class="comment"># 3. 配置环境变量</span></span><br><span class="line"><span class="keyword">export</span> PATH=<span class="string">&quot;/usr/local/opt/llvm/bin:$PATH&quot;</span></span><br></pre></td></tr></table></figure><p>mac自带的clang(xcode/commondlinetools) 编译器和基于llvm的编译器存在差异。<br><span style="font-size: 12px;color: blue;">mac已经有llvm ，有必要再 brew install llvm 吗？需要通过llvm安装新的clang，并且方便管理维护</span></p><h1 id="6-C-环境验证"><a href="#6-C-环境验证" class="headerlink" title="6. C++环境验证"></a>6. C++环境验证</h1><h2 id="6-1-当前环境下使用的-c-的标准库路径"><a href="#6-1-当前环境下使用的-c-的标准库路径" class="headerlink" title="6.1 当前环境下使用的 c++的标准库路径?"></a>6.1 当前环境下使用的 c++的标准库路径?</h2><p>怎么看当前环境下使用的 c++的标准库路径呢。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GCC</span></span><br><span class="line">g++ -print-search-dirs</span><br><span class="line">g++ -print-file-name=libstdc++.a</span><br><span class="line">g++ -print-file-name=libstdc++.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clang</span></span><br><span class="line">clang++ -print-search-dirs</span><br><span class="line">clang++ -print-file-name=libc++.dylib</span><br><span class="line">clang++ -print-file-name=libc++.a</span><br></pre></td></tr></table></figure><h2 id="6-2-vscode环境"><a href="#6-2-vscode环境" class="headerlink" title="6.2 vscode环境"></a>6.2 vscode环境</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++的开发环境，目前常用的IDE是vscode。 macOS安装 开发工具(例如xcode、commondlinetools) 之后，其包含了c++的标准库。&lt;br&gt;通过环境变量等方法正确的引入标准库以及三方库 即可实现 基于vscode开发 c++的项目。&lt;/p&gt;
&lt;p&gt;然而，环境搭建的过程中，重要的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;color: blue;&quot;&gt;对于编译器、构建工具、库及其管理 的理解、对C++版本的理解。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: blue;&quot;&gt;如何使用 vscode、clang++、make、cmake 开发和构建 c++的项目；如何debug调试；以及理解这些工具和过程的原理。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: blue;&quot;&gt;可能会遇到哪些常见的问题？ 怎么解决、以及怎么持续深入学习c++的项目。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="平台工具" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"/>
    
      <category term="[2]计算机基础" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="编程语言" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="C++" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"/>
    
      <category term="[重点]开发环境" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/%E9%87%8D%E7%82%B9-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="C++" scheme="https://quano.gitee.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++数据类型</title>
    <link href="https://quano.gitee.io/wk/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%5B2%5D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C++/Cplus%E6%95%99%E7%A8%8B/001.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/"/>
    <id>https://quano.gitee.io/wk/平台工具/[2]计算机基础/编程语言/C++/Cplus教程/001.数据类型介绍/</id>
    <published>2024-09-08T17:13:34.000Z</published>
    <updated>2024-10-07T17:10:21.719Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">double</span>&gt;::max)();  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">double</span>&gt;::min)() &lt;&lt; endl;  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;long double: \t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">double</span>);  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">long</span> <span class="type">double</span>&gt;::max)();  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">long</span> <span class="type">double</span>&gt;::min)() &lt;&lt; endl;  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;float: \t\t&quot;</span> &lt;&lt; <span class="string">&quot;所占字节数：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">float</span>);  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最大值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">float</span>&gt;::max)();  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t最小值：&quot;</span> &lt;&lt; (numeric_limits&lt;<span class="type">float</span>&gt;::min)() &lt;&lt; endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>double:     所占字节数：8    最大值：1.79769e+308    最小值：2.22507e-308<br>long double:     所占字节数：16    最大值：1.18973e+4932    最小值：3.3621e-4932<br>float:         所占字节数：4    最大值：3.40282e+38    最小值：1.17549e-38</p><p>java呢？</p><p>分析几种情况：</p><ol><li><p>真实值 小于 分裂值。 例如 81792.43380 &lt; 81792.4334</p></li><li><p>真实值 等于 分裂值</p></li><li><p>真实值 大于 分裂值</p></li></ol><p>miss的情况 走左子树。 </p><h1 id="舍如方式"><a href="#舍如方式" class="headerlink" title="舍如方式"></a>舍如方式</h1><p>通常采用“向最接近的值舍入”的策略。</p><p>选择距离 double 值最近的 float 值。如果有多个 float 值与 double 值具有相同的距离，则选择其中的偶数（也称为“向偶数舍入”或“银行家舍入”）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="平台工具" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"/>
    
      <category term="[2]计算机基础" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="编程语言" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="C++" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"/>
    
      <category term="Cplus教程" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/Cplus%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="https://quano.gitee.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>2.软件系统建模工具_UML</title>
    <link href="https://quano.gitee.io/wk/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%5B1%5D%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/01.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%BD%93%E7%B3%BB%E4%B8%8E%E6%96%B9%E6%B3%95%E8%AE%BA/002.%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%BB%BA%E6%A8%A1%E5%B7%A5%E5%85%B7_UML/"/>
    <id>https://quano.gitee.io/wk/平台工具/[1]架构设计/01.架构设计体系与方法论/002.软件系统建模工具_UML/</id>
    <published>2024-08-17T14:55:57.000Z</published>
    <updated>2024-08-18T15:14:24.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-UML介绍"><a href="#1-UML介绍" class="headerlink" title="1. UML介绍"></a>1. UML介绍</h1><p>关键词：系统建模、系统分析与设计、统一建模语言、软件建模与系统设计</p><h2 id="1-1-UML概念-What"><a href="#1-1-UML概念-What" class="headerlink" title="1.1 UML概念(What)"></a>1.1 UML概念(What)</h2><p>UML 的全称是 Unified Modeling Language，即统一建模语言。 </p><span id="more"></span><h2 id="1-2-可以做什么-Where-应用场景"><a href="#1-2-可以做什么-Where-应用场景" class="headerlink" title="1.2 可以做什么?(Where-应用场景)"></a>1.2 可以做什么?(Where-应用场景)</h2><ul><li>软件开发项目：项目启动阶段，用例图可用于明确系统的功能需求和用户期望； 类图有助于设计系统的类结构和它们之间的关系，为编程实现提供清晰的蓝图。</li><li>企业信息系统规划：组件图和部署图能描绘系统的组件构成和物理部署情况，辅助企业IT基础设施的规划和优化。</li><li>数据库设计：通过类图和实体关系图(ERD)的结果，可以有效的设计数据库的表结构和关系。</li><li>业务流程建模：活动图可清晰地展示复杂的业务流程，帮助发现流程中的瓶颈和优化点。</li><li>系统集成：序列图和协作图有助于理解不同系统之间的交互方式和消息传递，从而实现高效的系统集成。</li><li>技术选项和架构决策：基于UML图对系统的描述，可以更有针对性地选择合适的技术框架和架构模式。</li></ul><h2 id="1-3-为什么用UML-Why-重点"><a href="#1-3-为什么用UML-Why-重点" class="headerlink" title="1.3 为什么用UML?(Why-重点)"></a>1.3 为什么用UML?(Why-重点)</h2><p>首先 随着软件系统的复杂度越来越高，并且软件开发迭代过程中往往有许多角色参与和使用，怎样从不同角色视角更好理解这个软件系统?<br>其次，对软件系统以及各个模块组件清晰的理解有助于大家建立相同的认识便于软件生命周期过程中沟通和协作和减少理解偏差，<strong><em>有助于软件设计人员更准确设计更好的系统</em></strong>。</p><p>而UML工具包含不同的图表(模型)，提供不同的角度来让各个角色更清晰的认识系统。各角色人员包括系统分析师、设计师、程序员、测试人员、客户、技术文件撰稿人员。</p><p>那UML都有哪些图表呢，以及重要常用的有哪些呢？接下来详细介绍</p><h2 id="1-4-UML图表类型"><a href="#1-4-UML图表类型" class="headerlink" title="1.4 UML图表类型"></a>1.4 UML图表类型</h2><p>大致分为结构性图表和行为性图表</p><h2 id="1-4-1-结构性图表"><a href="#1-4-1-结构性图表" class="headerlink" title="1.4.1 结构性图表"></a>1.4.1 结构性图表</h2><p>七中结构性图表包括：</p><ul><li>类图 (Class Diagram)</li><li>组件图 (Component Diagram)</li><li>部署图 (Deployment Diagram)</li><li>对象图 (Object Diagram)</li><li>包图 (Package Diagram)</li><li>复合结构图 (Composite Structure Diagram)</li><li>轮廓图 (Profile Diagram)</li></ul><h2 id="1-4-2-行为性图表"><a href="#1-4-2-行为性图表" class="headerlink" title="1.4.2 行为性图表"></a>1.4.2 行为性图表</h2><p>行为性图表显示了系统中对象的动态行为 ，可用以表达系统随时间的变化。行为性图表有七种类型：</p><ul><li>用例图 (Use Case Diagram)</li><li>活动图 (Activity Diagram)</li><li>状态机图 (State Machine Diagram)</li><li>序列图 (Sequence Diagram)</li><li>通訊圖 (Communication Diagram)</li><li>交互概述图 (Interaction Overview Diagram)</li><li>时序图 (Timing Diagram)</li></ul><h1 id="2-UML图表"><a href="#2-UML图表" class="headerlink" title="2. UML图表"></a>2. UML图表</h1><p>其中最常用和最重要的2个是类图和时序图。</p><h2 id="2-1-结构性图表"><a href="#2-1-结构性图表" class="headerlink" title="2.1 结构性图表"></a>2.1 结构性图表</h2><h3 id="2-1-1-类图"><a href="#2-1-1-类图" class="headerlink" title="2.1.1 类图"></a>2.1.1 <span style="color: red;">类图</span></h3><p>(Class Diagram)<br>类图是一切<strong><em>面向对象方法</em></strong>的<em>核心建模工具</em>。描述了系统中<strong><em>对象的类型</em></strong>以及它们之间<strong><em>存在的各种静态关系</em></strong>。</p><h4 id="1-关系"><a href="#1-关系" class="headerlink" title="1. 关系"></a>1. 关系</h4><p>类图有三种主要的关系</p><ul><li>关联：代表类型之间的关系（一个人为公司工作，一间公司有多个办事处）</li><li>继承：传为实例关系图(ERD)应用于面向对象设计而设的一种关系。 它在面向对象设计中的继承概念相互呼应。</li><li>聚合：面向对象设计中的一种对象组合的形式。</li></ul><p>各种关系的强弱顺序：泛华=实现&gt;组合&gt;聚合&gt;关联&gt;依赖</p><ul><li>关联(Association)：表示类之间的联系，可以是单向的或双向的，具有名称、角色和多重性等属性。例如：学生和课程之间存在关联，一个学生可以选择多门课程，一门课程可以有多个学生选修。</li><li>聚合(Aggregation)：表示整体与部分的关系，部分可以独立于整体存在。比如，汽车和轮胎，轮胎可以从汽车上拆下来而任然存在。</li><li>组合(Composition)：表示整体与部分的关系，但部分不能独立于整体存在。例如，房子和房间，房间不能脱离房子而单独存在。</li><li>集成/泛华(Generalization)：表示子类与父类的关系，子类继承父类的属性与方法。比如，哺乳动物是动物的子类。</li><li>实现(Realization)：类与接口之间的关系，表示类实现了接口中定义的操作。例如，一个具体的排序类实现了排序接口定义的排序方法。</li></ul><p>参考：<a href="https://blog.csdn.net/qq_43530773/article/details/118250152">CSDN:九种常见的UML图总结</a></p><div>    <img src="https://gitee.com/quano/www/raw/master/img/architecture/uml_class_diagram.png"         style="display: inline-block;margin-left: 18px; width: 75%"/>    <span style="display: block; margin-left: 18%;width: 70%"></span></div><p>在 UML 类图的描述中，一般在较为宽泛地提及类之间的联系时，可以使用“relation”这个统称（draw.io中不同的线段表示）。<br>而使用具体的关系类型，如关联、聚合、组合、继承、实现等，通常基于以下情况：<br>当需要清晰准确地描述类之间联系的特定性质和约束时，应使用具体的关系类型：</p><ul><li>如果强调类之间是一种普通的连接和交互，没有明确的整体部分关系或层次关系，就使用关联。</li><li>当要表明整体和部分之间部分可以独立存在于整体的关系，使用聚合。</li><li>若要突出整体和部分之间部分不能独立于整体存在的强拥有关系，就用组合。</li><li>对于表示类之间的层次分类，子类继承父类的特性，采用继承（泛化）关系。</li><li>当类需要实现某个接口定义的方法和行为时，使用实现关系。</li></ul><p>例如，如果只是简单地说“这些类之间存在某种关系”，可以用“relation”。但如果要详细说明“学生类继承自人员类”“汽车类和发动机类是组合关系”，就会使用具体的关系类型。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-UML介绍&quot;&gt;&lt;a href=&quot;#1-UML介绍&quot; class=&quot;headerlink&quot; title=&quot;1. UML介绍&quot;&gt;&lt;/a&gt;1. UML介绍&lt;/h1&gt;&lt;p&gt;关键词：系统建模、系统分析与设计、统一建模语言、软件建模与系统设计&lt;/p&gt;
&lt;h2 id=&quot;1-1-UML概念-What&quot;&gt;&lt;a href=&quot;#1-1-UML概念-What&quot; class=&quot;headerlink&quot; title=&quot;1.1 UML概念(What)&quot;&gt;&lt;/a&gt;1.1 UML概念(What)&lt;/h2&gt;&lt;p&gt;UML 的全称是 Unified Modeling Language，即统一建模语言。 &lt;/p&gt;
    
    </summary>
    
      <category term="平台工具" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"/>
    
      <category term="[1]架构设计" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="01.架构设计体系与方法论" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/01-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%BD%93%E7%B3%BB%E4%B8%8E%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
    
      <category term="UML" scheme="https://quano.gitee.io/tags/UML/"/>
    
      <category term="系统建模" scheme="https://quano.gitee.io/tags/%E7%B3%BB%E7%BB%9F%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>信息安全与机器学习.md</title>
    <link href="https://quano.gitee.io/wk/%E7%AE%97%E6%B3%95/001.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/004.%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/001.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E5%AE%89%E5%85%A8%E9%A2%86%E5%9F%9F%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://quano.gitee.io/wk/算法/001.机器学习/004.应用场景/001.机器学习在安全领域的应用/</id>
    <published>2024-08-02T14:55:57.000Z</published>
    <updated>2024-08-29T16:39:31.967Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="算法" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="001.机器学习" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="004.应用场景" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/004-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    
    
      <category term="MchineLearning" scheme="https://quano.gitee.io/tags/MchineLearning/"/>
    
  </entry>
  
  <entry>
    <title>202409</title>
    <link href="https://quano.gitee.io/wk/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%5B3%5D%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%5B1%5D%E8%AE%A4%E7%9F%A5%E8%BF%AD%E4%BB%A3/202409/"/>
    <id>https://quano.gitee.io/wk/项目管理/[3]生活学习/[1]认知迭代/202409/</id>
    <published>2024-07-24T01:56:24.000Z</published>
    <updated>2024-09-11T17:06:32.995Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="88f6b63b31373a2a23a83dac9d506254acc093bdb15761d510b872a70a106e02"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，需要密码才能继续阅读。
    
    </summary>
    
      <category term="项目管理" scheme="https://quano.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="[3]生活学习" scheme="https://quano.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="[1]认知迭代" scheme="https://quano.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/1-%E8%AE%A4%E7%9F%A5%E8%BF%AD%E4%BB%A3/"/>
    
    
      <category term="private" scheme="https://quano.gitee.io/tags/private/"/>
    
  </entry>
  
  <entry>
    <title>202409</title>
    <link href="https://quano.gitee.io/wk/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%5B3%5D%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%5B1%5D%E8%AE%A4%E7%9F%A5%E8%BF%AD%E4%BB%A3/202410/"/>
    <id>https://quano.gitee.io/wk/项目管理/[3]生活学习/[1]认知迭代/202410/</id>
    <published>2024-07-24T01:56:24.000Z</published>
    <updated>2024-10-10T15:04:56.499Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="100b8e658342a7eee602ae653e7b58e41874d54585e46c4770eb14fe55606724"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，需要密码才能继续阅读。
    
    </summary>
    
      <category term="项目管理" scheme="https://quano.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="[3]生活学习" scheme="https://quano.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="[1]认知迭代" scheme="https://quano.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/1-%E8%AE%A4%E7%9F%A5%E8%BF%AD%E4%BB%A3/"/>
    
    
      <category term="private" scheme="https://quano.gitee.io/tags/private/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络总结</title>
    <link href="https://quano.gitee.io/wk/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%5B2%5D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/001.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%80%BB%E7%BB%93/"/>
    <id>https://quano.gitee.io/wk/平台工具/[2]计算机基础/计算机网络/001.计算机网络总结/</id>
    <published>2024-07-20T15:11:57.000Z</published>
    <updated>2024-08-07T04:29:02.841Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要总结计算机网络核心的知识点，包括网络概述、网络性能指标、网络体系结构以及其中的分层细节。</p><h1 id="一、计算机网络概述"><a href="#一、计算机网络概述" class="headerlink" title="一、计算机网络概述"></a>一、计算机网络概述</h1><p>主要内容包括：</p><ul><li>互联网边缘部分、核心部分的作用。包括分组交换的概念</li><li>计算机网络的性能指标</li><li>计算机网络分层次的体系结构，包含协议和服务的概念。(比较抽象，需要理解概念)</li></ul><p>计算机网络通信的一个显著特点是：间歇性、突发性。</p><h2 id="1-1-互联网边缘、核心"><a href="#1-1-互联网边缘、核心" class="headerlink" title="1.1 互联网边缘、核心"></a>1.1 互联网边缘、核心</h2><h3 id="1-1-0-什么是因特网"><a href="#1-1-0-什么是因特网" class="headerlink" title="1.1.0 什么是因特网"></a>1.1.0 什么是因特网</h3><ul><li>协议：一系列规则和约定的集合。这些规则和约定用于管理<strong><em>两个或多个实体之间</em></strong>的通信、数据交换和交互操作。</li></ul><h3 id="1-1-1-网络边缘"><a href="#1-1-1-网络边缘" class="headerlink" title="1.1.1 网络边缘"></a>1.1.1 网络边缘</h3><h3 id="1-1-2-网络核心"><a href="#1-1-2-网络核心" class="headerlink" title="1.1.2 网络核心"></a>1.1.2 网络核心</h3><p><span style="color: red;"><strong><em>电路交换、分组交换(数据报、虚电路)</em></strong></span></p><p>构建网络核心有两种基本方式：电路交换、分组交换。</p><ul><li>电话交换：在通信双方进行通信之前，网络会在发送方和接收方之间简历一条专用的物理电路路径，该路径在整个通信过程中保持，直到通信结束才释放。（优点：通信质量稳定，实时性强；缺点：资源利用率低、灵活性差）</li><li>分组交换：将需要传输的数据分割成一个个较小的数据包，称为分组。每个分组都包含一个源地址、目标地址和一些控制信息，然后这些分组独立地在网络中传输，并通过网络中的节点(如路由器)根据分组的目的地址和网络的当前状态，选择合适的路径进行转发。</li></ul><p><span style="font-size: 12px;"><strong><em>一个简单的类比如：考虑两家餐厅，一个需要预定，而另一家不需要预定但不保证能安排</em></strong>。 对于需要预定的餐厅，我们离开家之前要承受必须先打电话预定的麻烦，但到达餐厅时，原则上能够立即点菜。 不需要预定的餐厅，没有预定餐桌的麻烦，但也许不得都不先等到有空闲餐桌才能找服务员点菜</span></p><p>计算机网络书中主要和因特网、分组交换有关。然而，理解因特网和其他计算机网络为什么使用分组交换，而非更为传统的用于电话网的电路交换，这一点很重要。</p><h4 id="1-电路交换"><a href="#1-电路交换" class="headerlink" title="1.电路交换"></a>1.电路交换</h4><p>频分复用(FDM)、时分复用(TDM)</p><h4 id="2-分组交换"><a href="#2-分组交换" class="headerlink" title="2.分组交换"></a>2.分组交换</h4><p>现代计算机网络中，源主机将长报文划分为较小的数据块，并称之为分组。 这些分组的每一个都通过通信链路和分组交换机(路由器或者链路层交换机)传送。</p><p>分组交换机(路由器、链路交换机)： 多数分组交换机在链路的输入端使用<strong><em>存储转发传输机制</em></strong>。 是指：在交换机能够开始向输出链路传输该分组的第一个比特之前，必须接受到整个分组。</p><p>存储转发时延：由于存储转发机制，分组交换机沿着该分组的路径在每条链路的输入端引入了存储转发时延。时延和分组的长度成正比。</p><p>排队时延：如果到达的分组需要跨越链路传输，但发现该链路正忙于传输其它分组，该到达分组必须在该输出缓存中等待。</p><p>分组丢失：如果一个到达的分组发现该缓存被等待传输的分组占满了，在这种情况下将出现分组丢失。（分组丢失怎么解决：超时重传、分组编号、ACK机制、流量控制、拥塞控制等待）</p><h4 id="3-数据报-虚电路网络"><a href="#3-数据报-虚电路网络" class="headerlink" title="3. 数据报/虚电路网络"></a>3. 数据报/虚电路网络</h4><p>分组交换网络有两大类：数据报网络和虚电路网络。它们的差异在于：其交换机是使用<strong><em>目的地址</em></strong>还是使用所谓的<strong><em>虚电路号</em></strong>朝其目的地转发分组。</p><p>因特网中路由器根据主机目的地址转发分组，因此因特网是一个数据报网络。</p><ul><li><strong><em>数据报网络</em></strong></li></ul><ul><li><strong><em>虚电路网络</em></strong></li></ul><h4 id="4-分组交换与电路交换对比"><a href="#4-分组交换与电路交换对比" class="headerlink" title="4. 分组交换与电路交换对比"></a>4. 分组交换与电路交换对比</h4><div class="table-container"><table><thead><tr><th></th><th>电路交换</th><th>分组交换</th></tr></thead><tbody><tr><td>时延</td><td>时延低</td><td>端到端时延:变动不可预测</td></tr><tr><td>成本</td><td>较高</td><td>低</td></tr><tr><td>效率</td><td>利用率低</td><td>简单有效</td></tr></tbody></table></div><h2 id="1-2-网络的性能指标"><a href="#1-2-网络的性能指标" class="headerlink" title="1.2 网络的性能指标"></a>1.2 网络的性能指标</h2><p>常用的7个性能指标：速率、带宽、吞吐量、时延(发送时延、传播时延、处理时延、排队时延)、时延带宽积、往返时间RTT、利用率</p><p>非性能指标：费用、质量、标准化、可靠性、可扩展性和可升级性、易于管理和维护</p><h2 id="1-3-计算机网络体系结构"><a href="#1-3-计算机网络体系结构" class="headerlink" title="1.3 计算机网络体系结构"></a>1.3 计算机网络体系结构</h2><div>    <img src="https://gitee.com/quano/www/raw/master/img/network_layer.png"         style="display: inline-block;margin-left: 18px; width: 55%"/>    <span style="display: block; margin-left: 18%;width: 50%"></span></div><p>主要重点学习五层协议。</p><h1 id="二、物理层"><a href="#二、物理层" class="headerlink" title="二、物理层"></a>二、物理层</h1><p>信道、单工、半双工、全双工</p><p>物理层设备：</p><p>传输介质：双绞线、光纤、电缆<br>数据通信基础：<br>信道复用技术：</p><h1 id="三、数据链路层"><a href="#三、数据链路层" class="headerlink" title="三、数据链路层"></a>三、数据链路层</h1><p>(数据单元：帧(Frame))<br>网络分类： LAN(局域网)、MAN(城域网)、WAN(广域网)。它们的划分主要基于覆盖范围、传输速度、网络拓扑结构、管理和控制方式等因素。比如：</p><ul><li>覆盖范围：局域网一般在几千米以内，通常是一个办公室、一栋建筑物、一个校内的网络。城域网一般覆盖一个城市，通常5-50千米。</li><li>传输速度：局域网内一般10Mbps到10Gbps之间；城域网一般1Mbps-100Mbps之间，广域网一般几kbps-几Mbps之间。</li><li>网络拓扑结构：局域网(星形、总线型、环形、树形)；城域网(环形、双总线型等)；广域网(通常不规则的网络拓扑)</li><li>应用场景：局域网一般用于企业内部办公、学校教学、家庭网络；城域网一般公共服务设施、企业之间通信；广域网实现跨地区、跨国家的通信和数据传输，如互联网。</li></ul><p>这几种网络技术细节后续展开。比如WAN技术包括专线(VPN)等.</p><p>差错控制、流量控制、介质访问控制协议。</p><h1 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h1><p>(重点)</p><h2 id="4-0-网络层协议"><a href="#4-0-网络层协议" class="headerlink" title="4.0 网络层协议"></a>4.0 网络层协议</h2><p>IP、ICMP、ARP、RARP、OSPF…</p><h2 id="4-1-IP协议"><a href="#4-1-IP协议" class="headerlink" title="4.1 IP协议"></a>4.1 IP协议</h2><p>网际协议：因特网中的转发和编址</p><p>因特网的网络层有三个主要的组件：IP协议、选路组件、网际控制报文协议(ICMP).</p><h3 id="4-1-1-IPV4数据报格式"><a href="#4-1-1-IPV4数据报格式" class="headerlink" title="4.1.1 IPV4数据报格式"></a>4.1.1 IPV4数据报格式</h3><p>由首部(包含选项)、数据 组成</p><p>IP数据包分片</p><ul><li>MTU(最大传输单元)：一个链路层数据报能承载的最大数据量叫做最大传输单元。</li></ul><h3 id="4-1-2-IPv4编址-重点"><a href="#4-1-2-IPv4编址-重点" class="headerlink" title="4.1.2 IPv4编址(重点)"></a>4.1.2 IPv4编址(重点)</h3><p>全球因特网中的每台主机和路由器上的每个接口必须有一个全球唯一的IP地址。<br><span style="font-size: 12px; color: blue;">这些地址不能以随意的方式自由选择，一个接口的IP地址的组成部分需要<strong><em>由其连接的子网来决定</em></strong></span></p><p>核心概念：子网、子网掩码、无类别域际路由选择、分类编址(A/B/C类)</p><ul><li>子网：子网是将较大的网络通过划分逻辑地分成较小的网络。其主要目的是为了更好的管理网络、提高网路性能、增强网络安全性和减少网络广播流量。</li><li>子网掩码：是确定IP地址中网络地址和主机地址的分隔表示。</li><li>CIDR(无类别域际路由选择)：因特网的地址分配策略。传统的IP地址分类(A/B/C类)存在地址分配不灵活和浪费的问题。CIDR摒弃了这种固定的分类方式，采用可变长子网掩码(VLSM),通过指定网络前缀的长度来标识网络。</li></ul><p>模拟信号和数字信号 是通信和电子领域中两种不同的信号类型。</p><ul><li>模拟信号 ：是一种连续的信号，其信号的幅度、频率或相位等参数随着时间连续变化。例如：传统的音频磁带记录的声音信号、有限电视的电视信号。</li><li>数字信号：是一种离散的数值表示。这些数值通常是二进制的，代表不同的状态或信息。计算机处理和存储的数据、通过数字通信线路传输的数据等都是数字信号。</li></ul><p>调制解调器(Modem)是一种在通信领域中用于在模拟信号和数字信号之间进行转换的设备。</p><h4 id="1-获取一块地址"><a href="#1-获取一块地址" class="headerlink" title="1. 获取一块地址"></a>1. 获取一块地址</h4><p><strong><em>为了获取一块IP地址用于一个组织的子网， 一个网络管理员也许首先会与其ISP联系；ISP会从已分给它的更大地址块中提供一些地址。</em></strong><br>例如：某ISP自己被分配了地址块 200.23.16.0/20。 该ISP可以依次将该地址块分成8个长度相等的较小地址块，为该ISP支持的最多达8个组织中的一个分配一小块， 如：200.23.16.0/23；200.23.18.0/23；….<br><span style="font-size: 12px; color: blue;">外界其它部分不需要知道在地址块200.23.16.0/20内实际上还存在8个其他组织，每个组织有自己的子网</span></p><p><span style="font-size: 12px; color: blue;">一块地址的分配取决于组织的具体需求和应用场景。网络规模较大、对网络的功能/性能有较高的要求，或者有特殊的网络应用需求</span></p><h4 id="2-获取主机地址"><a href="#2-获取主机地址" class="headerlink" title="2. 获取主机地址"></a>2. 获取主机地址</h4><p>一个组织一旦获得了一块地址，它就可以为该组织内的主机与路由器接口分配独立的IP地址。对于路由器接口地址，系统管理员手工配置路由器中的IP地址。 两种方式为一台主机分配一个IP地址： 手工配置、动态主机配置协议(DHCP).</p><p>除了为主机和路由器接口配置独立的IP，主要的工作还包括：规划IP地址分配方案、配置路由功能、配置访问控制列表等。</p><p><span style="font-size: 12px; color: blue;">那第1条获取一块地址我理解是从ISP获取一块公网IP， 在一个组织中，IP地址的分配、路由的配置等 实际配置的是什么？是和公网IP有什么关系呢？是怎么通过公网IP访问互联网的呢？</span></p><h4 id="3-NAT-网络地址转换"><a href="#3-NAT-网络地址转换" class="headerlink" title="3. NAT(网络地址转换)"></a>3. NAT(网络地址转换)</h4><p>背景：如果一个局域网变大了，则需要分配一块较大的地址，这时应该怎么办呢？<br>NAT：应用更广泛、更简单的地址分配方法(网络地址转换)<br>NAT中的地址用于 专用网络或具有专用地址的地域。指其地址仅对该网络中的设备有意义。<br>数以万计的家庭网络的事实，许多网络使用相同的地址空间。<br><span style="font-size: 12px; color: blue;">NAT使能路由器对于外界来说甚至不像一台路由器。对外界的行为就如同一个具有单一IP地址的单一设备。 </span><br><em>所有离开家庭路由器通向较大因特网的报文都拥有同一个源的IP地址，例如：138.76.29.7 ,且所有进入家庭路由器的报文都拥有同一个目的IP地址。</em></p><p>路由器通过从ISP的DHCP服务器得到它的地址，它再运行一个DHCP服务器(NAT-DHCP)，为家庭网络的地址空间中的计算机提供地址。<br>来自广域网到达<strong><em>NAT路由器</em></strong>的所有数据都有相同的目的IP地址，那该路由器是怎么知道它应将一个给定数据报转发给哪个内部主机呢？ <strong><em>NAT转换表</em></strong>。<br>家庭路由器一般都是NAT路由器.</p><p>虽然NAT在近几年得到广泛应用，但它也存在一些问题比如违反了所谓端到端主张、妨碍P2P应用程序等。</p><h4 id="4-IPv6"><a href="#4-IPv6" class="headerlink" title="4. IPv6"></a>4. IPv6</h4><h4 id="5-其它"><a href="#5-其它" class="headerlink" title="5. 其它"></a>5. 其它</h4><ul><li><p>怎么确认一个ip是哪类地址？<br>根据第一个字节(网络号部分)判断：A类地址范围(1-126);B类地址范围(128-191);C类地址范围(192-223);D类地址范围(224-239);E类范围(240-255)</p></li><li><p>私有地址(IETF定义，对私有IP地址的范围明确定义：满足企业、家庭等内部网络的需求，同时避免与公共网络的IP地址产生冲突)<br>A 类私有地址：10.0.0.0 到 10.255.255.255<br>B 类私有地址：172.16.0.0 到 172.31.255.255<br>C 类私有地址：192.168.0.0 到 192.168.255.255<br>这些私有地址通常用于家庭、企业等内部网络，在互联网上不可路由。 </p></li><li><p><strong><em>子网掩码：网段划分？子网掩码和IP，如何区分是否同一个网段？</em></strong>(重点)<br>当子网掩码为 255.255.0.0 时，这表示前两个字节是网络号，后两个字节是主机号。<br>假设网络地址为 192.168.0.0 ，那么同一网段中可能的 IP 地址范围是 192.168.0.1 到 192.168.255.254 。<br>需要注意的是，网络地址（192.168.0.0）和广播地址（192.168.255.255）通常不分配给具体的主机使用。<br>例如，如果网络地址是 10.10.0.0 ，那么同一网段中可用的 IP 地址就是 10.10.0.1 到 10.10.255.254 。<br>举例2：与10.110.12.29 mask 255.255.255.224 属于同一网段的主机IP地址是？<br>子网掩码 255.255.255.224 对应的子网块大小为 256 - 224 = 32 。<br>所以子网的地址范围如下：10.110.12.0 - 10.110.12.31<br>其中网络地址为 10.110.12.0 ，广播地址为 10.110.12.31 。<br>因此，与 10.110.12.29 掩码 255.255.255.224 属于同一网段的主机 IP 地址有：10.110.12.1 到 10.110.12.28 ，10.110.12.30  </p></li><li><p>组播地址<br>指在IP网络中实现一对多通信的一种特殊地址类型；<br>组播地址的范围在IPv4中是224.0.0.0 - 239.255.255.255<br>例如：视频会议、在线直播、网络教学等应用中，可以使用组播技术。</p></li></ul><h3 id="4-1-3-选路算法"><a href="#4-1-3-选路算法" class="headerlink" title="4.1.3 选路算法"></a>4.1.3 选路算法</h3><p>以上介绍了网络层的转发功能。</p><h1 id="五、其它"><a href="#五、其它" class="headerlink" title="五、其它"></a>五、其它</h1><h2 id="5-1-二进制数字调制"><a href="#5-1-二进制数字调制" class="headerlink" title="5.1 二进制数字调制"></a>5.1 二进制数字调制</h2><p>FSK、DPSK</p><p>VLAN</p><p>学习过程： 按7层从下到上依次学习。 再看TCP/IP体系结构，五层模型。</p><h1 id="参考书"><a href="#参考书" class="headerlink" title="参考书"></a>参考书</h1><p>计算机网络 - 第7版 谢希…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇主要总结计算机网络核心的知识点，包括网络概述、网络性能指标、网络体系结构以及其中的分层细节。&lt;/p&gt;
&lt;h1 id=&quot;一、计算机网络概述&quot;&gt;&lt;a href=&quot;#一、计算机网络概述&quot; class=&quot;headerlink&quot; title=&quot;一、计算机网络概述&quot;&gt;&lt;/a&gt;一、计
      
    
    </summary>
    
      <category term="平台工具" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"/>
    
      <category term="[2]计算机基础" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="计算机网络" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>GPU架构与CUDA编程模型</title>
    <link href="https://quano.gitee.io/wk/%E7%AE%97%E6%B3%95/006.%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/Infra/001.GPU%E6%9E%B6%E6%9E%84%E4%B8%8ECUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>https://quano.gitee.io/wk/算法/006.算法工程/Infra/001.GPU架构与CUDA编程模型/</id>
    <published>2024-07-03T15:55:57.000Z</published>
    <updated>2024-07-19T13:45:23.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>高性能推理引擎、AI算法工程 对GPU CUDA性能优化的诉求目前是AI行业各个公司在算法工程上需要解决的问题。 以实现高效的并行计算，充分利用GPU计算资源，实现AI算法高性能推理.</p><p>AI行业可以分为两块：<strong><em>基础设施(infra)和算法模型</em></strong>. 一方面是建设和优化支持AI应用的基础设施，让GPU更好的使用起来。另一方面是研究和应用在这些基础设施上运行的先进算法。</p><p>其中infra包括：硬件基础设施（比如GPU架构、云计算平台）、软件工具（比如深度学习框架、数据处理工具）、以及相关的网络基础设施（比如高速网络连接）。<em>GPU架构和CUDA编程模型可以被视为在这一基础设施层面的重要组成部分</em>。<br>而算法方面包括：机器学习算法（如监督学习、无监督学习、强化学习）、深度学习模型（如神经网络结构和训练方法）、以及在特定领域中的应用优化算法等。这些算法和模型构成了AI技术的核心，决定了AI系统在解决问题时的效果和性能。</p><span id="more"></span><p>本文介绍了CUDA编程模型(属于底层计算资源/硬件原理与加速)。 也包含了cuda环境搭建实践(理解cuda编程模型和GPU架构)，后续对实践部分单独拆出来。</p><h2 id="0-1-相关概念"><a href="#0-1-相关概念" class="headerlink" title="0.1 相关概念"></a>0.1 相关概念</h2><p>并行计算 CUDA核心加速库 </p><p>GPU池化、 GPU虚拟化 - 对GPU资源的分配和管控</p><p>算力平台：资源规划</p><p>国产智算芯片生态架构</p><h1 id="1-GPU架构"><a href="#1-GPU架构" class="headerlink" title="1.GPU架构"></a>1.GPU架构</h1><h1 id="2-CUDA编程模型"><a href="#2-CUDA编程模型" class="headerlink" title="2.CUDA编程模型"></a>2.CUDA编程模型</h1><h2 id="2-1-CUDA介绍"><a href="#2-1-CUDA介绍" class="headerlink" title="2.1 CUDA介绍"></a>2.1 CUDA介绍</h2><p>CUDA 是一种并行计算平台和编程模型，利用GPU的并行性能加速计算密集型任务。</p><p>熟悉并行计算的概念，如线程、块、网格等。</p><h2 id="2-2-CUDA编程模型"><a href="#2-2-CUDA编程模型" class="headerlink" title="2.2 CUDA编程模型"></a>2.2 CUDA编程模型</h2><ul><li>CUDA 编程模型涉及编写主机（CPU）和设备（GPU）端代码。</li><li>理解如何在CUDA中编写核函数（kernel functions）来在GPU上执行并行计算任务。</li></ul><h2 id="2-3-CUDA的核心概念-重点"><a href="#2-3-CUDA的核心概念-重点" class="headerlink" title="2.3 CUDA的核心概念(重点)"></a>2.3 CUDA的核心概念(重点)</h2><p>理解CUDA线程层次结构和内存管理。<br>学习如何使用CUDA工具集编译和调试CUDA程序。</p><h2 id="2-4-开发和优化CUDA程序"><a href="#2-4-开发和优化CUDA程序" class="headerlink" title="2.4 开发和优化CUDA程序"></a>2.4 开发和优化CUDA程序</h2><p>实际开发并优化具有挑战性的任务，如矩阵乘法、向量加法等。<br>学习如何优化内存访问和并行计算以提高性能。</p><h2 id="2-5-CUDA环境架构"><a href="#2-5-CUDA环境架构" class="headerlink" title="2.5 CUDA环境架构"></a>2.5 <span style="color: red;">CUDA环境架构</span></h2><p>CUDA是由NVIDIA推出的并行计算平台和编程模型，主要用于利用GPU进行通用目的的并行计算</p><p>是不是应该有个图?</p><h3 id="1-GPU硬件"><a href="#1-GPU硬件" class="headerlink" title="1. GPU硬件"></a>1. GPU硬件</h3><p>CUDA环境的核心是支持CUDA的NVIDIA GPU。这些GPU具有大量的并行处理单元（CUDA核心），专门设计用于高性能并行计算。CUDA能够利用这些核心并行处理大规模数据和复杂计算任务。</p><h3 id="2-CUDA-Driver"><a href="#2-CUDA-Driver" class="headerlink" title="2. CUDA Driver"></a>2. CUDA Driver</h3><p>CUDA Driver是与NVIDIA GPU硬件交互的底层驱动程序。它负责管理GPU设备、分配计算资源并与操作系统进行交互。CUDA Driver与操作系统紧密结合，确保CUDA程序能够正确地访问和控制GPU资源。</p><h3 id="3-CUDA-Runtime-API"><a href="#3-CUDA-Runtime-API" class="headerlink" title="3. CUDA Runtime API"></a>3. CUDA Runtime API</h3><p>CUDA Runtime API是一组库函数和接口，为开发人员提供了在CUDA环境中编写和执行GPU计算任务的方法。这些API包括设备管理、内存管理、执行控制和数据传输等功能。开发人员可以使用CUDA Runtime API来编写高效的GPU并行计算程序。</p><h3 id="4-CUDA-Toolkit"><a href="#4-CUDA-Toolkit" class="headerlink" title="4. CUDA Toolkit"></a>4. CUDA Toolkit</h3><p>CUDA Toolkit是一个完整的开发工具包，包括CUDA编译器、调试器、性能分析工具和开发文档等。它提供了开发、编译和优化CUDA程序所需的所有工具和资源。CUDA Toolkit还包括针对不同NVIDIA GPU架构的优化库和示例代码，帮助开发人员实现最佳的性能和兼容性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CUDA Toolkit不仅包含了CUDA Runtime API，还提供了更多的工具和资源，帮助开发者进行CUDA程序的开发、编译、优化和调试。</span><br><span class="line">CUDA Toolkit中的CUDA Runtime API是其中一个重要的组成部分，但并不是整个Toolkit的全部内容。</span><br><span class="line"></span><br><span class="line">- 关系</span><br><span class="line">依赖关系：CUDA Toolkit依赖于CUDA Runtime API。也就是说，在使用CUDA Toolkit进行CUDA程序的开发时，</span><br><span class="line">开发者需要调用CUDA Runtime API中提供的函数来实现与CUDA设备的交互和控制。</span><br><span class="line">功能关系：CUDA Toolkit提供了比CUDA Runtime </span><br><span class="line">API更广泛的功能，包括编译器、调试器和性能分析工具等，这些工具帮助开发者更高效地开发和优化CUDA应用程序。</span><br><span class="line">使用方式：开发者通常会安装CUDA Toolkit来获取CUDA编译器、文档、示例代码等资源，并通过Toolkit中提供的工具</span><br><span class="line">和CUDA Runtime API来编写、编译和调试CUDA程序。</span><br></pre></td></tr></table></figure><h4 id="4-1-CUDA-Toolkit的版本选择"><a href="#4-1-CUDA-Toolkit的版本选择" class="headerlink" title="4.1 CUDA Toolkit的版本选择"></a>4.1 CUDA Toolkit的版本选择</h4><p>不同的深度学习框架的版本依赖的cuda(toolkit)版本也是不同的，存在兼容性问题。 所以不同的项目对CUDA toolkit的版本选择也需要慎重。<br>目前大体上 cuda11.x是稳定在用的版本，因此先选择11.x版本来学习深度学习项目。</p><ul><li>也可以在linux(我用的WSL)对cuda多版本管理.  </li><li>选择方式：综合考虑cuda和深度学习框架稳定、兼容的版本，如：</li></ul><div class="table-container"><table><thead><tr><th>版本</th><th>Pytorch官方文档</th><th>Pytorch版本选择</th><th>tensorflow官方文档</th><th>tensorflow版本选择建议</th></tr></thead><tbody><tr><td>11.x</td><td><a href="https://pytorch.org/get-started/locally/">pytorch与cuda版本</a></td><td>Pytorch2.3.1；cuda:11.8</td><td><a href="https://tensorflow.google.cn/install/source">Tensorflow与cuda版本</a></td><td>tensorflow-2.12.0；py 3.8-3.11；GCC 9.3.1；Bazel 5.3.0；cuDNN8.6；CUDA11.8</td></tr><tr><td>12.x</td><td>-</td><td>-</td><td>-</td><td>tensorflow-2.15.0；py 3.9-3.11    ；Clang 16.0.0；Bazel 6.1.0；cuDNN8.9；12.2</td></tr></tbody></table></div><p>总之，选择相互兼容的版本，安装合适版本的cuda toolkit。 选择的示例见以下：Window WSL中的CUDA</p><p>tensorflow安装:<a href="https://tensorflow.google.cn/install/pip#windows-wsl2_1">官方文档:Install TensorFlow with pip</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果是使用tensorflow，通过以下方式安装</span></span><br><span class="line">python3 -m pip install tensorflow[and-cuda]</span><br><span class="line"><span class="comment"># 实际的版本是 tensorflow-2.13.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl</span></span><br></pre></td></tr></table></figure></p><h3 id="5-CUDA-编程模型"><a href="#5-CUDA-编程模型" class="headerlink" title="5. CUDA 编程模型"></a>5. CUDA 编程模型</h3><p>CUDA 编程模型基于主机（CPU）与设备（GPU）之间的协同工作。开发者可以通过定义核函数（也称为CUDA核函数或者GPU核函数）来在GPU上并行执行操作，从而充分利用GPU的并行计算能力。核函数由开发者编写，并通过CUDA编译器转换为能够在GPU上执行的代码。</p><p>总结来说，CUDA环境架构包括GPU硬件、CUDA Driver、CUDA Runtime API、CUDA Toolkit和CUDA编程模型，为开发者提供了丰富的工具和资源，支持高效的并行计算和GPU加速应用程序的开发与优化。</p><h3 id="6-疑问"><a href="#6-疑问" class="headerlink" title="6. 疑问"></a>6. 疑问</h3><h4 id="6-1-nvcc-amp-nvidia-smi"><a href="#6-1-nvcc-amp-nvidia-smi" class="headerlink" title="6.1 nvcc &amp; nvidia-smi"></a>6.1 nvcc &amp; nvidia-smi</h4><p>CUDA有 runtime api 和 driver api</p><ul><li>runtime api </li><li>driver api</li></ul><p><span style="color: blue;">问题：nvcc -V 和 nvidia-smi 显示出来的CUDA版本不一致， 有没有问题？</span></p><p><strong><em>1.下面先分析一下版本不一致的原因：</em></strong></p><p>从编译器、设备监控管理角度看：</p><ul><li>nvcc属于<strong>CUDA</strong>的编译器，将程序编译成可执行的二进制文件.</li><li>nvidia-smi(NVIDIA System Management Interface) 是帮助<strong><em>管理和监控NVIDIA GPU设备</em></strong>的命令行工具.</li></ul><p>从api角度，CUDA有 runtime api和driver api（并且两者都有对应的版本    ）：</p><ul><li>nvcc -V显示的就是前者的版本</li><li>nvidia-smi显示的是后者对应的CUDA版本s</li></ul><p><strong><em>2.这两个api的必要文件(安装)都是哪些呢？</em></strong></p><ul><li>driver api的必要文件由 GPU driver install 安装， nvidia-smi就属于这一类API</li><li>而用于支持 runtime api的必要文件是由 <strong><em><span style="color: red;">GUDA Toolkit installer</span></em></strong> 安装的</li></ul><p><span style="color: blue;"><strong><em>nvcc</em></strong>是 CUDA Toolkit一起安装的<em>CUDA compiler-driver tool</em> 它只知道它自身构建时的CUDA runtime版本，并不知道安装了什么版本的GPU driver， 甚至不知道是否安装了    GPU driver</span></p><p><span style="font-size: 12px;">tips: GUDA Toolkit installer通常会集成了GPU dirver installer，如果你的CUDA均通过CUDA Toolkit installer来安装，那么runtime api和driver api的版本应该是一致的。 否则可能是使用了单独的 GPU driver installer，这样就导致nvidia-smi和nvcc -V显示的版本不一致了 </span></p><p>通常driver api的版本是向下兼容runtime api的版本，即nvida-smi显示的版本大于nvcc -V的版本通常不会有大问题.</p><h4 id="6-2-pytorch中使用gpu失败"><a href="#6-2-pytorch中使用gpu失败" class="headerlink" title="6.2 pytorch中使用gpu失败"></a>6.2 pytorch中使用gpu失败</h4><p>The NVIDIA driver on your system is too old<br>问题：当在wsl中通过 pytorch 使用gpu时。 出现以下错误：<br>CUDA initialization: The NVIDIA driver on your system is too old (found version 10010).</p><p>原因分析：驱动的兼容性。  找到pytorch 兼容版本的 cuda即可。 并且安装pytorch依赖的nvidia依赖(python库). 具体详见以下： Window WSL中的CUDA</p><p>tips：WSL中的CUDA程序实际上是通过Windows上的NVIDIA驱动来访问GPU资源的</p><h2 id="2-6-Window-WSL中的CUDA"><a href="#2-6-Window-WSL中的CUDA" class="headerlink" title="2.6 Window WSL中的CUDA"></a>2.6 Window WSL中的CUDA</h2><h3 id="1-官方资料"><a href="#1-官方资料" class="headerlink" title="1. 官方资料"></a>1. 官方资料</h3><p>(1).<a href="https://developer.nvidia.com/cuda/wsl">CUDA on Windows Subsystem for Linux (WSL)</a></p><ul><li>Windows 11 上的wsl不再是预览版，而是正式发布的WSL2。</li></ul><p>(2).<strong><a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html">CUDA on WSL User Guide</a></strong>,内容包括:</p><ul><li>在WSL 2上使用NVIDIA CUDA软件架构(软件堆栈)</li><li>Getting Started with CUDA on WSL 2 （讲述了在wsl2中使用cuda的一系列步骤：驱动版本和安装、WSL2安装、CUDA Toolkit等）<br>(以上官方文档仔细阅读)<br><span style="font-size: 12px;color: blue;"><em>tips:从官方文档看到，驱动程序仅安装 NVIDIA GeForce Game Ready或NVIDIA RTX Quadro Windows 11显示驱动程序。<br>(其中GeForce和RTX Quadro是两种不同显卡产品，GeForce面向消费者 适用游戏娱乐， Quadro适用于用于专业工作站和专业应用程序)</em></span></li></ul><h3 id="2-CUDA-on-WSL-User-Guide"><a href="#2-CUDA-on-WSL-User-Guide" class="headerlink" title="2. CUDA on WSL User Guide"></a>2. CUDA on WSL User Guide</h3><p>如上文中官网的资料说明了CUDA on WSL User Guide，这里总结下实践流程(哪些改装，哪些不用装)：</p><ol><li>下载驱动程序。只下载和安装win环境驱动即可，选择符合要求的版本。注意如果是Quadro需要升级win11.<br> <span style="font-size: 12px;color: #e96900;">tips: 安装了<a href="https://www.nvidia.com/Download/driverResults.aspx/228212/en-us/">556.12版本/下载链接</a>。在window环境中下载安装。</span></li><li>安装WSL2. (之前已经安装使用过，忽略。 建议升级win11)<br> <span style="font-size: 12px;color: #e96900;">安装条件： win10登录windows账户并升级windows至预览版本, 大概1-2小时。win11应该可以直接使用了.</span></li><li>CUDA Support for WSL 2(仅安装Linux CUDA Toolkit。<strong><em>在wsl中不用再安装Driver</em></strong>)<br> <span style="font-size: 12px;color: #e96900;">安装toolkit那个版本？ 见： <a href="#4-1-CUDA-Toolkit的版本选择">wiki:CUDA Toolkit的版本选择与下载（wsl的在linux下）</a></span></li><li>安装CUDA toolkit 11.8版本(对pytorch、tensorflow兼容性好，python使用3.8及以后版本).<br> <span style="font-size: 12px;color: #e96900;"><a href="https://developer.nvidia.com/cuda-toolkit-archive">官网:CUDA toolkit 版本选择</a></span>.在wsl环境中下载安装.<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载和cuda toolkit 11.8（好几个G，有点大）</span></span><br><span class="line">wget .....</span><br><span class="line">sudo sh cuda_11.8.0_520.61.05_linux.run</span><br><span class="line"><span class="comment"># 查看 cuda toolkit安装情况（查看路径下都有哪些版本的cuda）。</span></span><br><span class="line"><span class="built_in">ls</span> -la /usr/local/</span><br><span class="line"><span class="comment"># pytorch支持(创建python3.8环境后，安装PyTorch相关的库)</span></span><br><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118</span><br></pre></td></tr></table></figure></li><li>验证<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证pytorch环境，python进入命令行模式后</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.cuda.is_available()</span><br><span class="line"><span class="comment"># 输出 True 则一切正常.</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证 gpu tensorflow</span></span><br><span class="line">python3 -c <span class="string">&quot;import tensorflow as tf; print(tf.config.list_physical_devices(&#x27;GPU&#x27;))&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-CUDA多版本管理和切换"><a href="#3-CUDA多版本管理和切换" class="headerlink" title="3. CUDA多版本管理和切换"></a>3. CUDA多版本管理和切换</h3><p>linux环境中(包括wsl) 同链接文件路径方式生效，所以可以灵活选择切换</p><h3 id="4-Docker中使用nvidia-GPU加速"><a href="#4-Docker中使用nvidia-GPU加速" class="headerlink" title="4. Docker中使用nvidia GPU加速"></a>4. Docker中使用nvidia GPU加速</h3><h4 id="4-1-前言"><a href="#4-1-前言" class="headerlink" title="4.1 前言"></a>4.1 前言</h4><p>以上 实现了 wsl中 搭建cuda环境以 使用GPU, 实现深度学习模型训练和推理。<br>但为了更好的<strong><em>移植性</em></strong>、通常会通过容器(docker) 实现 这些环境(cuda toolkit、python、pytorch、tensorflow、jupyter-lab)</p><p>关键词：容器环境启用GPU、NVIDIA Docker、GPU 服务器应用程序部署、可移植性<br>目的：<strong><em>在Docker中使用NVIDIA GPU加速</em></strong>.</p><p>以下是安装步骤(安装nvidia-docker)<br>前提：安装好了nvidia驱动、cuda、cudnn、docker基础版.<br>接下来需要安装的2个组件：NVIDIA Container Toolkit、NVIDIA Docker 2</p><h4 id="4-2-NVIDIA-Container-Toolkit"><a href="#4-2-NVIDIA-Container-Toolkit" class="headerlink" title="4.2 NVIDIA Container Toolkit"></a>4.2 NVIDIA Container Toolkit</h4><p>NVIDIA Container Toolkit： 提供运行时环境和必要工具，以便Docker容器有效的访问和利用宿主机上的GPU资源. 主要包括 nvidia-container-runtime 和相关的库文件 (libnvidia-container)。它负责在容器内部管理 GPU 的访问和资源分配。</p><p><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/index.html">官方文档:cloud-native/container-toolkit</a></p><h4 id="4-3-NVIDIA-Docker-2"><a href="#4-3-NVIDIA-Docker-2" class="headerlink" title="4.3 NVIDIA Docker 2"></a>4.3 NVIDIA Docker 2</h4><p>是一个 Docker 的插件，它与 Docker Engine 集成，简化了与 NVIDIA GPU 的交互和配置。它建立在 NVIDIA Container Toolkit 之上，通过 Docker CLI 扩展了对 GPU 的支持。</p><p>主要提供了 nvidia-docker 命令行工具，使得容器可以直接通过 —gpus 参数指定使用的 GPU 数量。</p><ul><li>依赖关系：NVIDIA Docker 2 依赖于 NVIDIA Container Toolkit 的运行时环境来管理和配置 GPU。</li></ul><p>具体的安装步骤：在ubuntu中使用apt-get直接安装，具体不展开了. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保留下之前的安装方式. 最新的官方方式还没有尝试过，后续遇到问题可供参考</span></span><br><span class="line">apt-get install nvidia-docker2:amd64=2.5.0-1 \</span><br><span class="line">libnvidia-container-tools:amd64=1.3.3-1 \</span><br><span class="line">nvidia-container-runtime:amd64=3.4.2-1 \</span><br><span class="line">libnvidia-container1:amd64=1.3.3-1 \</span><br><span class="line">nvidia-container-toolkit:amd64=1.4.2-1</span><br></pre></td></tr></table></figure><h4 id="4-4-验证及使用方式"><a href="#4-4-验证及使用方式" class="headerlink" title="4.4 验证及使用方式"></a>4.4 验证及使用方式</h4><p><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/sample-workload.html">官方文档:Sample Workload</a></p><p>Running a Sample Workload with Docker<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --<span class="built_in">rm</span> --runtime=nvidia --gpus all ubuntu nvidia-smi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果出现：docker: Error response from daemon: Unknown runtime specified nvidia.</span></span><br><span class="line"><span class="comment"># 则配置如下：</span></span><br><span class="line">/etc/docker/daemon.json中添加</span><br><span class="line"><span class="string">&quot;runtimes&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;nvidia&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/usr/bin/nvidia-container-runtime&quot;</span>,</span><br><span class="line">      <span class="string">&quot;runtimeArgs&quot;</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment"># 然后重启docker：sudo systemctl restart docker  </span></span><br><span class="line">----------</span><br><span class="line"><span class="comment"># 或者使用</span></span><br><span class="line">docker run --gpus=all --<span class="built_in">rm</span> nvidia/cuda:11.0-base nvidia-smi</span><br><span class="line"><span class="comment"># 测试nvidia-container及查看信息</span></span><br><span class="line">sudo nvidia-container-cli -k -d /dev/tty info</span><br></pre></td></tr></table></figure></p><h4 id="4-5-NVIDIA-Docker原理"><a href="#4-5-NVIDIA-Docker原理" class="headerlink" title="4.5 NVIDIA Docker原理"></a>4.5 NVIDIA Docker原理</h4><p>在docker容器中使用GPU的原理是什么呢，硬件和软件架构是?</p><h4 id="4-6-关于docker中的cuda版本"><a href="#4-6-关于docker中的cuda版本" class="headerlink" title="4.6 关于docker中的cuda版本"></a>4.6 关于docker中的cuda版本</h4><p>通过选择 指定版本的 docker镜像。<br><a href="https://hub.docker.com/r/nvidia/cuda/">镜像站</a> 国外的,超时下载不下来。建议使用以下：<br><a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/cuda/tags">NVIDIA官方的网站; nvcr.io/nvidia/</a></p><ul><li><span style="font-size: 12px;color: #e96900;">此网站还包含了很多镜像和模型.推荐</span></li></ul><p>对于版本的选择： 可以选择任意版本cuda的镜像，因为镜像里包含了完整的兼容的工具链(cuda toolkit、python、等等)<br>需要注意的是 镜像的版本类型，有base、runtime、cudnn8 等镜像。 它们的区别在于:</p><ul><li>base是基础镜像，提供了cuda运行时库和基础工具. （大小一般仅 几十M 、 没有nvcc、没有python）</li><li>runtime基于base， 增加了一些必要的运行时依赖.（大小一般 1个G 、 有nvcc、没有conda和python）</li><li>(部署)cudnn8基于runtime，额外包含了cuNDD库，用于深度学习的加速，提供了优化的卷积操作等功能.（大小一般 近2个G）</li><li>(开发)devel（带有nvcc 等编译器。 其他的镜像没有开发工具， 仅用于运行已经编译好的CUDA应用程序）</li></ul><p>由于在wsl中我们选择了cuda11.8，那在docker环境中 我们选择接近版本的(选错,应该选18结果选了16…大写的无语,pytorch对16支持不好…)：nvcr.io/nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu20.04<br>    <span style="font-size: 12px;color: #e96900;">如果需要加速用到cudnn，则选择第三个tag类型的镜像.</span><br>    <span style="font-size: 12px;color: #e96900;">由于以上镜像拉取超时，解决办法. 拉取 nvcr.io/nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu20.04</span><br><span style="color: blue">推荐直接选择cudnn8-devel版本,用于开发环境. 如果是部署可以选择runtime版本</span></p><p>测试<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvidia-docker  run -it --<span class="built_in">rm</span>   -p 3333:8888  nvcr.io/nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04  /bin/bash</span><br><span class="line"><span class="comment"># 查看路径：/usr/local/cuda-11.6/ 是否存在</span></span><br></pre></td></tr></table></figure></p><p><span style="color: blue">搭建一个长久运行的nvidia docker容器 以及notebook开发环境(重要)</span><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name ai_devel --runtime=nvidia --gpus all --restart=always -d  -p 8081:8888 -v /mnt/d/jupyter/quanoc:/home/quanoc nvcr.io/nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04 <span class="built_in">tail</span> -f /dev/null</span><br><span class="line"><span class="comment"># 后面加tail -f /dev/null 是为了不让容器自动正常退出.</span></span><br><span class="line">nvidia-docker run --name ai-devops --restart=always -d  -p 8888:8888 -v /mnt/d/jupyter/quanoc:/home/quanoc nvcr.io/nvidia/cuda:11.6.1-runtime-ubuntu20.04</span><br><span class="line"><span class="comment"># 说明：将容器路径映射到宿主机. 提供nvidia docker容器环境</span></span><br></pre></td></tr></table></figure></p><p><span style="color: red">后面加tail -f /dev/null 是为了不让容器自动正常退出.</span></p><h3 id="5-基于nvidia-cuda镜像搭建容器开发环境"><a href="#5-基于nvidia-cuda镜像搭建容器开发环境" class="headerlink" title="5. 基于nvidia/cuda镜像搭建容器开发环境"></a>5. 基于nvidia/cuda镜像搭建容器开发环境</h3><p>关键词：python、jupyter-lab、pytorch、tensorflow<br>下载下来镜像后，接下来搭建开发环境. 安装相关组件.</p><h4 id="5-1-安装Miniconda3"><a href="#5-1-安装Miniconda3" class="headerlink" title="5.1 安装Miniconda3"></a>5.1 安装Miniconda3</h4><p><a href="/wk/%E7%AE%97%E6%B3%95/001.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/001.%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/001.Anaconda%E5%AE%89%E8%A3%85/">参考：Anaconda安装</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install wget</span><br><span class="line"><span class="comment"># 安装Miniconda3</span></span><br><span class="line"><span class="comment">## 下载Miniconda3-py38_23.3.1-0-Linux-x86_64.sh ； 安装</span></span><br><span class="line">bash Miniconda3-py38_23.5.1-0-Linux-x86_64.sh</span><br><span class="line"><span class="comment"># 重新进入容器(安装完成后默认配置了环境变量，需要重新打开终端)</span></span><br></pre></td></tr></table></figure></p><h4 id="5-2-python及其它框架安装"><a href="#5-2-python及其它框架安装" class="headerlink" title="5.2 python及其它框架安装"></a>5.2 python及其它框架安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n ml3.8 python=3.8</span><br><span class="line">conda activate ml3.8</span><br><span class="line"><span class="comment"># pip安装jupterlab </span></span><br></pre></td></tr></table></figure><p><a href="/wk/算法/001.机器学习/001.工作环境搭建/002.jupyterlab开发环境搭建/">Jupyterlab开发环境搭建</a></p><p>pytorch安装,见以上资料. 2.3.1版本 使用conda安装需要下载近2个G why? pip好像800+M.<br><span style="font-size: 12px;color: #e96900;">如果你只需要安装Python包，且不需要管理环境或依赖关系，那么pip也可以胜任。</span></p><p>pytorch验证问题，torch.cuda.is_available() 出现500的错误。 解决办法：重新安装  nvidia-container-toolkit即可，详见：<br><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html">Installing the NVIDIA Container Toolkit</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h1&gt;&lt;p&gt;高性能推理引擎、AI算法工程 对GPU CUDA性能优化的诉求目前是AI行业各个公司在算法工程上需要解决的问题。 以实现高效的并行计算，充分利用GPU计算资源，实现AI算法高性能推理.&lt;/p&gt;
&lt;p&gt;AI行业可以分为两块：&lt;strong&gt;&lt;em&gt;基础设施(infra)和算法模型&lt;/em&gt;&lt;/strong&gt;. 一方面是建设和优化支持AI应用的基础设施，让GPU更好的使用起来。另一方面是研究和应用在这些基础设施上运行的先进算法。&lt;/p&gt;
&lt;p&gt;其中infra包括：硬件基础设施（比如GPU架构、云计算平台）、软件工具（比如深度学习框架、数据处理工具）、以及相关的网络基础设施（比如高速网络连接）。&lt;em&gt;GPU架构和CUDA编程模型可以被视为在这一基础设施层面的重要组成部分&lt;/em&gt;。&lt;br&gt;而算法方面包括：机器学习算法（如监督学习、无监督学习、强化学习）、深度学习模型（如神经网络结构和训练方法）、以及在特定领域中的应用优化算法等。这些算法和模型构成了AI技术的核心，决定了AI系统在解决问题时的效果和性能。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="006.算法工程" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="Infra" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/Infra/"/>
    
    
  </entry>
  
  <entry>
    <title>策略治理_策略评价体系</title>
    <link href="https://quano.gitee.io/wk/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%A3%8E%E6%8E%A7%E4%B8%8E%E4%B8%9A%E5%8A%A1%E5%AE%89%E5%85%A8/%E7%AD%96%E7%95%A5%E5%B9%B3%E5%8F%B0/001.%E7%AD%96%E7%95%A5%E6%B2%BB%E7%90%86_%E7%AD%96%E7%95%A5%E8%AF%84%E4%BB%B7%E4%BD%93%E7%B3%BB/"/>
    <id>https://quano.gitee.io/wk/信息安全/风控与业务安全/策略平台/001.策略治理_策略评价体系/</id>
    <published>2024-06-24T07:55:57.000Z</published>
    <updated>2024-06-25T15:51:27.114Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="14239b5fe69f4219a02b4430f494264791039600332beaf2c1451170acda7291">6529a249a0af82b27e00ec9fb492a16554c827f272e9748714be7891901a63d8de314d6d0b6656af15cadc33b8cce5aa86c8b95ec593b02332f93dbbc84d4343222e9b804f962bacce50f4de7ab55acffe9516142e678310b11e54b99873542462fbd3f477668f73b69edfbf7df084952600abad77f454dddd2153ebe063a444b098fb9772b94a84396ea167c211466d4e05d706a5801e210b094f34eabfcd34907a082811091897da7eaa63eb95624bfc174946d447c8119d99de2e9636565d9b430ab9ab5e4f45ec5e77ee91c77de25ab0dce573baaceb9fdca9e976d073bf0f86fb93428d619f622dbb29e85ab4f9bf464317494b83d76c9edb841b2de1d84a48a65c509dae3c711a48fa89ae441fb4164b4d2b65fcdf2d2da5db3b216fe718bd35c7c852009c18cf38608b47df8c18d826a017530df7098102ce3c886705ae4f1f8a93806c661fd041a53a3d498af34db88726916996cf4565e72baf9f139fdd033d44dc10ee877c9595ecbc9437bb93b0acb62c041095499e55ff3f08977f8ec8032731e7690f36f2b213dc341f233bdfc580162f873a469e08d3801db390420e28d2b62a5975d5c60df5a97621d4cc1ce536b1731f376a568b087837d7e8575fe2cdf7d3fdfd8c873f8930bbd8744061ea1b4038d9d603bff061f5c9272d479e58e16d533a7266825a601e32fc8dc746d7a811d2b33250a64a96ae3d0c2dbbfe7e49581ef32db3a9b1dd5cb69ff70d2fe11f71c09499e60358d3a34f1b4251d7743cbc20dc5c96aaa56eb9153deb6f852e68f1d06230931de849c5ad81c1a12554e9cd035f3479ca089bdddf6cca4cc71e0f8187a57b55c5b46811e1a854abaa28c11ba489cedde1643b14c1e49bb0bbdf36d930eb758b02e37e9644e3a61830637106a0d82db582dd637d976c1d9be34ba607ea37e0713dcb2815650b8d0f870499f7b11eb36351b92cca22161d291e33bc76eb0300b77c7c76755e202ba68888f6f65a4c2252bcb1ddce5a4fb31b55621f3049e39f1575512fc06fd54a6493ffd1422371561be419a8610aff5ac6569843933e87d0a599041b3b71aa1069fa5e58648d23b6960bc82464de50eae683dea98d9acf08629a0aa36a80416c6e81bb73486eee66619d5b13176b6b3ddfb9a4fadd2385afeeb783791b9c624267e551074356510e832270283da58648e53c4f15594e7d5fff8a815a598f1c3e17e66371d02a53ace029eb72614bbf85e14ce2e0649e80b9136528fecbe9854bf2252a9d68cc4a39a32efca2b0faf456799c17a389587b42a160e0feefe5eb8e95038dd9b3dceb43cdaca2aceb49b3c64ffd5c4d97341c65c13eb510764a0b8b4fb0b9ef0abe1a52d929cd06c96c32f02ccb1ba3ec64e1539709402f059970e5fd86cce8aa9bcae4098b09113491e553c154dc8d3a1cea27a2c5d4d8af655dad0fae242e7a0dc74fcd8729b398c0e9070be8af5921fcfbd1ff4851e2fc2ba8b27351169db2de8380d50fbad5e34984db912455d33400c25f7b406dd81d2fa0169ff3ab8d3cdeca00be1fb0a2698e14b4c8f6bfdd2edbbc3d0552dc7d6f59758de3042be73c98c8e3c93378bd517cbb29811cceb10bf47197076c55b7ac796d6fc199cff69b5c482e1dd27b9a3cc372110c9e098e6a7059395060391c91e90e33554af10d47a52c29a740487c66ec0048035e28e029423bd094dd81a6773136902aa2daeaa63fd484d6464f6dd13f9373d6367e0ece0586cc2ba42ef55fcb67b998994f175f9db4e766cb181b12a78e2904fda9ea084abbd5691be7c784beee6d1f02eb010b1af30163af925f5277347e925d218bb7eb212f9604b3c18e3d985a255905d7421eb02fb7105b7c144be5ba59107d1a2dc69ce68baf539cf6fff55247b2d62501b3c29ce93faff33ec2d96a40c3451edd03304232b789f3dfdfb2b54aba06b38f680492c1e01c84d4a9dcebe5f99c2902961f3b2967eec659e63a727695f1e0d66771982c434265bcd182dd4e70c3fee0a716dbd1c8d383b64845526e4bf6a7049100149b3ca1a7f2d60cf3205e26e976804247df3f90d34f30e4644d6314ea1a5f518dc643d0267f7c5653fc25b9dac6ad2234cd5bb546262a5e92c9084056d5110401ff268ffd9742c5141d8b0616968be9a4a678aba383d325f4bd6ade7edc043978bc22d42021e805a8571c2b708d86ab9d5946ae32e4c9fceefaf453cf358a7401b4b3858ae30ce70ba1f00753cdd90ee8cad1df8b58aca4373c7c239a700d0c1ea205e9375bbc28d14391891f1a883dd6853eb84f97f45a382f46de943b28094d86d79e97cb129d72fbe496c2b5f6de556df1f5d0468b206b5d1f7897e8c8f2207b5dfc7c979e42c9e7415aaa5363a439ee104387d1a41f5f13a84fc94db27084a9ec75f2fcfc99e27f7d7c5eedf1228c86867951ca6c2be5a9cbb204c504dab92bfd0781f38383fbd18ca45b6e429a3e9dc3d783d4a8b6305ebed7978e395f36b5e0f4c03ec98dec084a44badba4a9cb46f554f599760f27bc9806adf0b6227eb91d3a6dd9185142e8d093b8df8855691f39e20ee1a6f442b7ea839ae3b4e06f221a8d44fad5f5464b407fd77ae9673bd8323d00faf59ec99fc42fb23e58f9fc5f2b47d4667324486a4f6be9a02925efb07a9faa3d7b19af6d65d321dcef7ecb74d3ac0679c2d3eeb513717dd1a3b799cca15bc8585a9851cd1beb1a731d4bee0767d03097d9a1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，需要密码才能继续阅读。
    
    </summary>
    
      <category term="信息安全" scheme="https://quano.gitee.io/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="风控与业务安全" scheme="https://quano.gitee.io/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%A3%8E%E6%8E%A7%E4%B8%8E%E4%B8%9A%E5%8A%A1%E5%AE%89%E5%85%A8/"/>
    
      <category term="策略平台" scheme="https://quano.gitee.io/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%A3%8E%E6%8E%A7%E4%B8%8E%E4%B8%9A%E5%8A%A1%E5%AE%89%E5%85%A8/%E7%AD%96%E7%95%A5%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="private" scheme="https://quano.gitee.io/tags/private/"/>
    
  </entry>
  
  <entry>
    <title>策略平台产品</title>
    <link href="https://quano.gitee.io/wk/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%A3%8E%E6%8E%A7%E4%B8%8E%E4%B8%9A%E5%8A%A1%E5%AE%89%E5%85%A8/%E7%AD%96%E7%95%A5%E5%B9%B3%E5%8F%B0/002.%E7%AD%96%E7%95%A5%E5%B9%B3%E5%8F%B0%E4%BA%A7%E5%93%81/"/>
    <id>https://quano.gitee.io/wk/信息安全/风控与业务安全/策略平台/002.策略平台产品/</id>
    <published>2024-06-24T07:55:57.000Z</published>
    <updated>2024-08-14T15:56:34.494Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="e4fb3f212d23e80ac5c12dfc556310e3cb71dbd1d98a7b0d0f57e3ab2474abfe">6529a249a0af82b27e00ec9fb492a165139c3cab6083c44fcf717c7658439994a49d0760a03e592e92ca5352d78a28d2712f99923cfbe6672962a4fb5f2b37fc9f1ae2ccd083b052fe60c0550691c42fe610363a3c5fb3afb31aa4eff353e597a9af888da622ddc71c32254e2fa40dd843c90a080d491c7a1e4ab9176696089c304743e466b4b747ef94d07e1b7756b9783968e86fc2944dd3a33f36df1d631679f6029304342b2ab5725423060738ff62191688deca5c0392e1cb50798d5c483f36699b17d9015210be9f8ad7e4755c0f5e8e285f471ce89cd0f703d762da2a6fb39cc660597ecbbef74294e2d2b879708a1f6ec1cbdcd1f369c9353c82a0778acfa5e9f75ea88ee2787c27eeff63123129656221eb40881fcd0281d6253af5a21bf4397373b54ae9b4f44c0d1c3b09bd6dcc5e44da2e21b8254f79c572c24f1de90b43830e7371ae37077266c0942b670e136399814df46762d6f12391d03081a5d9b38ff5042f32e59316538950f2fdc4985df6565b464274da6b8ce170ed41907d3b2ef5d5f1937224446e9ff5dfb534b1e56a52d7740c408a3891b3d044ff49adfebb28de855242648bac38ed8a29aa13918b37b424fc43aedb6a8547a4aa5c7267337be42f7a9f7eaed337f624</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，需要密码才能继续阅读。
    
    </summary>
    
      <category term="信息安全" scheme="https://quano.gitee.io/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="风控与业务安全" scheme="https://quano.gitee.io/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%A3%8E%E6%8E%A7%E4%B8%8E%E4%B8%9A%E5%8A%A1%E5%AE%89%E5%85%A8/"/>
    
      <category term="策略平台" scheme="https://quano.gitee.io/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%A3%8E%E6%8E%A7%E4%B8%8E%E4%B8%9A%E5%8A%A1%E5%AE%89%E5%85%A8/%E7%AD%96%E7%95%A5%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="private" scheme="https://quano.gitee.io/tags/private/"/>
    
  </entry>
  
  <entry>
    <title>1.参数估计方法</title>
    <link href="https://quano.gitee.io/wk/%E7%AE%97%E6%B3%95/001.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002.%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/001.%E5%8F%82%E6%95%B0%E4%BC%B0%E8%AE%A1/"/>
    <id>https://quano.gitee.io/wk/算法/001.机器学习/002.数学知识/机器学习/001.参数估计/</id>
    <published>2024-06-12T17:55:57.000Z</published>
    <updated>2024-06-16T20:35:05.461Z</updated>
    
    <content type="html"><![CDATA[<p>定义：<br>参数估计过程中，我们的目的是找到一组参数值， 使得<strong><em>目标函数</em></strong>达到最优(如最小或最大)。</p><p><span style="font-size: 12px;">tips: 损失函数是目标函数的一种常见形式。 很多情况下，优化目标函数主要就是通过最小化损失函数来实现的。</span></p><p>参数估计的方法有：<br><strong><em>最优化理论(最大似然估计、最小化损失函数(最小二乘法、梯度下降法)) 、贝叶斯估计、矩估计</em></strong></p><p>以上 也说明了 参数估计 与最小化损失函数 的关系.</p><h1 id="一、最优化理论"><a href="#一、最优化理论" class="headerlink" title="一、最优化理论"></a>一、最优化理论</h1><p><a href="/wk/算法/001.机器学习/002.数学知识/机器学习/002.最优化理论_模型训练中的数学/">数学原理:最优化理论/梯度下降最优化算法</a></p><h2 id="1-1-最大似然估计"><a href="#1-1-最大似然估计" class="headerlink" title="1.1 最大似然估计"></a>1.1 最大似然估计</h2><p><span style="color: red;">通过最大似然估计(MLE)或其他优化算法来估计模型的参数 θ</span>而不是最小化平方差.</p><p>可以 通过 梯度上升法 实现最大似然估计， 帮助找到 使得似然最大的 参数组合. </p><p>另外用于 最大似然估计的方法还有：</p><ul><li>牛顿法： 利用目标函数的 一阶导数和二阶导数来更新参数。</li><li>拟牛顿法：是对牛顿法的改进，避免了计算二阶导数。</li><li>期望最大化(EM)算法：在一些含有隐变量的模型中经常使用。</li></ul><p>这里重点介绍 梯度上升法：</p><h3 id="1-1-1-梯度上升法"><a href="#1-1-1-梯度上升法" class="headerlink" title="1.1.1 梯度上升法"></a>1.1.1 梯度上升法</h3><p>基于的思想：要<span style="color: red;">找到某函数的最大值</span>，最好的方法是<strong><em>沿着该函数的梯度方向探寻</em></strong>。</p><p><span style="font-size: 12px;">tips: 关于<strong><em>梯度</em></strong>的概念， <a href="/wk/%E7%AE%97%E6%B3%95/001.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002.%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E5%BE%AE%E7%A7%AF%E5%88%86/001.%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/#4-2-%E6%A2%AF%E5%BA%A6-Gradient">梯度</a>是多元函数在某一点的导数，是一个向量， 其各个分量分别是函数对各个自变量的偏导数。</span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">梯度是多元函数在某一点的导数，是一个向量，其各个分量分别是函数对各个自变量的偏导数</span><br><span class="line">1. 在单变量情况下，导数和梯度是等价的概念，因为梯度只有一个分量.</span><br><span class="line">2. 在多变量情况下，导数是一个标量，而梯度是一个向量，包含了所有偏导数的信息.</span><br><span class="line">3. 梯度 的每个分量，表示了函数在 对应方向上的变化率，可以看作是函数在该点的局部导数.</span><br><span class="line">在优化问题中，特别是在机器学习和数值优化中，我们经常需要最小化或最大化函数。梯度提供了函数在给定点的局部变化方向，</span><br><span class="line">因此可以被用来指导优化算法（如梯度下降法、梯度上升法）在参数空间中搜索最优解。</span><br></pre></td></tr></table></figure><h4 id="1-梯度上升的迭代"><a href="#1-梯度上升的迭代" class="headerlink" title="1. 梯度上升的迭代"></a>1. 梯度上升的迭代</h4><p>迭代公式如下：<br>$ \mathbf{w}^{(t+1)} = \mathbf{w}^{(t)} + \eta \nabla f(\mathbf{w}^{(t)}) $</p><p>其中：</p><ul><li>$\mathbf{w}^{(t+1)}$ 是第 $t$ 次迭代后的参数向量</li><li>$\eta$ 是学习率，控制每次迭代中参数更新的步长</li><li>$f(\mathbf{w}^{(t)})$ 是目标函数$f$在参数向量 $\mathbf{w}^{(t)}$ 处的梯度向量</li></ul><p>该公式将一直被迭代执行，直到达到某个停止条件为止，比如迭代次数达到某个指定值 或者算法达到某个可以允许的误差范围.</p><h4 id="2-训练算法-逻辑回归"><a href="#2-训练算法-逻辑回归" class="headerlink" title="2. 训练算法:逻辑回归"></a>2. 训练算法:逻辑回归</h4><p>使用梯度上升找到最佳参数</p><p>逻辑回归假设输出$y$是二分类问题。 对于给定的输入特征 $\mathbf{x}$ ，逻辑回归模型的输出 $ \hat{y}$ 由一下逻辑函数给出：<br>$ \hat{y} = \sigma(\mathbf{w}^\top \mathbf{x} + b) = \frac{1}{1 + e^{-(\mathbf{w}^\top \mathbf{x} + b)}} $</p><ol><li>损失函数<br>逻辑回归使用<strong><em>交叉熵损失函数</em></strong>来衡量预测值 $\hat{y}$ 与真实标签 $y$ 之间的差异：<br>$\mathcal{L}(\mathbf{w}, b) = - \frac{1}{N} \sum_{i=1}^N \left[ y^{(i)} \log \hat{y}^{(i)} + (1 - y^{(i)}) \log (1 - \hat{y}^{(i)}) \right]$<br>其中：<ul><li>$N$ 是训练样本数量</li><li>$y^{(i)} = \sigma(\mathbf{w}^\top \mathbf{x^{(i)}} + b)$ 是对样本 $i$ 的预测概率</li><li>$y^{(i)}$ 是样本 $i$ 的真实标签</li></ul></li><li>梯度上升优化过程<br>梯度上升法<strong><em>用于最大化对数似然函数</em></strong> $ \ell(\mathbf{w}, b) = \sum_{i=1}^N \left[ y^{(i)} \log \hat{y}^{(i)} + (1 - y^{(i)}) \log (1 - \hat{y}^{(i)}) \right] $<br>即使得损失函数 $ \mathcal{L}(w, b) $ 最小化。<br>梯度上升法的步骤如下：<ul><li>(1)初始化参数：随机初始化权重$\mathbf{w}$和偏置$b$</li><li>(2)计算梯度： 计算损失函数对参数 $\mathbf{w}$和$b$ 的梯度<br>  对于权重 $\mathbf{w}$ 的梯度： $ \frac{\partial \mathcal{L}}{\partial \mathbf{w}} = \frac{1}{N} \sum_{i=1}^N (\hat{y}^{(i)} - y^{(i)}) \mathbf{x}^{(i)} $<br>  对于偏置 b 的梯度：$ \frac{\partial \mathcal{L}}{\partial b} = \frac{1}{N} \sum_{i=1}^N (\hat{y}^{(i)} - y^{(i)}) $</li><li>(3)参数更新：根据梯度方向和学习率 $\eta$，更新参数  $\mathbf{w}$和$b$<br>  $ \mathbf{w} := \mathbf{w} + \eta \frac{\partial \mathcal{L}}{\partial \mathbf{w}} $<br>  $ b:= b + \eta \frac{\partial \mathcal{L}}{\partial b} $</li><li>(4) 重复迭代：重复步骤2和步骤3，直到损失函数收敛或达到预定的迭代次数</li></ul></li></ol><p>理解 梯度上升、 最大似然估计(似然函数)、 损失函数的关系：</p><ul><li>逻辑回归中 通过 最大化似然函数(假设观测数据服从伯努利分布) 来估计参数</li><li>而 最大化的方法 是通过 梯度上升法</li><li>梯度上升 是通过 计算损失函数 $\mathcal{L}(\mathbf{w}, b)$ 对参数  $\mathbf{w}$和$b$  的梯度来更新参数.</li></ul><p>梯度上升 只是定义了 迭代的方法(看迭代公式) . 而损失函数 的梯度用来计算 更新方向和大小，从而逐步优化.</p><p>损失函数的梯度被用来计算参数的更新方向和大小，从而逐步优化模型的参数以最小化或最大化损失函数的值。</p><p>逻辑回归中， 损失函数是怎么来的？？<br>通过最大化对数似然函数（log-likelihood）得到的， 推导过程：<br>(重要)在统计推断中，通过最大化对数似然函数来估计参数是常用的方法。对于逻辑回归，我们实际上是最大化对数似然函数的负数的相反数，即最小化负对数似然函数（Negative Log-Likelihood）：<br>$\mathcal{L}(\mathbf{w}, b) = - \frac{1}{N} \sum_{i=1}^N \left[ y^{(i)} \log \hat{y}^{(i)} + (1 - y^{(i)}) \log (1 - \hat{y}^{(i)}) \right]$</p><p>这个负对数似然函数就是逻辑回归中常用的损失函数，用于衡量模型预测值与真实标签之间的差异。</p><p>损失函数是 对数似然函数的负数除以样本数.</p><h2 id="1-2-最小化损失函数"><a href="#1-2-最小化损失函数" class="headerlink" title="1.2 最小化损失函数"></a>1.2 最小化损失函数</h2><h3 id="1-2-1-最小二乘法"><a href="#1-2-1-最小二乘法" class="headerlink" title="1.2.1 最小二乘法"></a>1.2.1 最小二乘法</h3><h3 id="1-2-2-梯度下降法"><a href="#1-2-2-梯度下降法" class="headerlink" title="1.2.2 梯度下降法"></a>1.2.2 梯度下降法</h3><h1 id="二、贝叶斯估计"><a href="#二、贝叶斯估计" class="headerlink" title="二、贝叶斯估计"></a>二、贝叶斯估计</h1><h1 id="三、矩估计"><a href="#三、矩估计" class="headerlink" title="三、矩估计"></a>三、矩估计</h1><h1 id="关于目标函数和损失函数"><a href="#关于目标函数和损失函数" class="headerlink" title="关于目标函数和损失函数"></a>关于目标函数和损失函数</h1><p>损失函数是目标函数的一种常见形式。 很多情况下，优化目标函数主要就是通过最小化损失函数来实现的。</p><p>假设我们训练 图像分类模型， 目标函数 除了考虑分类错误的损失（损失函数部分）， 还可能考虑模型的复杂度，如参数的数量或某些正则化项， 以避免过拟合吗，这就是损失之外的其它因素。</p><p>包含约束条件的例子： 比如在资源分配问题中，目标函数可能是 最大化总收益， 但同时有约束条件如每个资源的分配量不能超过其上限，或者总资源使用量不能超过某个固定值等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;定义：&lt;br&gt;参数估计过程中，我们的目的是找到一组参数值， 使得&lt;strong&gt;&lt;em&gt;目标函数&lt;/em&gt;&lt;/strong&gt;达到最优(如最小或最大)。&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;tips: 损失函数是目标函数的一种常见形式。
      
    
    </summary>
    
      <category term="算法" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="001.机器学习" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="002.数学知识" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"/>
    
      <category term="机器学习" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ML" scheme="https://quano.gitee.io/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>2.最优化理论_模型训练中的数学原理</title>
    <link href="https://quano.gitee.io/wk/%E7%AE%97%E6%B3%95/001.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002.%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002.%E6%9C%80%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA_%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6/"/>
    <id>https://quano.gitee.io/wk/算法/001.机器学习/002.数学知识/机器学习/002.最优化理论_模型训练中的数学/</id>
    <published>2024-06-10T14:55:57.000Z</published>
    <updated>2024-06-16T17:49:51.469Z</updated>
    
    <content type="html"><![CDATA[<p>在参数估计中，常用的方法主要是最优化理论，<br>其中包括 最大似然估计、最小化损失函数(最小二乘法、梯度下降法)) 。</p><ul><li>本文以Logistic回归算法 为依据， 初步的学习逻辑回归中的最优化理论：最大似然估计. </li><li>之后介绍其它的最优化方法：梯度下降、最小二乘法.</li></ul><p><span style="font-size: 12px;">tips: 逻辑回归中除了 最大似然估计还可以用其它方法，比如梯度下降</span></p><h1 id="逻辑回归中的最优化理论"><a href="#逻辑回归中的最优化理论" class="headerlink" title="逻辑回归中的最优化理论"></a>逻辑回归中的最优化理论</h1><p>基于 最优化方法 的最佳回归系数确定.</p><h2 id="1-最大似然估计"><a href="#1-最大似然估计" class="headerlink" title="1. 最大似然估计"></a>1. 最大似然估计</h2><h1 id="背景-模型训练"><a href="#背景-模型训练" class="headerlink" title="背景(模型训练)"></a>背景(模型训练)</h1><p>先来看看模型训练过程：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 算法过程</span><br><span class="line">1. 收集数据、准备数据</span><br><span class="line">2. 分析数据</span><br><span class="line">3. 训练算法：训练的目的是为了找到最佳的分类回归系数</span><br></pre></td></tr></table></figure></p><h2 id="基于最优化方法的最佳回归系数确定"><a href="#基于最优化方法的最佳回归系数确定" class="headerlink" title="基于最优化方法的最佳回归系数确定"></a>基于<span style="color: red;">最优化方法</span>的最佳回归系数确定</h2><p>确定回归系数的最优化方法通常涉及到<strong><em>求解损失函数</em></strong>的<strong><em>最小化问题</em></strong>。<br>通常在线性回归中，最常用的方法是<strong><em>最小二乘法</em></strong>，而在深度学习中，通常使用<strong><em>梯度下降法或其变种来优化损失函数</em></strong>。<br>(逻辑回归是个分类问题，不是线性回归，使用的最优化方法是梯度下降)</p><ul><li>最小二乘法<br>在普通最小二乘线性回归中，我们试图找到一条直线，使得该直线与数据点的<strong><em>残差平方和</em></strong>最小。这个问题可以通过解析方法（例如正规方程）求解，或者通过迭代优化方法（例如梯度下降）来解决。</li></ul><ul><li>梯度下降法<br>在深度学习中，梯度下降法是最常用的优化方法之一。它通过计算损失函数相对于模型参数的梯度，并沿着梯度的反方向更新参数，以使损失函数的值逐渐减小。梯度下降法有多种变种，包括批量梯度下降（Batch Gradient Descent）、随机梯度下降（Stochastic Gradient Descent）和小批量梯度下降（Mini-batch Gradient Descent）等。</li></ul><ul><li>其他优化方法<br>除了梯度下降法之外，还有一些其他的优化方法，如动量法（Momentum）、自适应学习率方法（Adaptive Learning Rate Methods，如Adam、RMSProp等）等。这些方法通过在梯度下降过程中引入动量或自适应调整学习率的方式来加速优化过程。</li></ul><h2 id="1-最小二乘法"><a href="#1-最小二乘法" class="headerlink" title="1. 最小二乘法"></a>1. 最小二乘法</h2><p>目标是最小化观测值与模型预测值之间的平方误差</p><h2 id="2-梯度下降法"><a href="#2-梯度下降法" class="headerlink" title="2. 梯度下降法"></a>2. 梯度下降法</h2><h2 id="3-逻辑回归的最优化"><a href="#3-逻辑回归的最优化" class="headerlink" title="3. 逻辑回归的最优化"></a>3. 逻辑回归的最优化</h2><p>逻辑回归使用 梯度下降法<br>梯度下降通过迭代更新模型参数，沿着损失函数的负梯度方向寻找损失函数的最小值。这种方法适用于逻辑回归中的损失函数，如对数损失函数（logarithmic loss）或交叉熵损失函数（cross-entropy loss），可以有效地最小化损失并找到最优参数。</p><h3 id="1-1-模型预测："><a href="#1-1-模型预测：" class="headerlink" title="1.1 模型预测："></a>1.1 模型预测：</h3><p>logistic 回归的模型预测由 sigmoid 函数完成，将线性组合的结果 $z$ 映射到一个介于 0 和 1 之间的概率值，表示样本属于正类的概率。预测公式为：<br>$ \hat{y} = \sigma(z) = \frac{1}{1 + e^{-z}} $<br>其中，e是自然对数的底，即欧拉常数，约等于2.71828。</p><h3 id="1-2-损失函数"><a href="#1-2-损失函数" class="headerlink" title="1.2 损失函数"></a>1.2 损失函数</h3><p>logistic 回归通常使用对数损失函数（log loss），也称为交叉熵损失函数，用来衡量模型预测值与真实标签之间的差异。</p><p>对于二分类问题，对数损失函数的定义为：<br>$ \text{Log Loss} = -\frac{1}{N} \sum_{i=1}^{N} \left( y_i \log(\hat{y}_i) + (1 - y_i) \log(1 - \hat{y}_i) \right) $</p><p>其中，$N$ 是样本数量，y_i 是第 i 个样本的真实标签，$\hat{y}_i$ 是模型的预测概率。</p><p><strong><em>这个损失函数是根据最大似然估计推导而来的</em></strong>。todo：怎么推导来着？？？？？？</p><p>我们希望<strong><em>通过最小化损失函数，使得模型输出的概率尽可能地接近真实标签的概率</em></strong>。而对数损失函数在这里被广泛选择的原因有以下几点：</p><ol><li>可微性： 对数损失函数是连续可导的，这使得我们可以使用梯度下降等优化算法来最小化损失函数，从而更新模型的参数。</li><li>凸性： 对数损失函数是凸函数，这意味着局部最小值也是全局最小值，因此我们可以保证收敛到全局最优解。</li><li>推导简单性： 对数损失函数的推导相对简单，并且与逻辑回归模型的概率输出形式相符合，因此在数学上更容易处理和理解。</li></ol><p>因此，对数损失函数是逻辑回归中的一种合适选择，它在实践中被广泛采用，并且在处理二分类问题时通常能够取得良好的效果。</p><h3 id="1-3-参数优化"><a href="#1-3-参数优化" class="headerlink" title="1.3 参数优化"></a>1.3 参数优化</h3><p>通过最小化损失函数来优化模型的参数 $ \mathbf{w} = (w_0, w_1, \ldots, w_n) $。<br>通常使用梯度下降法或其变种来进行参数优化。<br>具体地，我们计算损失函数关于参数的梯度，然后沿着梯度的反方向更新参数，使损失函数的值逐渐减小。</p><p>如上 sigmoid函数 定义， 函数的输入记为 $z$(其中$z$是线性函数的输出)，即 $z$ 由下面公式得出：<br>$z = w_0 + w_1x_1 + w_2x_2 + \ldots + w_nx_n$<br>在这里，$w_0, w_1, \ldots, w_n$ 是模型的权重，$x_1, x_2, \ldots, x_n$ 是输入特征。sigmoid函数将z的值映射到[0,1]的区间</p><p>todo: 这个过程的代码实现.</p><p>是怎么根据 损失函数、梯度下降 来找到 最优参数的呢？？</p><p>拓展</p><p>其它机器学习模型 中的参数估计方法是？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在参数估计中，常用的方法主要是最优化理论，&lt;br&gt;其中包括 最大似然估计、最小化损失函数(最小二乘法、梯度下降法)) 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本文以Logistic回归算法 为依据， 初步的学习逻辑回归中的最优化理论：最大似然估计. &lt;/li&gt;
&lt;li&gt;之后介绍其它的
      
    
    </summary>
    
      <category term="算法" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="001.机器学习" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="002.数学知识" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"/>
    
      <category term="机器学习" scheme="https://quano.gitee.io/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数学" scheme="https://quano.gitee.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>工作手册</title>
    <link href="https://quano.gitee.io/wk/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%5B2%5D%E5%8F%91%E5%B1%95%E8%A7%84%E5%88%92/TODOLIST/%E5%B7%A5%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    <id>https://quano.gitee.io/wk/项目管理/[2]发展规划/TODOLIST/工作手册/</id>
    <published>2024-06-07T01:56:24.000Z</published>
    <updated>2024-10-13T13:35:15.973Z</updated>
    
    <content type="html"><![CDATA[<p>为什么很难形成习惯， 因为 每天的工作 都是 自由、随性的， 需要做什么没有计划？遇到什么学什么？</p><p>这是一种低效、不好的学习方式.</p><p>把 中长期的学习目标 列成清单, 每天只按照清单 处理即可. 把学习和工作内容 框定在 流程和范围内.</p><h2 id="深度学习-实践篇"><a href="#深度学习-实践篇" class="headerlink" title="深度学习_实践篇"></a>深度学习_实践篇</h2><ol><li><p>启动win，连接网络</p></li><li><p>打开mac， 跳到 win机器的 wsl环境.  启动notebook(jupyterlab)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动ml3.8环境， 支持 tensorflow2.11....</span></span><br><span class="line">conda activate ml3.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 jupyter-lab</span></span><br><span class="line"><span class="built_in">cd</span> /mnt/d/jupyter/quanoc &amp;&amp; <span class="built_in">nohup</span> jupyter-lab --ip 0.0.0.0 --no-browser --allow-root &gt; jp_nohup.out 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># (重要)端口转发与 防火墙端口开启 (用于在mac中访问win wsl环境)</span></span><br><span class="line">netsh interface portproxy add v4tov4 listenport=8010 listenaddress=0.0.0.0 connectport=8889 connectaddress=172.24.11.211</span><br><span class="line">netsh advfirewall firewall add rule name=<span class="string">&quot;Port 8010&quot;</span> <span class="built_in">dir</span>=<span class="keyword">in</span> action=allow protocol=TCP localport=8010</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器打开(jupyter-lab的地址； 115为win机器地址)</span></span><br><span class="line">http://192.168.0.115:8010/</span><br></pre></td></tr></table></figure></li><li><p>实践 书中的项目， 并总结成 wiki，方便记忆</p></li><li><p>把总结的内容 提炼下， 讲出来， 分享的形式. (费曼)</p></li></ol><h2 id="深度学习-数学篇"><a href="#深度学习-数学篇" class="headerlink" title="深度学习_数学篇"></a>深度学习_数学篇</h2><p>找到需要的数学章节</p><p>近期：梯度下降、 微积分、导数</p><p>回顾：线性代数_矩阵</p><p>概率论：正态分布…</p><p>netsh advfirewall firewall add rule name=”Port 8000” dir=in action=allow protocol=TCP localport=8000</p><p>netsh interface portproxy add v4tov4 listenport=8010 listenaddress=0.0.0.0 connectport=8889 connectaddress=172.24.11.211<br>netsh advfirewall firewall add rule name=”Port 8010” dir=in action=allow protocol=TCP localport=8010</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为什么很难形成习惯， 因为 每天的工作 都是 自由、随性的， 需要做什么没有计划？遇到什么学什么？&lt;/p&gt;
&lt;p&gt;这是一种低效、不好的学习方式.&lt;/p&gt;
&lt;p&gt;把 中长期的学习目标 列成清单, 每天只按照清单 处理即可. 把学习和工作内容 框定在 流程和范围内.&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="项目管理" scheme="https://quano.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="[2]发展规划" scheme="https://quano.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/2-%E5%8F%91%E5%B1%95%E8%A7%84%E5%88%92/"/>
    
      <category term="TODOLIST" scheme="https://quano.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/2-%E5%8F%91%E5%B1%95%E8%A7%84%E5%88%92/TODOLIST/"/>
    
    
      <category term="todo" scheme="https://quano.gitee.io/tags/todo/"/>
    
  </entry>
  
  <entry>
    <title>1.分布式架构体系_专题-开篇介绍(架构概述)</title>
    <link href="https://quano.gitee.io/wk/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%5B1%5D%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/03.%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E4%BD%93%E7%B3%BB_%E4%B8%93%E9%A2%98/001.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0/"/>
    <id>https://quano.gitee.io/wk/平台工具/[1]架构设计/03.分布式架构体系_专题/001.架构设计概述/</id>
    <published>2024-05-31T16:05:57.000Z</published>
    <updated>2024-06-02T05:33:08.780Z</updated>
    
    <content type="html"><![CDATA[<p>单体架构早已成过去， 随着互联网和业务规模的发展，分布式系统已经随处可见，掌握分布式架构的知识体系 显得尤为重要.</p><p>这里主要是对 分布式架构的认识总结. </p><p><span style="color: red;">分布式架构体系设计</span> 是一种将系统得 <span style="color: red;">不同组件和功能分布在多个节点上</span>，通过<span style="color: red;">网络进行协同</span>工作的<span style="color: red;">架构设计理念和方法</span>.</p><h2 id="1-主要特点"><a href="#1-主要特点" class="headerlink" title="1.主要特点"></a>1.主要特点</h2><h3 id="1-1-去中心化"><a href="#1-1-去中心化" class="headerlink" title="1.1 去中心化"></a>1.1 去中心化</h3><p>不存在单一的中心控制节点，各个节点相互独立又相互协作.</p><h3 id="1-2-分布式部署"><a href="#1-2-分布式部署" class="headerlink" title="1.2 分布式部署"></a>1.2 分布式部署</h3><p>系统的各个部分运行在<span style="color: red;">不同的物理或逻辑节点上</span></p><h3 id="1-3-网络通信"><a href="#1-3-网络通信" class="headerlink" title="1.3 网络通信"></a>1.3 网络通信</h3><p>节点之间通过网络进行信息传递和协调</p><h2 id="2-目标"><a href="#2-目标" class="headerlink" title="2.目标"></a>2.目标</h2><ul><li><p>高可用：通过冗余和容错机制，减少单点故障对系统的影响，确保系统持续可用。</p></li><li><p>可扩展性：能够方便地添加或移除节点来适应业务增长或变化的需求</p></li><li><p>高性能：通过分布式处理和负载均衡，提升系统整体的处理能力和响应速度。</p></li><li><p>容错性和可靠性：即使部分节点出现故障，系统仍能正确运行或快速恢复</p></li><li><p>数据一致性： 保证在分布式环境下数据的完整性和一致性</p></li><li><p>弹性：可以动态调整资源分配以应对不同的工作负载</p></li></ul><p>todo： 怎么实现这些目标？都有哪些实践？常见的中间件都有哪些解决方案？ 如何和别人直观的描述这些内容？</p><h2 id="3-常用架构设计模式"><a href="#3-常用架构设计模式" class="headerlink" title="3. 常用架构设计模式"></a>3. 常用架构设计模式</h2><p>如何选择适合的架构设计模式.</p><div class="table-container"><table><thead><tr><th>架构模式</th><th>说明</th><th>优缺点</th><th>具体的实现技术</th><th>相关的中间件</th></tr></thead><tbody><tr><td>*分层架构模式</td><td>将系统分为不同的层次，如表示层、业务逻辑层、数据访问层等，各层职责明确。</td><td>优缺点</td><td>-</td><td>-</td></tr><tr><td>*微服务架构模式</td><td>将系统拆分成多个独立的微服务</td><td>-</td><td>数据6</td><td>-</td></tr><tr><td>*事件驱动模式</td><td>客户端与服务器</td><td>-</td><td>数据6</td><td>-</td></tr><tr><td>*微核模式</td><td>客户端与服务器</td><td>-</td><td>数据6</td><td>-</td></tr><tr><td>*整体架构</td><td>是一种用于设计和构建企业信息系统的框架和方法</td><td>通过包含多个层次或视角，例如业务架构、应用架构、数据架构和技术架构等</td><td>-</td><td>-</td></tr><tr><td>分布式对象模式</td><td>客户端与服务器</td><td>-</td><td>数据6</td><td>-</td></tr><tr><td>管道-过滤器模式</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>主从模式</td><td>有主节点负责主要任务处理，从节点提供辅助或备份</td><td>-</td><td>-</td></tr><tr><td>C/S 模式</td><td>客户端与服务器</td><td>-</td><td>数据6</td><td>-</td></tr><tr><td>MVP模式</td><td>客户端与服务器</td><td>-</td><td>数据6</td><td>-</td></tr><tr><td>分布式缓存模式</td><td>利用缓存提高数据访问效率</td><td>-</td><td>数据6</td><td>-</td></tr><tr><td>分布式缓存储模式</td><td>如分布式文件系统、分布式数据库等</td><td>-</td><td>数据6</td><td>-</td></tr><tr><td>分布式协调模式</td><td>如使用zookeeper等进行分布式协调</td><td>-</td><td>数据6</td><td>-</td></tr></tbody></table></div><p>优点：分布式系统的目标， 解决了高可用、扩展性、高性能、容错、弹性等问题。<br>缺点：负责性增加、 数据一致性挑战、分布式事务难题、部署和管理复杂、成本高(构建和维护分布式架构 需要更多的硬件资源和人力)、网络延迟和开销</p><h3 id="3-1-架构模式总结"><a href="#3-1-架构模式总结" class="headerlink" title="3.1 架构模式总结"></a>3.1 架构模式总结</h3><p>不同分类的架构（技术架构、产品架构、算法架构、云计算架构、解决方案架构、业务架构）<br>todo 这些模式怎么划分？</p><p>软件设计模式？区别？<br>todo：自己的认识和总结？</p><h3 id="3-1-整体架构模式"><a href="#3-1-整体架构模式" class="headerlink" title="3.1 整体架构模式"></a>3.1 整体架构模式</h3><p>整体架构模式的目的是： 确保企业信息系统能够支持企业的战略目标，同时保持灵活性、可扩展性和可维护性。</p><p>整体架构模式通常包括以下几个关键组成部分：</p><ol><li>业务架构：定义企业的业务流程、组成结构和业务策略，以支持企业目标</li><li>应用架构：定义企业应用系统的结构和交互方式，包括应用的功能、接口和服务</li><li>数据架构：定义企业数据的组织、管理和访问方式，包括数据模型、数据存储和数据交换</li><li>技术架构：定义支持企业信息系统的安全策略和控制措施，以保护企业资产和数据</li><li>安全架构：定义企业信息系统的安全策略和控制措施，以保护企业资产和数据</li><li>集成架构：定义不同系统和组件之间的集成方式，以实现数据和流程的无缝流动</li></ol><p>整体架构模式还可以能包括 治理、风险管理、合规性和其他方面的考虑。 通过采用整体架构模式，企业可以确保其信息系统的设计和实施与企业战略保持一致，并且能够适应不断变化的业务需求和技术环境。</p><h2 id="4-分布式系统模式"><a href="#4-分布式系统模式" class="headerlink" title="4. 分布式系统模式"></a>4. 分布式系统模式</h2><p>架构模式 相比分布式系统模式，是一个更广泛的概念，不仅适用于分布式系统，也适用于单体系统。 架构模式提供了一种高层次的抽象， 用于知道软件系统的组织和设计。</p><p>架构模式通常关注于系统的结构、组件、它们之间的关系以及它们如何交互。架构模式可以包括分布式系统模式，但它们也包括其他类型的模式，如：</p><ul><li>MVC（模型-视图-控制器）模式：用于分离用户界面和业务逻辑。</li><li>管道-过滤器模式：将数据流通过一系列过滤器进行处理。</li><li>分层架构模式：将系统分解为不同的逻辑层，每层负责不同的职责。</li></ul><p>总的来说，分布式系统模式是架构模式的一个子集，专注于解决分布式环境中特有的问题。而架构模式提供了更广泛的设计原则和实践，适用于各种类型的软件系统。</p><p>分布式系统模式都有哪些呢？</p><ul><li>代理模式：一个中间代理(代理服务器) 代表客户端与服务端进行通信，可以提供负载均衡、缓存、安全等功能</li><li>断路器模式：</li><li>命令查询责任分离(CQRS)：将读取(查询)操作和写入(命令)操作分离， 以提高性能和可伸缩性</li><li>事件溯源：</li><li>领导者选举：</li><li>发布者/订阅者：kafka等。 消息生产者、消息消费者 订阅.</li><li>分片模式：</li></ul><h2 id="5-难点"><a href="#5-难点" class="headerlink" title="5. 难点"></a>5. 难点</h2><ul><li>分布式一致性</li><li>分布式事务管理</li><li>网络通信与延迟</li><li>分布式故障处理</li><li>资源管理与调度</li><li>数据分布与管理</li><li>分布式锁与同步</li><li>性能优化</li><li>监控与调试</li><li>安全问题</li></ul><h3 id="5-1-网络通信与延迟"><a href="#5-1-网络通信与延迟" class="headerlink" title="5.1 网络通信与延迟"></a>5.1 网络通信与延迟</h3><p>在分布式架构体系设计中，如何避免网络延迟和开销？</p><p>对网络延迟赫尔开销的理解： 这是分布式系统固有的挑战之一，但为了获得诸多优势需要面对现实困难问题，需要在性能优化和系统特性之间权衡和取舍</p><ul><li>解决办法包括： 优化网络架构、数据压缩、缓存策略、就近访问、异步通信、协议优化、资源预分配、负载均衡策略 等</li></ul><p>合并请求、优化网络协议、智能路由(负载均衡)、流量控制、系统优化(减少不必要的通信)</p><p>如何评估网络延迟和开销问题呢？</p><ul><li>基准测试、监控工具、性能分析工具、日志分析、压力测试、分布式跟踪(系统)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单体架构早已成过去， 随着互联网和业务规模的发展，分布式系统已经随处可见，掌握分布式架构的知识体系 显得尤为重要.&lt;/p&gt;
&lt;p&gt;这里主要是对 分布式架构的认识总结. &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: red;&quot;&gt;分布式架构体系设计&lt;/span&gt; 是一
      
    
    </summary>
    
      <category term="平台工具" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"/>
    
      <category term="[1]架构设计" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="03.分布式架构体系_专题" scheme="https://quano.gitee.io/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/03-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E4%BD%93%E7%B3%BB-%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="架构设计" scheme="https://quano.gitee.io/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
</feed>
