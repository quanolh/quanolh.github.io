{"pages":[{"title":"About","date":"2024-01-28T09:38:34.160Z","path":"about/index.html","text":""},{"title":"Categories","date":"2024-01-28T09:38:34.160Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2024-01-28T09:38:34.161Z","path":"tags/index.html","text":""}],"posts":[{"title":"4.自编码在ECG场景异常检测","date":"2024-10-13T16:48:57.000Z","path":"wk/算法/006.算法工程/实践/004.自编码实现异常检测_ECG心电图/","text":"本文总结了基于自编码模型的异常检测在医疗健康领域ECG应用方式。通过对ECG的序列数据分析和深度学习发现异常的ECG数据，从而检测出可能存在的心脏疾病等健康问题。另外通过对本文的学习，可以了解异常检测、自编码的概念，自编码模型架构，以及自编码的异常检测模型如何实现和在实时场景如何应用。首先介绍下一些核心的概念: ECG 即心电图（Electrocardiogram）。ECG数据中的异常可能预示着心脏疾病等健康问题。对ECG数据进行异常检测可以帮助医生及时发现潜在的健康风险。 异常检测（也称为离群值分析）是数据挖掘中的一个步骤，它可以识别偏离数据集正常行为的数据点、事件、观察结果。异常检测也广泛应用于工业制造、信息安全、医疗健康等多个领域，而机器学习的方法正逐渐被用于实现异常检测的自动化，包括以下方式：监督学习方法(分类、回归)；无监督学习(聚类、Isolation Forest、PCA)；半监督(One-Class SVM、自编码器)；深度学习方法(DNN、GAN)。 1. 问题背景介绍实现方法： 构建Autoencoder 模型对正常的ECG数据进行训练，使得模型能够学习到正常 ECG信号的特征。 当输入新的ECG数据时， 如果重构后的信号与原始信号之间的差异较大， 则判断该数据为异常的ECG信号， 可能存在心脏疾病 等异常情况。 以下的项目 对ECG 数据进行预处理，例如 去除噪声、标准化等操作， 以提高模型的性能。 2. 基于自编码器的异常检测Autoencoder-based anomaly detection 2.1 什么是异常检测What is anomaly detection? Anomaly detection (aka outlier analysis) is a step in data mining that identifies data points, events, and/or observations that deviate from a dataset’s normal behavior. Anomalous data can indicate critical incidents, such as a technical glitch, or potential opportunities, for instance a change in consumer behavior. Machine learning is progressively being used to automate anomaly detection. 异常检测（也称为离群值分析）是数据挖掘中的一个步骤，它可以识别偏离数据集正常行为的数据点、事件和 / 或观察结果。异常数据可以指示关键事件，例如技术故障，或者潜在的机会，例如消费者行为的变化。机器学习正逐渐被用于实现异常检测的自动化。 2.2 基于自编码器的异常检测Autoencoder-based anomaly detection 自编码器是一种无监督学习的神经网络结构，在异常检测中，基于自编码器的方法通常利用自编码器学习正常数据的模式，然后通过比较新数据与自编码器重构数据的差异来检测异常。如果新数据的重构误差较大，则可能被判定为异常数据。 2.2.1 什么是自编码What is Autoencoder?自编码器尽可能地学习产生与输入相同的输出。通过这个学习过程，输入的表示可以在潜在空间中被有效地压缩。换句话说，它压缩了维度并将输入的表示存储在潜在空间中。 自编码器的目标是学习如何将输入数据编码为低维表示，然后再将这个低维表示解码回尽可能接近原始输入的数据。所以在训练自编码器时，输入数据既是期望的输出数据。(先encode,再decode) 2.2.2 自编码异常检测原理自编码异常检测原理 2.3 自编码异常检测应用场景Autoencoder-based anomaly detection 2.3.1 网络安全领域 网络入侵检测：网络系统中会产生大量的网络流量数据，包括数据包的源地址、目的地址、协议类型、流量大小等信息。自编码异常检测可以对正常的网络流量模式进行学习，当出现与正常模式不同的异常流量时，如大量的恶意扫描、DDoS 攻击等，自编码器能够检测到这种异常，及时发出警报并采取相应的防护措施，保护网络系统的安全。 用户行为异常检测：对于企业的内部网络系统或在线服务平台，自编码器可以分析用户的行为数据，如登录时间、访问的页面、操作行为等，检测出异常的用户行为，例如异常的频繁登录失败、异常的大量数据下载等，可能是用户账号被盗用或内部员工的违规操作等情况。 2.3.1 其它场景 工业制造领域： 设备故障预测与诊断 产品质量检测 金融领域 信用卡欺诈检测 金融市场异常检测 医疗健康领域 疾病早起预警 医疗影像异常检测 智慧交通领域 交通流量异常检测 车辆故障检测 能源领域 电力系统异常检测 能源消耗异常检测 2.3.2 在网络安全领域的应用案例自编码异常检测技术 网络入侵检测 基于堆叠自编码器的入侵检测： 结合深度学习模型的入侵检测： 用户行为异常检测 在线服务平台用户行为检测。 企业内部网络用户行为分析。 恶意软件检测 基于行为特征的恶意软件检测： 恶意软件变种检测 网络流量异常检测 异常流量模式识别： 流量特征异常检测： 推荐：异常流量模式识别、流量特征异常检测、结合深度学习模型的入侵检测、在线服务平台用户行为检测（todo:怎么做?） 2.3.4 未来发展趋势Autoencoder-based anomaly detection 与其它技术的融合： 与深度学习其它模型结合： 实时性和适应性的增强：实时检测、动态使用。 实时检测：随着网络攻击的速度和复杂性不断增加，对异常检测的实时性要求越来越高。未来，自编码异常检测技术将不断优化算法和模型结构，提高检测的速度和效率，以满足实时检测的需求。例如，采用硬件加速技术，如使用 GPU、FPGA 等硬件设备来加速自编码器的计算，减少检测的时间延迟；或者开发轻量级的自编码器模型，在保证检测准确性的前提下，降低模型的计算复杂度，提高实时性。 3. 项目介绍(模型实践)3.1 kaggle相关项目(医疗健康:ECG)kaggle项目:Dectecting Anomaly using Autoencoder编辑的:fork from Dectecting Anomaly using Autoencoder模型文件见：kaggle的以上项目链接 废弃:kaggle项目:ECG Anomaly Detection 3.2 数据集介绍此数据集包含患者的心电图读数。每一行对应一位患者的一次完整心电图。每一个心电图都由 140 个数据点（读数）组成。 第 0 至 139 列包含特定患者的心电图数据点。这些是浮点数。 标签显示心电图是正常还是异常。它是一个分类变量，值为 0 或 1。 3.2.1 Plot ECGPlot the normal/abnormal ECG. 3.2.2 Preprocessing数据预处理：归一化 123456789const preProcessing = (data0) =&gt; &#123; const data1 = data0.map(item =&gt; Number(item)) // 归一化 const min_val = -6.2808752; // _.min(data1); const max_val = 7.4021031; //_.max(data1); data1.forEach((element, index) =&gt; &#123; data0[index] = (element-min_val)/(max_val-min_val); &#125;);&#125; 关于数据归一化：归一化时， 取了原始数据集的最大值、最小值。 当然有多种取法： 整个数据集(单个特征单独取、所有特征一起取) 如果特征尺度差异很大，特征分别归一化可能更合适；如果特征尺度相对接近，一起归一化可能更简单有效。 训练时的归一化，在推理时怎么处理呢？ 记录训练时的统计信息(均值、标准差、最大最小值) ，用于推理时特征处理. 问题：如果把 异常的模式数据 作为正常 加到训练集中，会有什么影响？ 自编码器 对不同模式的 学习能力强不强，还是说适合指针对 某个范围内的 模式序列？ 3.3 模型训练3.3.1 模型定义12345678910111213141516171819202122class AnomalyDetector(Model): def __init__(self): super(AnomalyDetector, self).__init__() self.encoder = tf.keras.Sequential([ # 表示创建一个全连接层，也称为密集层。 有32个神经元。 layers.Dense(32, activation=&quot;relu&quot;), layers.Dense(16, activation=&quot;relu&quot;), layers.Dense(8, activation=&quot;relu&quot;)]) self.decoder = tf.keras.Sequential([ layers.Dense(16, activation=&quot;relu&quot;), layers.Dense(32, activation=&quot;relu&quot;), layers.Dense(140, activation=&quot;sigmoid&quot;)]) # 定义了call方法，这是模型的前向传播方法。当调用模型实例时，这个方法会被自动调用。 def call(self, x): encoded = self.encoder(x) decoded = self.decoder(encoded) return decodedautoencoder = AnomalyDetector()# 指定了优化器为Adam优化器；指定了损失函数为平均绝对误差（Mean Absolute Error，MAE）autoencoder.compile(optimizer=&#x27;adam&#x27;, loss=&#x27;mae&#x27;) encoder 是一个由三层全连接层组成的神经网络。每层的神经元数量分别为 32、16 和 8，激活函数均为relu。这个编码器将输入数据压缩成低维表示。decoder 同样是一个由三层全连接层组成的神经网络。每层的神经元数量分别为 16、32 和 140，激活函数为relu和sigmoid。这个解码器将低维表示解码回原始数据的形状。 输入数据维度与神经元之间关系：1.连接方式：如果是一个全连接层，输入数据的每个特征(维度)都会连接到该层的每个神经元. 输入数据维度n,m个神经元，则总共有n*m个连接2.神经元数量对模型的影响：表达能力、过拟合风险 选择合适的神经元数量 关于模型输出：依据自编码器的工作原理，解码器处理后，最终的输出为一个向量，其维度与输入数据一致。以尽量接近地还原原始输入。问题：那怎么用于实际场景 判断当前数据是否异常呢(怎么分类)? 计算2个张量之间的差异(使用 平均绝对误差MAE方法)，详见模型测试(Test model) encoder,decoder架构在深度学习模型中的定位? 为什么是三层的网络. 3.3.2 模型训练The autoencoder is trained using only regular ECGs, but evaluated using the full test set. 12345678history = autoencoder.fit(normal_train_data, normal_train_data, epochs=20, batch_size=512, validation_data=(test_data, test_data), shuffle=True)# 两个参数都是 normal_train_data 的原因? (先编码为低维表示,再解码回尽可能接近原始输入的数据,因此)输入数据既是期望的输出数据。# - 第一个normal_train_data是输入到自编码器的原始数据.# - 第二个normal_train_data是自编码器应该学习去重构的目标数据。由于自编码器的目的就是尽可能地重构输入数据. 3.3.3 模型保存1234# 保存整个模型autoencoder.save(&#x27;/kaggle/working/my_autoencoder_model&#x27;)# 或者只保存模型的权重autoencoder.save_weights(&#x27;/kaggle/working/my_autoencoder_weights.h5&#x27;) 3.3.4 plot modellossIf the reconstruction error is greater than one standard deviation from the normal training example, classify the ECG as abnormal. First, let’s plot the normal ECG of the training set, the reconstruction after being encoded and decoded by the autoencoder, and the reconstruction error. 3.3.5 Test model分别用 normal data 和 abnormal data 进行测试. 1234567# 推理（single_data 为一个 tf.Tensorsingle_data = normal_train_data[0]reconstructed_data = autoencoder.predict(np.expand_dims(single_data, axis=0))print(reconstructed_data)# 将解码后的张量 计算残差, 然后设一个阈值。# 阈值的获取 通过 测试 正常、异常数据集的分布。 3.3.6 模型加载和推理12345678910111213141516171819202122import tensorflow as tfmodel_path = &#x27;/home/tensor/quano/tensorflow_project/autoencoder_model&#x27;# 加载保存的模型loaded_autoencoder = tf.keras.models.load_model(model_path)# 推理import numpy as np# 示例输入数据input_data = np.array([0.5703046609377435,0.46561659035884023,0.29058116682096913,0.17791583430341332,0.09538919607875133,0.08467857469305494,0.2019510401474509,0.3163002239066622,0.337320325941027,0.414248838646481,0.4707059485726145,0.4691904978026605,0.4776775491926345,0.48004090308321257,0.47027246326919925,0.4729926787942067,0.4791714871023365,0.4802746855193069,0.46928869645287685,0.4610686345968992,0.46148039363623056,0.4465829036650596,0.45325327885669453,0.4561009344727237,0.44896180387861906,0.4432531994880092,0.43402174656668135,0.4430723455872177,0.4325052631268151,0.43014902464619126,0.4145465801111444,0.41206530598678215,0.4042027816414794,0.4105454307414929,0.4082913235344385,0.4034299396645247,0.39648476384706394,0.393320447639678,0.3915881544590333,0.39603877907195106,0.4074695404581618,0.4053117945820319,0.4173487887501802,0.4162455852173646,0.42334117857952025,0.4459063725914117,0.4455184110026689,0.44474098888251545,0.44404327967106405,0.4567321697060647,0.45217464629027443,0.45325041515267184,0.460829305634432,0.4669593432008878,0.46631943865612946,0.4743283178341371,0.46297092117729954,0.47388949889659626,0.4678889792582658,0.46734479729460654,0.48026674134241665,0.48439838203938396,0.48574668791223624,0.48985567856962836,0.4931734825597144,0.48830411577865324,0.49913936646380563,0.5057091963669927,0.5078240970388735,0.513230286274736,0.5211992662445427,0.5149918325895467,0.5199009290250793,0.5074853718068091,0.5113434097896654,0.5092939451639706,0.5073481524121105,0.5110537944798174,0.5096124087253724,0.49639560197212335,0.49456538201189726,0.5014910057995196,0.5063671130721592,0.5020293695854213,0.5007152441365781,0.4958237410929754,0.48436235333355754,0.4914246074628358,0.48253574954511186,0.4772388391495147,0.4755063515667492,0.47530029920459643,0.48763381361205554,0.47761297699346644,0.4745832345579325,0.47575447225550305,0.47009120521663034,0.45409669348083376,0.4687486393221862,0.4767007399258976,0.4795878650191238,0.47514804507144476,0.4761949406877303,0.4856189189454463,0.4876376366101524,0.49962776744299886,0.5284430101010977,0.5431970757419092,0.5495933513246893,0.5488369809078774,0.5231477513926921,0.4934438615604616,0.4988147587722185,0.5099680323252431,0.5161331652480952,0.4907889556471781,0.466802485537816,0.43299440444190435,0.41644001145569315,0.4182245147607959,0.43140410154710257,0.4321411603788044,0.42124117378743486,0.42373569210440104,0.42885276080573775,0.43089887674527705,0.43537636466177837,0.4391244324344211,0.43714183556075653,0.44534281180581864,0.45330930781348977,0.4882133636066645,0.5786804690028633,0.5858615883356332,0.5959517819304003,0.5952476516022831,0.5700759388034695,0.4850423339485966,0.4233501875830645,0.4759834370270104])tensor = tf.convert_to_tensor(input_data)print(tensor)print(tf.shape(tensor))# 进行推理reconstructed_data = loaded_autoencoder.predict(np.expand_dims(tensor, axis=0))print(reconstructed_data)# 计算MAE：平均绝对误差.train_loss_0 = tf.keras.losses.mae(reconstructed_data, tensor)print(train_loss_0.numpy()) 查看tensorflow模型结构12saved_model_cli show --dir /Users/-/Downloads/my_autoencoder_model --tag_set serve --signature_def serving_default 4.关于异常检测关于异常检测，首先 从数据类型角度，异常检测可以基于以下几种类型的数据： 数值类型(非时间序列)、序列类、图像类、文本类.而图像和文本类在安全领域更多的是存在于网络舆情、内容类风控场景，另外其它领域包括医学影响等场景。 所以安全领域(流量、反作弊、交易、营销等场景)，我们更多的是基于 数值类、序列类数据。那从识别的算法角度，主要有以下几类：机器学习类(孤立森林、SVM、xgb)； 深度学习算法(自编码器、长短期记忆网络)；统计方法(正态分布)；聚类等.另外，除了安全领域的异常检测，其它一些场景的基于序列类的异常检测都可以基于自编码器和以下算法去做.这些方法的优缺点如下(AD指对anomaly detection的适用性)，其中深度学习算法包括：Autoencoder、LSTM或RNN、GAN、CNN， .table-container table tr:nth-child(2), table tr:nth-child(4) { background-color: #eef5f8; } 算法 优点 缺点 序列数据支持 可解释性 计算资源要求 数据适应性 数据质量要求 AD XGBoost 高效性：训练和推理速度快；灵活性好；可解释性好 对序列数据的特殊性考虑不足； 特征工程的依赖性(模型性能好很大程度上依赖特征工程的质量)；超参数调整复杂 较差：无法有效处理时间依赖关系和顺序信息 优：可以通过特征重要性分析和理解模型决策过程 适中: 树集成算法，可并行计算, 效率高 支持各种类型数据(数值、文本等);适合结构化数据 较灵活: 对异常值和噪声有一定的容忍度。通过集成多个弱学习器，在一定程度上可以减轻个别数据点的不良影响；同时支持缺失值处理策略。 适用性好 Autoencoder 强大的特征提取能力；无监督学习 训练难度较大； 解释性较差；信息丢失问题；对异常值敏感。异常数据比例较低时,效果可能不佳 较好：对复杂时间依赖关系的捕获有限 较差：学习到的低维表示通常难以直观解释，难以理解模型是如何识别序列数据中的模式的 适中：结构相对简单，不需要特别强大的计算能力 较好：序列数据、图像数据、文本数据等都可以支持，在不同领域发挥作用 要求较低：算法具有一定的鲁棒性，能够从含有噪声的数据中学习潜在特征表示。无监督对数据的标注要求不高；即使存在异常值或缺失值，也可能学到相对稳定的特征表示 很好 LSTM 处理序列数据(专业的,能够捕捉长期依赖关系和时间动态性)；适应性强；学习能力强 计算复杂度高；超参数调整困难；对数据的质量要求高 优：专门设计用于处理序列数据 较弱：通过一些方法可以提升模型理解和解释能力 较高：内部结构复杂，包含多个门控单元 较好：支持时间序列、文本数据、音频数据 较高：受到数据量和数据分布的影响，如果量小或者分布不均衡，可能会导致过拟合或欠拟合；噪声过大影响性能 一般 Isolation Forest（隔离森林） 基于决策树的无监督算法，尤其适用于异常检测任务；速度快 对局部异常不敏感、不适合高噪声数据、数据不平衡的性能下降 - - 较低：树模型,并行计算优势、内存需求量低 - - 很好 GAN 类似自编码,学习到正常流量的模式;学习能力好 训练不稳定、模式坍塌、可解释性差 较高：数据多样性要求较高、数据准确性 多模态 适用于人机识别等场景 GRU（门控循环单元） Seq2Seq 模型 能够处理长期依赖，扩展性好； 训练难度大，对数据质量要求高，推理速度相对较慢 较高：推理速度相对较慢 较高：需要大量高质量标注数据来训练；存在噪音、错误标注或者数据不均匀等，影响模型性能 Hidden Markov Model（HMM，隐马尔可夫模型） LOF（局部离群因子） One-Class SVM 识别的效果往往依赖于特征工程，选择一些好的特征尤为重要. 例如：在滑块的人机识别场景中，滑动速度的变化、滑块的停顿和抖动、路径中的微小偏移、点击和按下的时间等 资料:基于深度学习的异常检测nvidia异常检测课程 企业安全领域异常检测，算法包括xgboost、自编码器、GAN。 实施和比较 有监督和无监督学习技术。 [很好的课程] NVIDIA深度学习培训中心 其实有很多官方的资料都很先进，重要的是如何快速吸收，达到目的。如何有效的获取信息(比如找到关键的高质量的内容)。 第二点是 也是重要的是如何应用这些新技术和新知识，我理解是一个怎么提出问题的事。 关于人机识别方法包括：基于时间的序列模型、结合多模态数据、生成对抗网络用于异常轨迹检测。 人类行为中的随机性和不可预测性： 尽管机器可以通过高度模拟来复制人类的轨迹，但是人类操作中存在某种不可预测性和随机性。 这种特征很难被自动化脚本精确模拟。 通过引入如熵、轨迹的分布差异等统计指标，可以进一步捕捉人类行为的随机特征。 实时性和多步骤验证：在一些高安全性系统中，不仅仅依赖于滑块轨迹的单次验证，而是通过多步骤的验证，例如： 多次滑块验证：用户必须多次完成滑块验证，机器则难以在多次操作中模拟出相似程度高的人类操作。 动态生成的滑块路径：每次生成不同的滑块路径或挑战，使机器难以提前学习和模拟。 总结当机器能够高度模拟人类的滑块轨迹时，单纯依赖简单的轨迹特征难以有效区分人机行为。为应对这种挑战，需要结合以下多种方法： 提取更多的细微行为特征，如速度变化、停顿、抖动等。 使用基于时间序列的深度学习模型（如 LSTM），捕捉轨迹中的时序依赖性。 引入多模态数据，例如用户的其他行为特征或设备环境信息。 使用 GAN 等高级模型进行异常检测。 多步骤验证机制增加机器模仿的复杂度。 通过综合使用这些方法，可以显著提高对高级模拟机器行为的识别能力。 // CSV 数据 const csvData = `-0.11252183,-2.8272038,-3.7738969,-4.3497511,-4.376041,-3.4749863,-2.1814082,-1.8182865,-1.2505219,-0.47749208,-0.36380791,-0.49195659,-0.42185509,-0.30920086,-0.4959387,-0.34211867,-0.35533627,-0.36791303,-0.31650279,-0.41237405,-0.47167181,-0.41345783,-0.36461703,-0.44929829,-0.47141866,-0.42477658,-0.46251673,-0.55247236,-0.47537519,-0.6942,-0.7018681,-0.59381178,-0.66068415,-0.71383066,-0.76980688,-0.67228161,-0.65367605,-0.63940562,-0.55930228,-0.59167032,-0.49322332,-0.46305183,-0.30164382,-0.23273401,-0.12505488,-0.15394314,-0.024357404,-0.065608758,0.034999258,0.061935219,0.07119542,0.12392505,0.10312371,0.22522849,0.12868305,0.30248315,0.25727621,0.19635161,0.17938297,0.24472863,0.34121687,0.32820441,0.40604169,0.44660507,0.42406823,0.48151204,0.4778438,0.62408259,0.57458456,0.59801319,0.5645919,0.607979,0.62063457,0.65625291,0.68474806,0.69427284,0.66558377,0.57579577,0.63813479,0.61491695,0.56908343,0.46857572,0.44281777,0.46827436,0.43249295,0.40795792,0.41862256,0.36253075,0.41095901,0.47166633,0.37216676,0.33787543,0.22140511,0.27399747,0.29866408,0.26356357,0.34256352,0.41950529,0.58660736,0.86062387,1.1733446,1.2581791,1.4337887,1.7005334,1.9990431,2.1253411,1.9932907,1.9322463,1.7974367,1.5222839,1.2511679,0.99873034,0.48372242,0.023132292,-0.19491383,-0.22091729,-0.24373668,-0.25469462,-0.29113555,-0.25649034,-0.22787425,-0.32242276,-0.28928586,-0.31816951,-0.36365359,-0.39345584,-0.26641886,-0.25682316,-0.28869399,-0.16233755,0.16034772,0.79216787,0.93354122,0.79695779,0.57862066,0.2577399,0.22807718,0.12343082,0.92528624,0.19313742,1.0 -1.1008778,-3.9968398,-4.2858426,-4.5065789,-4.0223767,-3.2343676,-1.5661258,-0.99225766,-0.75467971,0.042321173,0.14895093,0.18352707,0.29487608,0.19023267,0.235575,0.25348712,0.2217424,0.050233259,0.17804214,0.13956318,0.046794433,0.043007139,0.10654432,0.012654003,0.0039948539,0.045724179,-0.045999362,-0.072666959,-0.071077909,-0.15386649,-0.22725443,-0.2492697,-0.25348935,-0.33283516,-0.26432996,-0.34582525,-0.31078107,-0.33415978,-0.30617791,-0.17456252,-0.20616017,-0.22447967,-0.048683931,-0.019621159,0.094805186,0.11678639,0.18518592,0.23052577,0.13802707,0.24442554,0.27169477,0.25900331,0.26920166,0.12706463,0.20207339,0.25598343,0.15311526,0.21021583,0.19108187,0.19092702,0.21051006,0.20710764,0.20488835,0.20086474,0.34691963,0.3480019,0.25453726,0.33197465,0.3566903,0.34992982,0.43037963,0.46750163,0.48606309,0.4031884,0.47895569,0.39739177,0.46412003,0.45179539,0.36136121,0.3798309,0.34278528,0.39910656,0.3875084,0.25570346,0.28403408,0.28499257,0.25010809,0.17303626,0.14942257,0.141685,0.22226096,0.17284705,0.15077932,0.17656601,0.28094204,0.48993901,0.66088884,0.8931933,1.0269972,1.2023937,1.5574096,1.8084277,2.1643459,2.0707467,1.9036136,1.7644552,1.5077694,1.2934277,0.89456215,0.57801575,0.24434305,-0.28644345,-0.51588134,-0.73270694,-0.83246547,-0.80331806,-0.83625248,-0.77786456,-0.77475301,-0.73340394,-0.72138631,-0.83209517,-0.71198159,-0.7518673,-0.7577196,-0.85311967,-0.76698841,-0.68816064,-0.51992349,0.039406169,0.56032676,0.53835583,0.65688079,0.78748958,0.72404623,0.55578372,0.47633335,0.77381971,1.1196209,-1.4362499,1.0 -0.56708802,-2.5934502,-3.8742297,-4.5840949,-4.1874487,-3.1514617,-1.7429402,-1.4906585,-1.1835803,-0.39422869,-0.28289676,-0.35692576,-0.28729745,-0.3994889,-0.47324409,-0.37904758,-0.39903903,-0.17859449,-0.33952226,-0.49844722,-0.33725108,-0.42547978,-0.42395228,-0.46317045,-0.49325315,-0.54974899,-0.52983109,-0.53093478,-0.5023649,-0.41736768,-0.52634573,-0.47100496,-0.67678428,-0.89861193,-0.61057104,-0.5301643,-0.76567438,-0.58193724,-0.53784761,-0.55638598,-0.43802347,-0.43624802,-0.40011375,-0.13498651,-0.23934677,-0.12024439,-0.0019714041,0.28500048,0.31564573,0.10736401,0.10952148,0.15807843,0.29189779,0.2612945,0.18840714,0.14065136,0.26336542,0.28720706,0.31431725,0.17794238,0.13829008,0.32106868,0.45816774,0.25191615,0.26135293,0.27748753,0.29879325,0.45907535,0.41914662,0.52050892,0.53776119,0.60321071,0.47563399,0.52169287,0.73524831,0.72954106,0.71852334,0.49843316,0.54544098,0.60482668,0.52129639,0.39438062,0.40502023,0.59756305,0.53113004,0.3776509,0.46770093,0.45756933,0.34111609,0.40791318,0.45912699,0.40393661,0.2981912,0.46110053,0.6646591,0.58775722,0.70132474,0.91720459,1.2479873,1.5055679,1.6401054,1.8109878,2.1853978,2.2629849,2.0529202,1.890488,1.793033,1.5647844,1.2346189,0.90030201,0.55195714,0.25822163,-0.128587,-0.092585287,-0.16860627,-0.4959888,-0.39503448,-0.32823831,-0.44813804,-0.26823009,-0.45641485,-0.35786694,-0.31750833,-0.43411223,-0.54920348,-0.32461549,-0.26808235,-0.22038421,-0.11742905,0.61405916,1.2848254,0.88607336,0.5314524,0.31137684,-0.021918959,-0.71368344,-0.53219671,0.32109663,0.90422673,-0.42179659,1.0 0.80023202,-0.87425189,-2.3847613,-3.9732924,-4.3382241,-3.8024222,-2.5345096,-1.7834233,-1.5944504,-0.75319899,-0.29810663,-0.42892797,-0.49135079,-0.36130424,-0.33929554,-0.32495154,-0.29011333,-0.36305106,-0.52568383,-0.59742301,-0.57552317,-0.56750306,-0.50455484,-0.61840616,-0.68281354,-0.74384873,-0.81558784,-0.82690193,-0.78237433,-0.92946196,-0.99967167,-1.0609695,-1.0078773,-1.0287349,-1.1226293,-1.0286499,-1.0465146,-1.0633724,-1.1224228,-0.98324201,-0.85586525,-0.791266,-0.58875425,-0.51830558,-0.39729838,-0.35433285,-0.20742492,-0.088266017,-0.16873361,-0.067592085,-0.032772281,0.071899471,0.081485179,0.067225257,0.13271969,0.070240933,0.10043175,0.15041753,0.10988654,0.14886026,0.20874762,0.22823622,0.27366422,0.29952441,0.32706231,0.24231412,0.38610522,0.41908722,0.43971785,0.48895381,0.54171511,0.57386922,0.63355476,0.41167103,0.44091729,0.5887054,0.53086502,0.55896452,0.60687423,0.61472869,0.53777156,0.59929423,0.64046303,0.56839906,0.54471048,0.55795891,0.53776149,0.47229245,0.46659561,0.63441689,0.42517487,0.42077721,0.44052297,0.36102802,0.35929943,0.32136632,0.42132549,0.50512195,0.67748866,0.90869284,0.98223031,1.1553635,1.3362539,1.6275344,1.7175939,1.6964865,1.7416856,1.674078,1.5469278,1.3317385,1.1101682,0.92221037,0.52177665,0.15485176,-0.1238607,-0.20299778,-0.24795602,-0.21912177,-0.2146952,-0.31921472,-0.19859713,-0.15161786,-0.12959259,-0.074938934,-0.19680704,-0.17479482,-0.20883265,-0.21075375,-0.10048537,0.19744621,0.966606,1.1488838,0.95843425,1.0590254,1.3716823,1.2773918,0.96030393,0.97101956,1.6143924,1.4214563,1.0 1.5225911,0.090146502,-2.3048594,-3.8464567,-4.9756669,-5.1222201,-3.5175835,-1.9529461,-1.6653285,-0.61271733,0.15978408,0.1390482,0.25517634,0.28751406,0.15385271,0.19107336,0.27561786,0.2907129,0.14039185,0.027916922,0.033551012,-0.17029102,-0.079020421,-0.040056011,-0.13774058,-0.21585129,-0.34216506,-0.21832591,-0.36291507,-0.39515543,-0.60864334,-0.64259456,-0.75017731,-0.66339098,-0.69423388,-0.76075209,-0.85578278,-0.89908005,-0.92278298,-0.86188518,-0.70547832,-0.73500271,-0.57030078,-0.58539589,-0.48830704,-0.17954798,-0.18485645,-0.1954939,-0.20504064,-0.031418833,-0.093779327,-0.079059605,0.024642189,0.10851936,0.09976356,0.20934888,0.053945868,0.20334453,0.12123955,0.11379352,0.2906042,0.34713735,0.36558619,0.42180942,0.46720686,0.40057942,0.54883792,0.63873276,0.6676709,0.74164367,0.85068305,0.76574687,0.83291793,0.66303613,0.71582558,0.6877828,0.66115856,0.71186278,0.69214033,0.51129505,0.48625219,0.58101535,0.64773502,0.58838177,0.57040062,0.50347029,0.34664437,0.44327704,0.32165099,0.24917348,0.22546789,0.22264848,0.39140769,0.2542928,0.2128369,0.22886292,0.15137256,-0.067479997,0.13300226,0.24181068,0.28131515,0.22056519,0.23488984,0.36383793,0.39146,0.5555207,0.94979904,1.1516786,1.2391987,1.2288493,0.87734413,0.47090645,0.54439632,0.69700632,0.7813637,0.43457943,0.10637308,-0.35622216,-0.58273556,-0.55831824,-0.37798224,-0.36789708,-0.51704136,-0.48290892,-0.41289218,-0.38489522,-0.32362985,-0.27234512,-0.29947295,-0.18725917,-0.078253778,0.39933766,1.6371971,1.7354562,1.8735201,1.8638855,1.5194615,0.35594853,-0.48818377,0.23199584,1.0 -0.032245388,-0.54504988,-0.82233951,-1.6050845,-1.8057748,-2.0080666,-2.2339748,-2.191458,-2.0580713,-1.8808487,-1.5980847,-1.0734666,-0.60601763,-0.40062774,-0.30974032,-0.27599315,-0.16190422,0.10850521,0.30977527,0.41252896,0.53814803,0.54247379,0.42785112,0.37815942,0.36188738,0.37976272,0.45375055,0.5483923,0.67794169,0.66825595,0.4131611,0.22767328,0.27982432,0.35898388,0.40398305,0.43035215,0.40867432,0.42049766,0.42107193,0.32161806,0.22971489,0.20655718,0.22594547,0.34068889,0.44956444,0.40496562,0.30956912,0.24239092,0.17865089,0.18501601,0.33981574,0.51298385,0.47234082,0.24335581,0.082250646,0.041823061,0.04329214,0.16040296,0.26450173,0.21102713,0.22029886,0.31735332,0.31367233,0.31088657,0.38498299,0.36784817,0.2984939,0.31753582,0.32696731,0.29884615,0.3674174,0.47894802,0.51140793,0.49840732,0.49130584,0.50073549,0.49360933,0.53874692,0.63148766,0.57849716,0.53415701,0.6395139,0.67505033,0.5978203,0.48834268,0.39688329,0.42172264,0.51001168,0.55461096,0.59630145,0.57140413,0.45837937,0.44734872,0.50965739,0.53081508,0.51322441,0.46546407,0.49637166,0.60659122,0.66603659,0.62919292,0.54553078,0.54543892,0.60964795,0.59777943,0.57261331,0.60459362,0.57085274,0.48861488,0.48893631,0.51936437,0.55129762,0.61166333,0.61427183,0.55032934,0.48756962,0.41517402,0.39897417,0.53464846,0.66442392,0.63454566,0.56613755,0.47991327,0.29107729,0.10251066,0.018347409,0.043036237,0.038287591,-0.168029,-0.44347067,-0.90642467,-1.6213757,-2.3290905,-3.0498941,-3.6204134,-4.2104818,-4.043785,-3.0518127,-2.8068663,-0.87966639,0.0`; const preProcessing = (data0) => { const data1 = data0.map(item => Number(item)) // 归一化 const min_val = -6.2808752; // _.min(data1); const max_val = 7.4021031; //_.max(data1); data1.forEach((element, index) => { data0[index] = (element-min_val)/(max_val-min_val); }); } const display = (data0, normal, title) => { // 复制数组 const dataArray = Array.from(data0); const label = dataArray.pop()// 最后一个标签元素 preProcessing(dataArray) console.log(JSON.stringify(dataArray)); // 图形绘制. const width = 400; const height = 300; const margin = { top: 20, right: 20, bottom: 30, left: 40 }; const svg = d3.select(\"#chart\") .append(\"svg\") .attr(\"width\", width + margin.left + margin.right) .attr(\"height\", height + margin.top + margin.bottom); const g = svg.append(\"g\") .attr(\"transform\", `translate(${margin.left},${margin.top})`); // 假设数据点的 x 值为索引 const xScale = d3.scaleLinear() .domain([0, dataArray.length - 1]) .range([0, width]); const yScale = d3.scaleLinear() .domain([0, d3.max(dataArray)]) .range([height, 0]); const lineGenerator = d3.line() .x((d, i) => xScale(i)) .y(d => yScale(d)); g.append(\"path\") .datum(dataArray) .attr(\"d\", lineGenerator) .attr(\"stroke\", normal? \"steelblue\" : \"red\") .attr(\"stroke-width\", 2) .attr(\"fill\", \"none\"); // X 轴 g.append(\"g\") .attr(\"transform\", `translate(0,${height})`) .call(d3.axisBottom(xScale)); const yAxis = d3.axisLeft(yScale).ticks(5).tickFormat(d => d.toFixed(1)); // Y 轴 g.append(\"g\") .call(yAxis); // 添加边框 g.append(\"rect\") .attr(\"width\", width) .attr(\"height\", height) .attr(\"stroke\", \"black\") .attr(\"stroke-width\", 0.5) .attr(\"fill\", \"none\"); // 添加标题 svg.append(\"text\") .attr(\"x\", width / 2) .attr(\"y\", margin.top / 2) .style(\"text-anchor\", \"middle\") .text(title); // 以更细粒度的 y 轴间隔创建田字格 const numCellsX = 7; // x 轴方向格子数量 const numCellsY = 6; // y 轴方向格子数量 const cellWidth = width / numCellsX; const cellHeight = height / numCellsY; for (let i = 0; i < numCellsY; i++) { for (let j = 0; j < numCellsX; j++) { g.append(\"rect\") .attr(\"x\", j * cellWidth) .attr(\"y\", i * cellHeight) .attr(\"width\", cellWidth) .attr(\"height\", cellHeight) .attr(\"stroke\", \"gray\") .attr(\"stroke-width\", 0.5) .attr(\"stroke-opacity\", 0.4) .attr(\"fill\", \"none\"); } } } // 设置一个标志变量，决定是否使用自增数字作为表头 const useNumericHeaders = true; // 使用 PapaParse 解析 CSV 数据 Papa.parse(csvData, { complete: function (results) { const data = results.data; display(data[4], true, \"A Normal ECG(5)\") display(data[5], false, \"An Anomalous ECG(6)\") let table = ''; table += ''; // 第一行第一列为空. table += ``; if (useNumericHeaders) { // 使用从 0 开始自增的数字作为表头 for (let i = 0; i < Object.keys(data[0]).length; i++) { table += `${i}`; } } else { // 使用第一行数据作为表头 const headerRow = data[0]; for (const value of Object.values(headerRow)) { table += `${value}`; } } table += ''; table += ''; // 创建表格内容，从第二行开始 const start = useNumericHeaders? 0 : 1; for (let i = start; i < data.length; i++) { const row = data[i]; table += `${i+1}`; for (const value of Object.values(row)) { table += `${value}`; } table += ''; } table += ''; // 将表格插入页面 const tableContainer = document.getElementById('csv-table'); tableContainer.innerHTML = table; // 判断表格宽度是否超过一定值，如果是则添加滚动条 const tableElement = tableContainer.querySelector('table'); const maxWidth = 500; // 设置一个最大宽度，超过这个宽度就添加滚动条 if (tableElement.offsetWidth > maxWidth) { tableContainer.style.overflowX = 'auto'; } } });","tags":[{"name":"python","slug":"python","permalink":"https://wiki.quartz.ren/tags/python/"},{"name":"anomaly","slug":"anomaly","permalink":"https://wiki.quartz.ren/tags/anomaly/"},{"name":"security","slug":"security","permalink":"https://wiki.quartz.ren/tags/security/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"006.算法工程","slug":"算法/006-算法工程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"},{"name":"实践","slug":"算法/006-算法工程/实践","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/%E5%AE%9E%E8%B7%B5/"}]},{"title":"C++开发环境构建","date":"2024-09-29T17:13:34.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/[重点]开发环境/C++开发环境构建/","text":"C++的开发环境，目前常用的IDE是vscode。 macOS安装 开发工具(例如xcode、commondlinetools) 之后，其包含了c++的标准库。通过环境变量等方法正确的引入标准库以及三方库 即可实现 基于vscode开发 c++的项目。 然而，环境搭建的过程中，重要的是： 对于编译器、构建工具、库及其管理 的理解、对C++版本的理解。 如何使用 vscode、clang++、make、cmake 开发和构建 c++的项目；如何debug调试；以及理解这些工具和过程的原理。 可能会遇到哪些常见的问题？ 怎么解决、以及怎么持续深入学习c++的项目。 1.编译器常见的编译器有：GCC、Clang、Microsoft Visual C++等等。clang更加现代化、模块化，编译速度更快，适合大型项目 许多编译器即支持c也支持c++，但对于c++的一些新特性和复杂的语法结构，编译器的优化和处理可能有所不同。 1.1 编译和运行最简单的C程序123456# include&lt;stdio.h&gt;int main()&#123; printf(&quot;This is a C program.\\n&quot;); return 0;&#125; 编译与运行12345gcc helloworld.c -o helloworld# 或者 clang example.c -o example./helloworld# 输出结果This is a C program. 2. c++版本/clang版本不同来源版本的clang可能存在差异mac系统自带的Clang编译器不支持OpenMP，需要手动安装Clang(基于llvm)，即 brew install llvm.然后配置环境变量，后续所有开发场景都可以使用此版本的clang和基于llvm的工具。 clang++版本 这些编译工具(clang/g++) 路径在xcode或者commondlinetools 路径下. 1.怎么理解c++的版本？ 2.clang的版本和c++版本的关系？ 3.clang版本的区别？和make有兼容性问题吗？ 4.怎么查看c++的库路径和版本信息？mac系统库路径一般在：/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib 123libc++.1.tbdlibc++.tbdlibc++abi.tbd .tbd 是苹果操作系统的文件格式，用于描述动态库的符号信息。以上3个是C++标准库的实现。linux中呢？ 3.库和库管理c++相关的库 一般在开发工具的环境路径/目录(/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib)、以及 系统的基础lib路径(/usr/lib、/usr/local/lib/)下。 例如mac中，在xcode、Command Line Tools 工具的路径下。开发环境、运行时环境项目 会从这些路径下找 需要的库内容。 「c++主要涉及 头文件(include)、库文件(lib)路径」 3.1 库c++的库. 3.1.1 C++标准库提供了一些列重要的模块。（容器、算法、迭代器、字符串、输入输出、智能指针、线程、日期和时间、类型特性、元编程、异常处理等） 3.1.2 STL和BoostSTL 和 Boost 是 C++ 开发中两个重要的库。STL（标准模板库）是 C++ 标准库的一部分Boost 是一个大型的开源 C++ 库集合，它提供了许多扩展功能和库，这些库在功能和性能上都经过了严格的测试和验证。Boost 的设计目的是为 C++ 开发者提供可重用的组件，许多 Boost 库的设计理念和接口最终被采纳到 C++ 标准库中。 STL 是 C++ 开发的基础库，而 Boost 则是 C++ 开发的高级库，提供了更多扩展和增强功能。两者在 C++ 编程中各有其重要作用，Boost 库中的许多功能也为 C++ 标准库的演进做出了贡献。 3.2 库管理介绍下 通过环境变量 正确、方便的 引入开发环境/项目。另外介绍下 常见的安装的软件的 开发相关的库。 项目是如果找到 这些库的呢？以c++库和头文件为例： 当前目录、当前项目 编译时指定的头文件目录（有 -I -L 参数指定） 系统环境变量 CPLUS_INCLUDE_PATH 或 C_INCLUDE_PATH 指定的目录 gcc默认目录： /usr/include;/usr/local/include;等等.(各系统平台可能会有不同) 3.2.1 环境变量和java同理，要用这些 不同路径下的 库和头文件，可能会涉及 环境变量的配置。 或者ide环境的配置。主要目的是通过环境变量 正确、方便的 将需要的库引入开发环境/项目。(有些ide中直接配置即可，不用配置环境变量；但通过环境变量配置可能后续使用起来更方便些) 常见的库路径如下： 来源 说明 路径 CommandLineTools CommandLineTools /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include XCode XCode /Applications/Xcode.app/Contents/Developer/Platforms/ MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib 系统库 通常是系统自带的库文件(属于系统核心部分) /usr/lib/ 系统(手动安装) 类Unix系统(如macOS/Linux)中常用的目录，存放本地安装的库文件(手动或第三方软件安装) /usr/local/lib/ 本地头文件 类Unix系统(如macOS/Linux)中常用的目录，存放本地安装的库文件(手动或第三方软件安装) /usr/local/include/ 当手动安装或者下载的第三方的软件的路在别的指定路径下，需要在某个项目中使用时。 相关的库和头文件 路径可以通过 环境变量的配置引入项目。 例如： 123export CPATH=$CPATH:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/libexport C_INCLUDE_PATH=$C_INCLUDE_PATH:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/includeexport CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include 3.2.2 CommandLineTools和XCode这两个都是mac上的开发工具。 CommandLineTools 是轻量级的，主要提供了命令行开发工具； XCode是功能强大的集成开发环境(IDE).如果是iOS、macOS、watchOS和tvOS的开发，可以安装XCode； 其它情况，建议安装CommandLineTools即可(仅几百M) 类型 CommandLineTools XCode 安装包大小 几百M 几个GB，甚至10多GB 用途 主要提供命令行工具，如编译器(Clang、GCC等)、链接器、调试器(LLDB)和其他基本的开发工具 功能强大的集成开发环境(IDE)，代码编辑、调试、界面设计、版本控制等；模拟器、性能分析、测试等高级功能 使用场景 常用于 脚本编写、小型项目开发、自动化构建等 适合专业的IOS和macOS应用程序开发，以及需要图形界面设计和高级开发功能的项目 更新方式 通过命令行工具(如xcode-select —install) 通过Mac App Store进行更新，需要较长时间 一些c++的项目，需要的 三方库和头文件，可以通过引入 CommandLineTools 下的。 3.2.3 llvm和clang1.什么是LLVM？LLVM(Low Level Virtual Machine) 是一个开源的 编译器基础设施项目。 2.包含的工具集？ 包括Clang编译器，它是一个基于LLVM的C、C++和Objective-C 编译器。 LLDB调试器，用于调试程序。 其他工具如lli（LLVM解释器）、llvm-link（链接器）等 3.有什么特点和优势？ 可扩展性、性能优化、跨平台、开源和活跃的社区。 4.能做什么？ 编译器开发 代码优化 程序分析和调试 跨平台开发 工具和库(Clang、LLDB、Polly) 安装和查看1234567891011# mac默认的一般是 基于xcode中的。 建议自己安装brew install llvm# 查看brew info llvm# 配置环境变量export PATH=&quot;/usr/local/opt/llvm/bin:$PATH&quot;## 这样 clang也是基于llvm的。 而不是基于xcode的clang 15.0.0版本## 实质的 安装路径在：/usr/local/Cellar/llvm/ /usr/local/opt/llvm/ 是链接过去的## 不同版本的macOS系统，homebrew 安装这种三方工具的 路径不太一样(新版系统 在/opt/homebrew/...) 3.2.4 GCC和GDB重点：谈到 llvm和clang， 同样的介绍下 GCC和GDB。 clang是LLVM项目的一部分， 是一个开源的编译器前端。 而gcc 是GUN Compiler Collection的缩写，是一个成熟的开源编译器集合 使用 Clang 还是 GCC？如果 Clang 能够完全满足你的编译需求， 并且不依赖GCC特有的功能，那么可以仅使用clang。如果老项目基于GCC，可能需要同时使用gcc和clang。 GDB 类似 lldb 主要用于调试（生成调试信息）。 两者的比较：LLVM 和 Clang 在设计上较为现代，提供了优秀的错误和警告信息、更快的编译速度、更好的 C++ 标准支持和先进的静态分析工具。GCC 依然是一个成熟、稳定且功能强大的编译器，具有广泛的语言和平台支持，适合很多传统和生产环境。 4.构建构建工具 类似java的 maven，用于较大型项目的构建。常见的构建工具包括：make、cmake、bazel。 make是传统的构建工具，简单高效，适合小到中型项目、在Unix和类Unix系统上使用。 cmake是跨平台(win/linux/macOS/android等)的构建工具，广泛用于C和C++项目。 通过「CMakeLists.txt」描述项目构建过程。 4.1 makemake是个构建工具，类似于maven。Makefile定义了项目的依赖关系和构建规则。 1.发展背景和现状make起源于AT&amp;T贝尔实验室，当前由FSF维护， GUN项目提供make的GUN版本。（目前大多数开发环境和操作系统中使用的make实际上是指GUN make，简称make） 2.make的基本概念Makefile、目标、依赖、规则。 4.1.1 MakefileMakefile的基本结构 123456789101112131415161718192021# 变量定义 「定义了 (CC) 和编译选项 (CFLAGS)」CC = gccCFLAGS = -Wall -g# 目标规则myprogram: main.o foo.o $(CC) -o myprogram main.o foo.o## myprogram 是最终生成的可执行文件，它依赖于 main.o 和 foo.o。## 生成 myprogram 的命令是 $(CC) -o myprogram main.o foo.o。main.o: main.c $(CC) $(CFLAGS) -c main.c## main.o 是一个目标文件，它依赖于 main.c 源文件。生成 main.o 的命令是 $(CC) $(CFLAGS) -c main.c。foo.o: foo.c $(CC) $(CFLAGS) -c foo.c# 清理规则clean: rm -f myprogram main.o foo.o xgboost的Makefile解读 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# 变量定义 「定义了 (CC) 和编译选项 (CFLAGS)」CC = gccCFLAGS = -Wall -g# 目标规则myprogram: main.o foo.o $(CC) -o myprogram main.o foo.o## myprogram 是最终生成的可执行文件，它依赖于 main.o 和 foo.o。## 生成 myprogram 的命令是 $(CC) -o myprogram main.o foo.o。ALL_DEP = $(filter-out build/cli_main.o, $(ALL_OBJ)) $(LIB_DEP)# 这个函数调用从 $(ALL_OBJ) 中排除 build/cli_main.o 文件，返回剩余的对象文件列表。CLI_OBJ = build/cli_main.obuild/%.o: src/%.cc @mkdir -p $(@D) $(CXX) $(CFLAGS) -MM -MT build/$*.o $&lt; &gt;build/$*.d $(CXX) -c $(CFLAGS) $&lt; -o $@xgboost: $(CLI_OBJ) $(ALL_DEP) $(CXX) $(CFLAGS) -o $@ $(filter %.o %.a, $^) $(LDFLAGS)## 目标：xgboost 是我们要构建的目标，通常是一个可执行文件。## 依赖：$(CLI_OBJ) 和 $(ALL_DEP) 是构建 xgboost 所需的依赖文件或对象。## $(CLI_OBJ) 可能是编译生成的对象文件，而 $(ALL_DEP) 可能包括其他需要的文件（如库文件或额外的对象文件）。## $(CXX)：这是编译器变量，通常设置为 C++ 编译器，如 g++ 或 clang++。## $(CFLAGS)：这些是编译标志，通常用于设置编译器选项，如优化级别和调试信息。对于链接阶段，这个变量可能会被用来设置链接选项。## -o $@：$@ 是自动变量，表示规则中的目标，即 xgboost。-o 选项用于指定输出文件名。## $(filter %.o %.a, $^)：$^ 是自动变量，表示所有依赖文件的列表。$(filter %.o %.a, $^) 是一个函数，用于筛选出扩展名为 .o 和 .a 的文件。## 这个函数确保只有 .o 对象文件和 .a 库文件被传递给链接器。## $(LDFLAGS)：这些是链接标志，用于设置链接器选项，例如库路径和库文件。main.o: main.c $(CC) $(CFLAGS) -c main.c## main.o 是一个目标文件，它依赖于 main.c 源文件。生成 main.o 的命令是 $(CC) $(CFLAGS) -c main.c。foo.o: foo.c $(CC) $(CFLAGS) -c foo.c# 清理规则clean: rm -f myprogram main.o foo.o 构建过程中，是怎么找到依赖的。 比如 每个源文件是单独构建的，构建的时候，如果依赖其它的 构建，这个关系怎么找到的？也就是说 怎么知道那个需要先构建？ 4.2 cmakeCMake是一个 构建系统生成器。 主要作用是 生成特定与平台和构建工具的构建配置文件。实际的构建过程则依赖生成的这些构建配置文件所对应的构建工具。 4.2.1 什么是cmakecmake相比较make，有以下优点： 跨平台支持：支持多种操作系统，如Linux、macOS、Windows等。能够生成适用于不同平台的构建系统配置文件。 构建配置：通过一个或多个CMakeLists.txt文件来描述项目的配置。 自动化和简化构建：生成适用于不同构建工具的配置文件， 使得用户可以使用选择喜欢的构建工具(make/MSBuild等)如果系统中有多个C编译器，可以明确指定要使用的编译器 4.2.2 cmake使用方法CMakeLists.txt 1. 安装cmake1234567# macOSbrew install cmake# linuxsudo apt-get install cmake # 对于 Debian/Ubuntu 系统sudo yum install cmake # 对于 Red Hat/CentOS 系统# Windowchoco install cmake 2. 创建CMakeLists.txtCMakeLists.txt 文件是 CMake 的核心配置文件，用于描述构建项目的规则。一个基本的 CMakeLists.txt 文件可能如下所示： 1234567891011121314cmake_minimum_required(VERSION 3.10) # 设置 CMake 的最低版本要求project(MyProject VERSION 1.0) # 定义项目名称和版本# 设置 C++ 标准set(CMAKE_CXX_STANDARD 17)set(CMAKE_CXX_STANDARD_REQUIRED True)# 添加可执行文件add_executable(MyExecutable main.cpp foo.cpp)#cmake_minimum_required：指定所需的 CMake 最低版本。#project：定义项目的名称和版本。#set：设置 CMake 变量，这里设置 C++ 标准。#add_executable：定义要生成的可执行文件及其源文件。 3. 创建构建目录12mkdir buildcd build 4. 生成构建系统配置文件12# 在构建目录中运行 CMake，指定源代码目录（通常是 .. 表示上级目录）：cmake .. 5. 执行构建使用make等构建工具执行 4.2.3 高级用法1.定义库12add_library(MyLibrary STATIC lib.cpp)target_link_libraries(MyExecutable PRIVATE MyLibrary) 2.查找和使用外部库123find_package(OpenCV REQUIRED)include_directories($&#123;OpenCV_INCLUDE_DIRS&#125;)target_link_libraries(MyExecutable $&#123;OpenCV_LIBS&#125;) 12345678910# 设置编译选项：target_compile_options(MyExecutable PRIVATE -Wall -Wextra)# 设置构建选项option(USE_CUSTOM_FEATURE &quot;Enable custom feature&quot; OFF)if(USE_CUSTOM_FEATURE) add_definitions(-DCUSTOM_FEATURE)endif()# 运行测试enable_testing()add_test(NAME MyTest COMMAND MyExecutable) 4.2.1 版本查看123456789clang --version# 查看c++版本g++ --version # 或者clang++ --version# 查看cmakecmake --version 5.常见库及问题5.1 xgboost项目构建和调试xgboost项目构建和调试过程中遇到的问题？主要就是 mac系统自带的Clang编译器不支持OpenMP，需要手动安装Clang(基于llvm)，即 brew install llvm. (1.)unsupported option ‘-fopenmp’1.命令12clang++ -DDMLC_LOG_CUSTOMIZE=1 -std=c++11 -Wall -Wno-unknown-pragmas -Iinclude -Idmlc-core/include -Irabit/include -I/include -O3 -funroll-loops -msse2 -fPIC -fopenmp -MM -MT build/learner.o src/learner.cc &gt;build/learner.d 2.现象clang: error: unsupported option ‘-fopenmp’make: * [build/learner.o] Error 1 3.问题分析OpenMP 是一个用于多处理器编程的应用程序接口(API),专门设计用于在共享内存系统上并行化计算密集型任务。是一种编写并行程序的标准化工具，可以显著简化多线程编程的复杂性。OpenMP的执行模式采用fork-join模式 出现以上问题，可能的原因有： Clang版本不支持OpenMP 未安装OpenMP运行时库 Clang配置问题：你的 Clang 安装可能没有启用 OpenMP 支持。需要确保使用的 Clang 编译器版本正确地配置了 OpenMP。(重点)：1. 开头使用 c++ 进行编译. 2. 改为clang++后还是提示。 因此可能是clang编译器的原因 12#macOS 自带的 Clang 编译器可能不支持 OpenMP，因此你可以通过 Homebrew 安装一个支持 OpenMP 的 Clang 版本brew install llvm 4.解决办法 1234567# 1. 修改makefile的 变量配置，使其使用clang++CXX = clang++CC = clang# 2. 通过llvm 安装新的clang编译器brew install llvm# 3. 配置环境变量export PATH=&quot;/usr/local/opt/llvm/bin:$PATH&quot; mac自带的clang(xcode/commondlinetools) 编译器和基于llvm的编译器存在差异。mac已经有llvm ，有必要再 brew install llvm 吗？需要通过llvm安装新的clang，并且方便管理维护 6. C++环境验证6.1 当前环境下使用的 c++的标准库路径?怎么看当前环境下使用的 c++的标准库路径呢。 123456789# GCCg++ -print-search-dirsg++ -print-file-name=libstdc++.ag++ -print-file-name=libstdc++.so# Clangclang++ -print-search-dirsclang++ -print-file-name=libc++.dylibclang++ -print-file-name=libc++.a 6.2 vscode环境","tags":[{"name":"C++","slug":"C","permalink":"https://wiki.quartz.ren/tags/C/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"},{"name":"[重点]开发环境","slug":"平台工具/2-计算机基础/编程语言/C/重点-开发环境","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/%E9%87%8D%E7%82%B9-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"}]},{"title":"VScode搭建C++开发环境","date":"2024-09-27T15:13:34.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/[重点]开发环境/VScode开发环境搭建/","text":"一门语言的开发， 最重要和基础的是 编译器和环境。与java语言相比，c++有一些相关的编译器，比如clang等。 而环境有所不同，java依赖JRE，c++依赖一些库和动态链接库。 关键词： 编译器、环境、依赖管理、vscode(Build Task)、vscode(Debug) c++的环境不同于java， 需要安装jdk，即：开发工具包，包括编译器(javac)、运行时环境(JRE). 本文主要完整的总结了c++开发环境的构建. 1. C++编译器1.1 c++环境不同于java， 需要安装jdk，即：开发工具包，包括编译器(javac)、运行时环境(JRE). 而c++ 不需要java那样 完整的运行时环境(JRE)。 但 C++ 程序在运行时会依赖一些库和动态链接库（DLL 或 .so 文件），主要涉及到标准库和依赖管理。 另外就是c++的编译器：clang是更加现代化、模块化，编译速度更快，适合大型项目的编译器。 1.2 clang(编译器)安装编译器选择clang。 通常情况下，Mac上已经安装好了clang。如果没有(clang —version 没有结果) 或则版本不符合使用要求， 则可以重新安装。安装方式包括：1. 基于Commond Line Tools， 重新安装CLT。 2. 基于llvm，brew install llvm 1.3 c++标准库1.4 依赖管理2. 插件安装这一块比较简单， 在vscode中 找到需要的 c++相关插件，安装即可，在这里不展开了。 3. 开发环境配置3.1 环境如何在 vscode中查看 c++使用了 什么环境？ 即clang 编译器及c++库。 打开 vsCode 的Settings，搜索”C++“，包含了一些配置项。 或者在VSCdoe中打开终端，输入命令 clang —version。 3.2 Build TaskVSCode中的 Terminal -&gt; Run Build Task 实现原理： 通过.vscode下的tasks.json 文件描述， 实现将 相关的命令打包成任务。优点：不用每次输入一大串 命令。 3.3 Debugc++ Debug的原理：主要依赖于编译器生成的调试信息和调试器的功能。以下是调试的关键点： 编译器生成调试信息（在编译 C++ 程序时，可以使用编译选项（如 -g）来生成调试信息。 包括：变量名、行号和函数调用等） 调试器（如 GDB、LLDB 或 VSCode 内置调试工具）：使用这些调试信息来提供逐步执行、设置断点和查看变量值的功能。 调试器能够在运行时暂停程序，检查程序状态，并帮助找出错误或异常行为。 源代码映射：调试器将机器代码映射回源代码。 允许开发者在源代码中看到程序执行的具体位置。 draft优点 多平台几乎相同的使用体验，除了部分快捷键不一样。 非常轻量，启动速度很快。 强大的扩展功能，C++与CMake Tools都是扩展。 内置终端，来回切换很方便。 缺点 IntelliSense不如VS的好用，经常找不到符号，需要重新解析文件。相比于VS2019原生支持CMake，体验差很多。 Mac下不支持”Jump to Cursor”，而Xcode支持这个功能。对于调试还是有些不方便。 配合CMake ToolsCMake主要使用settings.json配置文件，以往需要手动输入的命令、传递的参数都可以写在这个文件里。在配置文件中传递参数在cmake.configureSettings中设置参数，相当于传入了-D+参数给CMake。也可以使用cmake.configureArgs，但是官方不推荐。 在配置文件中设置环境变量有3个字段可以设置：cmake.configureEnvironment: 仅用于CMake配置阶段cmake.buildEnvironment: 仅用于编译阶段cmake.environment: 同时用于CMake配置与编译阶段为Debug/Release设置不同环境变量可以通过CMake Variants实现，在buildType这个variant中分别在Debug/Release的env字段中设置。构建不同配置的目标文件还是用CMake Variants，创建一个新的variant设置不同的配置。这个variant会与其它variant排列组合生成很多kit。 参考使用VSCode+CMake开发C++Mac使用VS Code配置C++编译和调试环境 M1芯片Mac配置vscode调试C++环境M1 McacBook 配置 VS Code debug C++配置(CodeLLDB)","tags":[{"name":"rocksdb源码","slug":"rocksdb源码","permalink":"https://wiki.quartz.ren/tags/rocksdb%E6%BA%90%E7%A0%81/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"},{"name":"[重点]开发环境","slug":"平台工具/2-计算机基础/编程语言/C/重点-开发环境","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/%E9%87%8D%E7%82%B9-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"}]},{"title":"001.TensorFlow识别MNIST","date":"2024-09-27T14:55:57.000Z","path":"wk/算法/002.深度学习/004.系列课程/001.TensorFlow识别MNIST/","text":"本文主要是 通过Softmax对MNIST进行分类，通过一个简单的前馈神经网络模型实现，以此(1).熟悉 算法工程 工作内容都有那些.(2).熟悉TensorFlow框架的原理和使用(3).熟悉Softmax和简单的网络模型(4).熟悉基于python的TensorFlow框架工具 TensorFlow识别 MNIST具体实现见：kaggle-digit-rec-tensorflow:ipynb TensorFlow Version: 2.11.0 书中 使用的是 python2.7、tensorflow 1.14.0； 使用方式上有些差异. (可以关注下差异) 1.1 import引入依赖1234567891011import numpy as np # linear algebraimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)from scipy.io import loadmatimport matplotlib.pyplot as plt # 用于图像相关 import tensorflow as tffrom tensorflow.keras.layers import Dense, Flattenfrom tensorflow.keras.models import Sequentialfrom tensorflow.keras.utils import to_categorical 1.2 数据下载tf2.x 也可以通过 下载数据. 123456# 引入依赖# 原始数据是 784 * 70000 的二维数组(mnist[&#x27;data&#x27;]). 及70000条数据， 每条是 784维 的灰度图像.mnist = loadmat(&quot;/kaggle/input/mnist-original/mnist-original.mat&quot;)# label 是 1*70000的二维数组。mnist[&#x27;label&#x27;] 1.3 数据查看1234567# 查看数据形状images = mnist[&#x27;data&#x27;]print(images.shape)images# 查看其中某一条图像plt.imshow(images[20000].reshape(28,28)) 1.4 数据预处理123456789101112131415161718print(images.shape)mnistImages = images.Tprint(mnistImages.shape)# 归一化图像数据mnistImages = mnistImages / 255.0#images[60000]labels = mnist[&#x27;label&#x27;].squeeze()print(labels.shape)# 查看数据plt.imshow(mnistImages[20100].reshape(28,28))print(labels[20100])# 将标签转换为独热编码(为什么)model_labels = tf.keras.utils.to_categorical(labels, num_classes=10)print(model_labels.shape)model_labels[30000] 创建TensorFlow数据集1234567891011# 创建TensorFlow数据集train_images = mnistImages[:60000]train_labels = model_labels[:60000]test_images = mnistImages[60000:]test_labels = model_labels[60000:]train_dataset = tf.data.Dataset.from_tensor_slices((train_images, train_labels)).batch(32)test_dataset = tf.data.Dataset.from_tensor_slices((test_images, test_labels)).batch(32)print(train_images.shape)print(train_labels.shape) 1.5 创建模型并训练创建一个简单的序贯模型 12345678910111213141516171819# 创建一个简单的序列模型model = Sequential([ #Flatten(input_shape=(784,)), # 将28x28图像展平成784维向量 Dense(128, activation=&#x27;relu&#x27;, input_shape=(784,)), # 第一个隐藏层，具有128个神经元和ReLU激活函数 Dense(64, activation=&#x27;relu&#x27;), # 添加一个具有128个神经元的隐藏层，使用ReLU激活函数 Dense(10, activation=&#x27;softmax&#x27;) # 添加一个输出层，具有10个神经元（对应10个类别），使用softmax激活函数])# 编译模型model.compile(optimizer=&#x27;adam&#x27;, loss=&#x27;categorical_crossentropy&#x27;, # 使用分类交叉熵作为损失函数 metrics=[&#x27;accuracy&#x27;]) # 跟踪训练和测试的准确率# 打印模型概况model.summary()# 训练模型model.fit(train_dataset, epochs=5, batch_size=32) 1.6 评估模型123# 评估模型loss, accuracy = model.evaluate(test_dataset)print(f&quot;Test accuracy: &#123;accuracy&#125;&quot;) 1234567891011121314151617data_index = 10108single_data = mnistImages[data_index]print(single_data.shape)print(labels[data_index])# 输入需要 一个行向量， 和训练数据类似.prediction = model.predict(single_data.reshape(1,784))# 打印 - 非科学计数法np.set_printoptions(suppress=True)result = np.array(prediction[0])print(result)# 获取预测结果中概率最高的类别索引predicted_digit = np.argmax(prediction[0])# 打印预测的数字print(f&quot;Predicted digit: &#123;predicted_digit&#125;&quot;)plt.imshow(mnistImages[10108].reshape(28,28)) 原理训练基础知识：Softmax回归(线性的多元分类模型). Softmax目的：将打分结果(向量) 转化为 0-1区间的概率. 假设 x是单个样本的特征， W、b 是 Softmax模型的参数。 对样本的理解： 这里 一条数据就是 一个样本，包含了一个特征向量。 （业务中: 也可以用id表示一个样本 ? ) 在MNIST中，x就代表输入的图片， 它是一个 784维度的向量，而W是一个矩阵。它的形状是 (784,10) , b是一个10维的向量。10代表的是类别数。 1.2.1 SoftmaxSoftmax回归是一个线性的多类分类模型。 实际上是直接从 Logiistic回归模型转化而来的。区别在于Logistic回归模型为两类分类模型，而Softmax模型为多分类模型. 1234567什么是回归?回归是统计学和机器学习中的一种重要的分析方法，用于建立变量之间的关系模型，通常用于预测连续型变量的数值...见：机器学习基本概念和算法什么是逻辑回归?(重要)在二分类问题中，采用逻辑函数 将线性组合的输出 转换为0-1之间的概率值，用于描述事件发生的概率. 逻辑回归公式:$ h_\\theta(x) = \\frac{1}{1 + e^{-\\theta^Tx}} $ Softmax回归公式:$ Y_k = \\frac{e^{Logit_k}}{\\sum_{j=1}^{K} e^{Logit_j}} $ 1.3 使用Softmax对MNIST分类1.3.1 计算Logit(简单的线性模型) 通过一下公式计算各个类别的Logit$ \\text{Logit} = z = W^T x + b $ 123W 是权重矩阵，x 是输入的特征向量， 可以是经过前层神经网络处理后的特征表示.b 是一个偏置向量，为每个类别提供一个可学习的偏置项. 1.3.2 使用Softmax函数(激活函数-Softmax函数， 用于将线性组合转换为每个类别的概率分布) 使用Softmax函数将它转换为各个类别的概率值将 1.3.3 Softmax回归在TensorFlow中的实现代码详见：Kaggle:digit-rec-tensowflow todo：别的算法, 分别的结果评估、效果比对 总结算法公共工作过程？Tensorflow的原理和使用","tags":[{"name":"ML","slug":"ML","permalink":"https://wiki.quartz.ren/tags/ML/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"002.深度学习","slug":"算法/002-深度学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/002-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"004.系列课程","slug":"算法/002-深度学习/004-系列课程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/002-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/004-%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/"}]},{"title":"GPU架构与CUDA编程模型","date":"2024-09-25T15:55:57.000Z","path":"wk/算法/006.算法工程/Infra/001.GPU架构与CUDA编程模型/","text":"0.前言高性能推理引擎、AI算法工程 对GPU CUDA性能优化的诉求目前是AI行业各个公司在算法工程上需要解决的问题。 以实现高效的并行计算，充分利用GPU计算资源，实现AI算法高性能推理. AI行业可以分为两块：基础设施(infra)和算法模型. 一方面是建设和优化支持AI应用的基础设施，让GPU更好的使用起来。另一方面是研究和应用在这些基础设施上运行的先进算法。 其中infra包括：硬件基础设施（比如GPU架构、云计算平台）、软件工具（比如深度学习框架、数据处理工具）、以及相关的网络基础设施（比如高速网络连接）。GPU架构和CUDA编程模型可以被视为在这一基础设施层面的重要组成部分。而算法方面包括：机器学习算法（如监督学习、无监督学习、强化学习）、深度学习模型（如神经网络结构和训练方法）、以及在特定领域中的应用优化算法等。这些算法和模型构成了AI技术的核心，决定了AI系统在解决问题时的效果和性能。 本文介绍了CUDA编程模型(属于底层计算资源/硬件原理与加速)。 也包含了cuda环境搭建实践(理解cuda编程模型和GPU架构)，后续对实践部分单独拆出来。 0.1 相关概念并行计算 CUDA核心加速库 GPU池化、 GPU虚拟化 - 对GPU资源的分配和管控 算力平台：资源规划 国产智算芯片生态架构 1.GPU架构2.CUDA编程模型2.1 CUDA介绍CUDA 是一种并行计算平台和编程模型，利用GPU的并行性能加速计算密集型任务。 熟悉并行计算的概念，如线程、块、网格等。 2.2 CUDA编程模型 CUDA 编程模型涉及编写主机（CPU）和设备（GPU）端代码。 理解如何在CUDA中编写核函数（kernel functions）来在GPU上执行并行计算任务。 2.3 CUDA的核心概念(重点)理解CUDA线程层次结构和内存管理。学习如何使用CUDA工具集编译和调试CUDA程序。 2.4 开发和优化CUDA程序实际开发并优化具有挑战性的任务，如矩阵乘法、向量加法等。学习如何优化内存访问和并行计算以提高性能。 2.5 CUDA环境架构CUDA是由NVIDIA推出的并行计算平台和编程模型，主要用于利用GPU进行通用目的的并行计算 是不是应该有个图? 1. GPU硬件CUDA环境的核心是支持CUDA的NVIDIA GPU。这些GPU具有大量的并行处理单元（CUDA核心），专门设计用于高性能并行计算。CUDA能够利用这些核心并行处理大规模数据和复杂计算任务。 2. CUDA DriverCUDA Driver是与NVIDIA GPU硬件交互的底层驱动程序。它负责管理GPU设备、分配计算资源并与操作系统进行交互。CUDA Driver与操作系统紧密结合，确保CUDA程序能够正确地访问和控制GPU资源。 3. CUDA Runtime APICUDA Runtime API是一组库函数和接口，为开发人员提供了在CUDA环境中编写和执行GPU计算任务的方法。这些API包括设备管理、内存管理、执行控制和数据传输等功能。开发人员可以使用CUDA Runtime API来编写高效的GPU并行计算程序。 4. CUDA ToolkitCUDA Toolkit是一个完整的开发工具包，包括CUDA编译器、调试器、性能分析工具和开发文档等。它提供了开发、编译和优化CUDA程序所需的所有工具和资源。CUDA Toolkit还包括针对不同NVIDIA GPU架构的优化库和示例代码，帮助开发人员实现最佳的性能和兼容性。 12345678910CUDA Toolkit不仅包含了CUDA Runtime API，还提供了更多的工具和资源，帮助开发者进行CUDA程序的开发、编译、优化和调试。CUDA Toolkit中的CUDA Runtime API是其中一个重要的组成部分，但并不是整个Toolkit的全部内容。- 关系依赖关系：CUDA Toolkit依赖于CUDA Runtime API。也就是说，在使用CUDA Toolkit进行CUDA程序的开发时，开发者需要调用CUDA Runtime API中提供的函数来实现与CUDA设备的交互和控制。功能关系：CUDA Toolkit提供了比CUDA Runtime API更广泛的功能，包括编译器、调试器和性能分析工具等，这些工具帮助开发者更高效地开发和优化CUDA应用程序。使用方式：开发者通常会安装CUDA Toolkit来获取CUDA编译器、文档、示例代码等资源，并通过Toolkit中提供的工具和CUDA Runtime API来编写、编译和调试CUDA程序。 4.1 CUDA Toolkit的版本选择不同的深度学习框架的版本依赖的cuda(toolkit)版本也是不同的，存在兼容性问题。 所以不同的项目对CUDA toolkit的版本选择也需要慎重。目前大体上 cuda11.x是稳定在用的版本，因此先选择11.x版本来学习深度学习项目。 也可以在linux(我用的WSL)对cuda多版本管理. 选择方式：综合考虑cuda和深度学习框架稳定、兼容的版本，如： 版本 Pytorch官方文档 Pytorch版本选择 tensorflow官方文档 tensorflow版本选择建议 11.x pytorch与cuda版本 Pytorch2.3.1；cuda:11.8 Tensorflow与cuda版本 tensorflow-2.12.0；py 3.8-3.11；GCC 9.3.1；Bazel 5.3.0；cuDNN8.6；CUDA11.8 12.x - - - tensorflow-2.15.0；py 3.9-3.11 ；Clang 16.0.0；Bazel 6.1.0；cuDNN8.9；12.2 总之，选择相互兼容的版本，安装合适版本的cuda toolkit。 选择的示例见以下：Window WSL中的CUDA tensorflow安装:官方文档:Install TensorFlow with pip123# 如果是使用tensorflow，通过以下方式安装python3 -m pip install tensorflow[and-cuda]# 实际的版本是 tensorflow-2.13.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl 5. CUDA 编程模型CUDA 编程模型基于主机（CPU）与设备（GPU）之间的协同工作。开发者可以通过定义核函数（也称为CUDA核函数或者GPU核函数）来在GPU上并行执行操作，从而充分利用GPU的并行计算能力。核函数由开发者编写，并通过CUDA编译器转换为能够在GPU上执行的代码。 总结来说，CUDA环境架构包括GPU硬件、CUDA Driver、CUDA Runtime API、CUDA Toolkit和CUDA编程模型，为开发者提供了丰富的工具和资源，支持高效的并行计算和GPU加速应用程序的开发与优化。 6. 疑问6.1 nvcc &amp; nvidia-smiCUDA有 runtime api 和 driver api runtime api driver api 问题：nvcc -V 和 nvidia-smi 显示出来的CUDA版本不一致， 有没有问题？ 1.下面先分析一下版本不一致的原因： 从编译器、设备监控管理角度看： nvcc属于CUDA的编译器，将程序编译成可执行的二进制文件. nvidia-smi(NVIDIA System Management Interface) 是帮助管理和监控NVIDIA GPU设备的命令行工具. 从api角度，CUDA有 runtime api和driver api（并且两者都有对应的版本 ）： nvcc -V显示的就是前者的版本 nvidia-smi显示的是后者对应的CUDA版本s 2.这两个api的必要文件(安装)都是哪些呢？ driver api的必要文件由 GPU driver install 安装， nvidia-smi就属于这一类API 而用于支持 runtime api的必要文件是由 GUDA Toolkit installer 安装的 nvcc是 CUDA Toolkit一起安装的CUDA compiler-driver tool 它只知道它自身构建时的CUDA runtime版本，并不知道安装了什么版本的GPU driver， 甚至不知道是否安装了 GPU driver tips: GUDA Toolkit installer通常会集成了GPU dirver installer，如果你的CUDA均通过CUDA Toolkit installer来安装，那么runtime api和driver api的版本应该是一致的。 否则可能是使用了单独的 GPU driver installer，这样就导致nvidia-smi和nvcc -V显示的版本不一致了 通常driver api的版本是向下兼容runtime api的版本，即nvida-smi显示的版本大于nvcc -V的版本通常不会有大问题. 6.2 pytorch中使用gpu失败The NVIDIA driver on your system is too old问题：当在wsl中通过 pytorch 使用gpu时。 出现以下错误：CUDA initialization: The NVIDIA driver on your system is too old (found version 10010). 原因分析：驱动的兼容性。 找到pytorch 兼容版本的 cuda即可。 并且安装pytorch依赖的nvidia依赖(python库). 具体详见以下： Window WSL中的CUDA tips：WSL中的CUDA程序实际上是通过Windows上的NVIDIA驱动来访问GPU资源的 2.6 Window WSL中的CUDA1. 官方资料(1).CUDA on Windows Subsystem for Linux (WSL) Windows 11 上的wsl不再是预览版，而是正式发布的WSL2。 (2).CUDA on WSL User Guide,内容包括: 在WSL 2上使用NVIDIA CUDA软件架构(软件堆栈) Getting Started with CUDA on WSL 2 （讲述了在wsl2中使用cuda的一系列步骤：驱动版本和安装、WSL2安装、CUDA Toolkit等）(以上官方文档仔细阅读)tips:从官方文档看到，驱动程序仅安装 NVIDIA GeForce Game Ready或NVIDIA RTX Quadro Windows 11显示驱动程序。(其中GeForce和RTX Quadro是两种不同显卡产品，GeForce面向消费者 适用游戏娱乐， Quadro适用于用于专业工作站和专业应用程序) 2. CUDA on WSL User Guide如上文中官网的资料说明了CUDA on WSL User Guide，这里总结下实践流程(哪些改装，哪些不用装)： 下载驱动程序。只下载和安装win环境驱动即可，选择符合要求的版本。注意如果是Quadro需要升级win11. tips: 安装了556.12版本/下载链接。在window环境中下载安装。 安装WSL2. (之前已经安装使用过，忽略。 建议升级win11) 安装条件： win10登录windows账户并升级windows至预览版本, 大概1-2小时。win11应该可以直接使用了. CUDA Support for WSL 2(仅安装Linux CUDA Toolkit。在wsl中不用再安装Driver) 安装toolkit那个版本？ 见： wiki:CUDA Toolkit的版本选择与下载（wsl的在linux下） 安装CUDA toolkit 11.8版本(对pytorch、tensorflow兼容性好，python使用3.8及以后版本). 官网:CUDA toolkit 版本选择.在wsl环境中下载安装.1234567# 下载和cuda toolkit 11.8（好几个G，有点大）wget .....sudo sh cuda_11.8.0_520.61.05_linux.run# 查看 cuda toolkit安装情况（查看路径下都有哪些版本的cuda）。ls -la /usr/local/# pytorch支持(创建python3.8环境后，安装PyTorch相关的库)pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118 验证1234# 验证pytorch环境，python进入命令行模式后import torchtorch.cuda.is_available()# 输出 True 则一切正常. 12# 验证 gpu tensorflowpython3 -c &quot;import tensorflow as tf; print(tf.config.list_physical_devices(&#x27;GPU&#x27;))&quot; 3. CUDA多版本管理和切换linux环境中(包括wsl) 同链接文件路径方式生效，所以可以灵活选择切换 4. Docker中使用nvidia GPU加速4.1 前言以上 实现了 wsl中 搭建cuda环境以 使用GPU, 实现深度学习模型训练和推理。但为了更好的移植性、通常会通过容器(docker) 实现 这些环境(cuda toolkit、python、pytorch、tensorflow、jupyter-lab) 关键词：容器环境启用GPU、NVIDIA Docker、GPU 服务器应用程序部署、可移植性目的：在Docker中使用NVIDIA GPU加速. 以下是安装步骤(安装nvidia-docker)前提：安装好了nvidia驱动、cuda、cudnn、docker基础版.接下来需要安装的2个组件：NVIDIA Container Toolkit、NVIDIA Docker 2 4.2 NVIDIA Container ToolkitNVIDIA Container Toolkit： 提供运行时环境和必要工具，以便Docker容器有效的访问和利用宿主机上的GPU资源. 主要包括 nvidia-container-runtime 和相关的库文件 (libnvidia-container)。它负责在容器内部管理 GPU 的访问和资源分配。 官方文档:cloud-native/container-toolkit 4.3 NVIDIA Docker 2是一个 Docker 的插件，它与 Docker Engine 集成，简化了与 NVIDIA GPU 的交互和配置。它建立在 NVIDIA Container Toolkit 之上，通过 Docker CLI 扩展了对 GPU 的支持。 主要提供了 nvidia-docker 命令行工具，使得容器可以直接通过 —gpus 参数指定使用的 GPU 数量。 依赖关系：NVIDIA Docker 2 依赖于 NVIDIA Container Toolkit 的运行时环境来管理和配置 GPU。 具体的安装步骤：在ubuntu中使用apt-get直接安装，具体不展开了. 123456# 保留下之前的安装方式. 最新的官方方式还没有尝试过，后续遇到问题可供参考apt-get install nvidia-docker2:amd64=2.5.0-1 \\libnvidia-container-tools:amd64=1.3.3-1 \\nvidia-container-runtime:amd64=3.4.2-1 \\libnvidia-container1:amd64=1.3.3-1 \\nvidia-container-toolkit:amd64=1.4.2-1 4.4 验证及使用方式官方文档:Sample Workload Running a Sample Workload with Docker1234567891011121314151617sudo docker run --rm --runtime=nvidia --gpus all ubuntu nvidia-smi# 如果出现：docker: Error response from daemon: Unknown runtime specified nvidia.# 则配置如下：/etc/docker/daemon.json中添加&quot;runtimes&quot;: &#123; &quot;nvidia&quot;: &#123; &quot;path&quot;: &quot;/usr/bin/nvidia-container-runtime&quot;, &quot;runtimeArgs&quot;: [] &#125; &#125;# 然后重启docker：sudo systemctl restart docker ----------# 或者使用docker run --gpus=all --rm nvidia/cuda:11.0-base nvidia-smi# 测试nvidia-container及查看信息sudo nvidia-container-cli -k -d /dev/tty info 4.5 NVIDIA Docker原理在docker容器中使用GPU的原理是什么呢，硬件和软件架构是? 4.6 关于docker中的cuda版本通过选择 指定版本的 docker镜像。镜像站 国外的,超时下载不下来。建议使用以下：NVIDIA官方的网站; nvcr.io/nvidia/ 此网站还包含了很多镜像和模型.推荐 对于版本的选择： 可以选择任意版本cuda的镜像，因为镜像里包含了完整的兼容的工具链(cuda toolkit、python、等等)需要注意的是 镜像的版本类型，有base、runtime、cudnn8 等镜像。 它们的区别在于: base是基础镜像，提供了cuda运行时库和基础工具. （大小一般仅 几十M 、 没有nvcc、没有python） runtime基于base， 增加了一些必要的运行时依赖.（大小一般 1个G 、 有nvcc、没有conda和python） (部署)cudnn8基于runtime，额外包含了cuNDD库，用于深度学习的加速，提供了优化的卷积操作等功能.（大小一般 近2个G） (开发)devel（带有nvcc 等编译器。 其他的镜像没有开发工具， 仅用于运行已经编译好的CUDA应用程序） 由于在wsl中我们选择了cuda11.8，那在docker环境中 我们选择接近版本的(选错,应该选18结果选了16…大写的无语,pytorch对16支持不好…)：nvcr.io/nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu20.04 如果需要加速用到cudnn，则选择第三个tag类型的镜像. 由于以上镜像拉取超时，解决办法. 拉取 nvcr.io/nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu20.04推荐直接选择cudnn8-devel版本,用于开发环境. 如果是部署可以选择runtime版本 测试12nvidia-docker run -it --rm -p 3333:8888 nvcr.io/nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04 /bin/bash# 查看路径：/usr/local/cuda-11.6/ 是否存在 搭建一个长久运行的nvidia docker容器 以及notebook开发环境(重要)1234docker run --name ai_devel --runtime=nvidia --gpus all --restart=always -d -p 8081:8888 -v /mnt/d/jupyter/quanoc:/home/quanoc nvcr.io/nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04 tail -f /dev/null# 后面加tail -f /dev/null 是为了不让容器自动正常退出.nvidia-docker run --name ai-devops --restart=always -d -p 8888:8888 -v /mnt/d/jupyter/quanoc:/home/quanoc nvcr.io/nvidia/cuda:11.6.1-runtime-ubuntu20.04# 说明：将容器路径映射到宿主机. 提供nvidia docker容器环境 后面加tail -f /dev/null 是为了不让容器自动正常退出. 5. 基于nvidia/cuda镜像搭建容器开发环境关键词：python、jupyter-lab、pytorch、tensorflow下载下来镜像后，接下来搭建开发环境. 安装相关组件. 5.1 安装Miniconda3参考：Anaconda安装123456apt updateapt install wget# 安装Miniconda3## 下载Miniconda3-py38_23.3.1-0-Linux-x86_64.sh ； 安装bash Miniconda3-py38_23.5.1-0-Linux-x86_64.sh# 重新进入容器(安装完成后默认配置了环境变量，需要重新打开终端) 5.2 python及其它框架安装123conda create -n ml3.8 python=3.8conda activate ml3.8# pip安装jupterlab Jupyterlab开发环境搭建 pytorch安装,见以上资料. 2.3.1版本 使用conda安装需要下载近2个G why? pip好像800+M.如果你只需要安装Python包，且不需要管理环境或依赖关系，那么pip也可以胜任。 pytorch验证问题，torch.cuda.is_available() 出现500的错误。 解决办法：重新安装 nvidia-container-toolkit即可，详见：Installing the NVIDIA Container Toolkit","tags":[],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"006.算法工程","slug":"算法/006-算法工程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"},{"name":"Infra","slug":"算法/006-算法工程/Infra","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/Infra/"}]},{"title":"2.最优化理论_模型训练中的数学原理","date":"2024-09-15T14:55:57.000Z","path":"wk/算法/001.机器学习/002.数学知识/机器学习/002.最优化理论_模型训练中的数学/","text":"在参数估计中，常用的方法主要是最优化理论，其中包括 最大似然估计、最小化损失函数(最小二乘法、梯度下降法)) 。 本文以Logistic回归算法 为依据， 初步的学习逻辑回归中的最优化理论：最大似然估计. 之后介绍其它的最优化方法：梯度下降、最小二乘法. tips: 逻辑回归中除了 最大似然估计还可以用其它方法，比如梯度下降 逻辑回归中的最优化理论基于 最优化方法 的最佳回归系数确定. 1. 最大似然估计背景(模型训练)先来看看模型训练过程：1234# 算法过程1. 收集数据、准备数据2. 分析数据3. 训练算法：训练的目的是为了找到最佳的分类回归系数 基于最优化方法的最佳回归系数确定确定回归系数的最优化方法通常涉及到求解损失函数的最小化问题。通常在线性回归中，最常用的方法是最小二乘法，而在深度学习中，通常使用梯度下降法或其变种来优化损失函数。(逻辑回归是个分类问题，不是线性回归，使用的最优化方法是梯度下降) 最小二乘法在普通最小二乘线性回归中，我们试图找到一条直线，使得该直线与数据点的残差平方和最小。这个问题可以通过解析方法（例如正规方程）求解，或者通过迭代优化方法（例如梯度下降）来解决。 梯度下降法在深度学习中，梯度下降法是最常用的优化方法之一。它通过计算损失函数相对于模型参数的梯度，并沿着梯度的反方向更新参数，以使损失函数的值逐渐减小。梯度下降法有多种变种，包括批量梯度下降（Batch Gradient Descent）、随机梯度下降（Stochastic Gradient Descent）和小批量梯度下降（Mini-batch Gradient Descent）等。 其他优化方法除了梯度下降法之外，还有一些其他的优化方法，如动量法（Momentum）、自适应学习率方法（Adaptive Learning Rate Methods，如Adam、RMSProp等）等。这些方法通过在梯度下降过程中引入动量或自适应调整学习率的方式来加速优化过程。 1. 最小二乘法目标是最小化观测值与模型预测值之间的平方误差 2. 梯度下降法3. 逻辑回归的最优化逻辑回归使用 梯度下降法梯度下降通过迭代更新模型参数，沿着损失函数的负梯度方向寻找损失函数的最小值。这种方法适用于逻辑回归中的损失函数，如对数损失函数（logarithmic loss）或交叉熵损失函数（cross-entropy loss），可以有效地最小化损失并找到最优参数。 1.1 模型预测：logistic 回归的模型预测由 sigmoid 函数完成，将线性组合的结果 $z$ 映射到一个介于 0 和 1 之间的概率值，表示样本属于正类的概率。预测公式为：$ \\hat{y} = \\sigma(z) = \\frac{1}{1 + e^{-z}} $其中，e是自然对数的底，即欧拉常数，约等于2.71828。 1.2 损失函数logistic 回归通常使用对数损失函数（log loss），也称为交叉熵损失函数，用来衡量模型预测值与真实标签之间的差异。 对于二分类问题，对数损失函数的定义为：$ \\text{Log Loss} = -\\frac{1}{N} \\sum_{i=1}^{N} \\left( y_i \\log(\\hat{y}_i) + (1 - y_i) \\log(1 - \\hat{y}_i) \\right) $ 其中，$N$ 是样本数量，y_i 是第 i 个样本的真实标签，$\\hat{y}_i$ 是模型的预测概率。 这个损失函数是根据最大似然估计推导而来的。todo：怎么推导来着？？？？？？ 我们希望通过最小化损失函数，使得模型输出的概率尽可能地接近真实标签的概率。而对数损失函数在这里被广泛选择的原因有以下几点： 可微性： 对数损失函数是连续可导的，这使得我们可以使用梯度下降等优化算法来最小化损失函数，从而更新模型的参数。 凸性： 对数损失函数是凸函数，这意味着局部最小值也是全局最小值，因此我们可以保证收敛到全局最优解。 推导简单性： 对数损失函数的推导相对简单，并且与逻辑回归模型的概率输出形式相符合，因此在数学上更容易处理和理解。 因此，对数损失函数是逻辑回归中的一种合适选择，它在实践中被广泛采用，并且在处理二分类问题时通常能够取得良好的效果。 1.3 参数优化通过最小化损失函数来优化模型的参数 $ \\mathbf{w} = (w_0, w_1, \\ldots, w_n) $。通常使用梯度下降法或其变种来进行参数优化。具体地，我们计算损失函数关于参数的梯度，然后沿着梯度的反方向更新参数，使损失函数的值逐渐减小。 如上 sigmoid函数 定义， 函数的输入记为 $z$(其中$z$是线性函数的输出)，即 $z$ 由下面公式得出：$z = w_0 + w_1x_1 + w_2x_2 + \\ldots + w_nx_n$在这里，$w_0, w_1, \\ldots, w_n$ 是模型的权重，$x_1, x_2, \\ldots, x_n$ 是输入特征。sigmoid函数将z的值映射到[0,1]的区间 todo: 这个过程的代码实现. 是怎么根据 损失函数、梯度下降 来找到 最优参数的呢？？ 拓展 其它机器学习模型 中的参数估计方法是？","tags":[{"name":"机器学习","slug":"机器学习","permalink":"https://wiki.quartz.ren/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"数学","slug":"数学","permalink":"https://wiki.quartz.ren/tags/%E6%95%B0%E5%AD%A6/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"002.数学知识","slug":"算法/001-机器学习/002-数学知识","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"},{"name":"机器学习","slug":"算法/001-机器学习/002-数学知识/机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}]},{"title":"1.参数估计方法","date":"2024-09-14T14:55:57.000Z","path":"wk/算法/001.机器学习/002.数学知识/机器学习/001.参数估计/","text":"定义：参数估计过程中，我们的目的是找到一组参数值， 使得目标函数达到最优(如最小或最大)。 tips: 损失函数是目标函数的一种常见形式。 很多情况下，优化目标函数主要就是通过最小化损失函数来实现的。 参数估计的方法有：最优化理论(最大似然估计、最小化损失函数(最小二乘法、梯度下降法)) 、贝叶斯估计、矩估计 以上 也说明了 参数估计 与最小化损失函数 的关系. 一、最优化理论数学原理:最优化理论/梯度下降最优化算法 1.1 最大似然估计通过最大似然估计(MLE)或其他优化算法来估计模型的参数 θ而不是最小化平方差. 可以 通过 梯度上升法 实现最大似然估计， 帮助找到 使得似然最大的 参数组合. 另外用于 最大似然估计的方法还有： 牛顿法： 利用目标函数的 一阶导数和二阶导数来更新参数。 拟牛顿法：是对牛顿法的改进，避免了计算二阶导数。 期望最大化(EM)算法：在一些含有隐变量的模型中经常使用。 这里重点介绍 梯度上升法： 1.1.1 梯度上升法基于的思想：要找到某函数的最大值，最好的方法是沿着该函数的梯度方向探寻。 tips: 关于梯度的概念， 梯度是多元函数在某一点的导数，是一个向量， 其各个分量分别是函数对各个自变量的偏导数。 123456梯度是多元函数在某一点的导数，是一个向量，其各个分量分别是函数对各个自变量的偏导数1. 在单变量情况下，导数和梯度是等价的概念，因为梯度只有一个分量.2. 在多变量情况下，导数是一个标量，而梯度是一个向量，包含了所有偏导数的信息.3. 梯度 的每个分量，表示了函数在 对应方向上的变化率，可以看作是函数在该点的局部导数.在优化问题中，特别是在机器学习和数值优化中，我们经常需要最小化或最大化函数。梯度提供了函数在给定点的局部变化方向，因此可以被用来指导优化算法（如梯度下降法、梯度上升法）在参数空间中搜索最优解。 1. 梯度上升的迭代迭代公式如下：$ \\mathbf{w}^{(t+1)} = \\mathbf{w}^{(t)} + \\eta \\nabla f(\\mathbf{w}^{(t)}) $ 其中： $\\mathbf{w}^{(t+1)}$ 是第 $t$ 次迭代后的参数向量 $\\eta$ 是学习率，控制每次迭代中参数更新的步长 $f(\\mathbf{w}^{(t)})$ 是目标函数$f$在参数向量 $\\mathbf{w}^{(t)}$ 处的梯度向量 该公式将一直被迭代执行，直到达到某个停止条件为止，比如迭代次数达到某个指定值 或者算法达到某个可以允许的误差范围. 2. 训练算法:逻辑回归使用梯度上升找到最佳参数 逻辑回归假设输出$y$是二分类问题。 对于给定的输入特征 $\\mathbf{x}$ ，逻辑回归模型的输出 $ \\hat{y}$ 由一下逻辑函数给出：$ \\hat{y} = \\sigma(\\mathbf{w}^\\top \\mathbf{x} + b) = \\frac{1}{1 + e^{-(\\mathbf{w}^\\top \\mathbf{x} + b)}} $ 损失函数逻辑回归使用交叉熵损失函数来衡量预测值 $\\hat{y}$ 与真实标签 $y$ 之间的差异：$\\mathcal{L}(\\mathbf{w}, b) = - \\frac{1}{N} \\sum_{i=1}^N \\left[ y^{(i)} \\log \\hat{y}^{(i)} + (1 - y^{(i)}) \\log (1 - \\hat{y}^{(i)}) \\right]$其中： $N$ 是训练样本数量 $y^{(i)} = \\sigma(\\mathbf{w}^\\top \\mathbf{x^{(i)}} + b)$ 是对样本 $i$ 的预测概率 $y^{(i)}$ 是样本 $i$ 的真实标签 梯度上升优化过程梯度上升法用于最大化对数似然函数 $ \\ell(\\mathbf{w}, b) = \\sum_{i=1}^N \\left[ y^{(i)} \\log \\hat{y}^{(i)} + (1 - y^{(i)}) \\log (1 - \\hat{y}^{(i)}) \\right] $即使得损失函数 $ \\mathcal{L}(w, b) $ 最小化。梯度上升法的步骤如下： (1)初始化参数：随机初始化权重$\\mathbf{w}$和偏置$b$ (2)计算梯度： 计算损失函数对参数 $\\mathbf{w}$和$b$ 的梯度 对于权重 $\\mathbf{w}$ 的梯度： $ \\frac{\\partial \\mathcal{L}}{\\partial \\mathbf{w}} = \\frac{1}{N} \\sum_{i=1}^N (\\hat{y}^{(i)} - y^{(i)}) \\mathbf{x}^{(i)} $ 对于偏置 b 的梯度：$ \\frac{\\partial \\mathcal{L}}{\\partial b} = \\frac{1}{N} \\sum_{i=1}^N (\\hat{y}^{(i)} - y^{(i)}) $ (3)参数更新：根据梯度方向和学习率 $\\eta$，更新参数 $\\mathbf{w}$和$b$ $ \\mathbf{w} := \\mathbf{w} + \\eta \\frac{\\partial \\mathcal{L}}{\\partial \\mathbf{w}} $ $ b:= b + \\eta \\frac{\\partial \\mathcal{L}}{\\partial b} $ (4) 重复迭代：重复步骤2和步骤3，直到损失函数收敛或达到预定的迭代次数 理解 梯度上升、 最大似然估计(似然函数)、 损失函数的关系： 逻辑回归中 通过 最大化似然函数(假设观测数据服从伯努利分布) 来估计参数 而 最大化的方法 是通过 梯度上升法 梯度上升 是通过 计算损失函数 $\\mathcal{L}(\\mathbf{w}, b)$ 对参数 $\\mathbf{w}$和$b$ 的梯度来更新参数. 梯度上升 只是定义了 迭代的方法(看迭代公式) . 而损失函数 的梯度用来计算 更新方向和大小，从而逐步优化. 损失函数的梯度被用来计算参数的更新方向和大小，从而逐步优化模型的参数以最小化或最大化损失函数的值。 逻辑回归中， 损失函数是怎么来的？？通过最大化对数似然函数（log-likelihood）得到的， 推导过程：(重要)在统计推断中，通过最大化对数似然函数来估计参数是常用的方法。对于逻辑回归，我们实际上是最大化对数似然函数的负数的相反数，即最小化负对数似然函数（Negative Log-Likelihood）：$\\mathcal{L}(\\mathbf{w}, b) = - \\frac{1}{N} \\sum_{i=1}^N \\left[ y^{(i)} \\log \\hat{y}^{(i)} + (1 - y^{(i)}) \\log (1 - \\hat{y}^{(i)}) \\right]$ 这个负对数似然函数就是逻辑回归中常用的损失函数，用于衡量模型预测值与真实标签之间的差异。 损失函数是 对数似然函数的负数除以样本数. 1.2 最小化损失函数1.2.1 最小二乘法1.2.2 梯度下降法二、贝叶斯估计三、矩估计关于目标函数和损失函数损失函数是目标函数的一种常见形式。 很多情况下，优化目标函数主要就是通过最小化损失函数来实现的。 假设我们训练 图像分类模型， 目标函数 除了考虑分类错误的损失（损失函数部分）， 还可能考虑模型的复杂度，如参数的数量或某些正则化项， 以避免过拟合吗，这就是损失之外的其它因素。 包含约束条件的例子： 比如在资源分配问题中，目标函数可能是 最大化总收益， 但同时有约束条件如每个资源的分配量不能超过其上限，或者总资源使用量不能超过某个固定值等。","tags":[{"name":"ML","slug":"ML","permalink":"https://wiki.quartz.ren/tags/ML/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"002.数学知识","slug":"算法/001-机器学习/002-数学知识","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"},{"name":"机器学习","slug":"算法/001-机器学习/002-数学知识/机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}]},{"title":"2.特征工程方案v2","date":"2024-09-13T16:48:57.000Z","path":"wk/算法/006.算法工程/特征工程/002.特征工程方案v2/","text":"6529a249a0af82b27e00ec9fb492a165cdeff919c1e3b0b703e0a95a87175d9ed7a5c883bcadff8f31ba8d3dc435c7ca1057c012cfb74a29b9d5c33d5760faf76473a6bd65d8534a757a3150120603b173a10db068ac96ba44c63630b4305466f0fb469137a9f69468657216d0d460a6f09ed1cf16a1c64a21e019065f9dac659d9c3dea5efa452fd99137f21390733ba14e1412a87806c43a98681345d839977bd860c37ead04c46a2234573b19413ca2b561648e9e86413b700ec080b4012eb9a33b06499bb72ba0e769985d6b15037bb45ba642a7f6e0e68cfd1645727f8ca27a0cee0d8b975b1773c6748f7dfc52f381a849275ec555f43b310ae96c0ff0bd7b4e9d76f31b0af22bff90c4cc8e8dbd97490cb15acb926805d279c4e8100e387b0e6e8a2d7fc2ed42791e84dac4a96284f913ac28890860188575398719ae086a48937d98b1068a560c245ea88e960ebbf7431d9ea0458899180d91a3204b5ea1a650c7ee43f5a573f155a6b44532288bc87378313ba6430f81f8f8b4113cb183d2d325e637840f371dcadb08455755aa1875bbb2c6b42c18f94dbd2e3b8a4386dedfc2761f7720f0956101b3f793972e8b7367395167c9dc82203677f1dc91a0562030f59332dc3e98ef30d65f2fd76238b5f52250acd3434971b3dfba8ea3e6e5e48f23647a7fb4d6b4c40201bf3f36a8001f45f69c2c3cf7fc778c26c9762bd217a220c691dc5381d811de4623ed40056d4026ca4bf33f7ad972ed9c2f7ad802f2723f61a77d928422c3d6bba27ffec71a56478842556abf69836b3b06c86bcdbb481e5f04823bce26d0ea745434c19a7da38ae6e4db992ce0913063a741a798355b22aa3ba2310c80384c8ac7a46f4fc74a14b2b451b7ba8358f210c1dd9f4f5ef03b0ecc423d09e0c10086f1033d04e9516f89fa6023477b6aa1a05d3a3577fd0183bee9f241fb5b78cb0ee0e510b9fe3c787a1f5a6a6fe7eb7124a916a700e1cbb656c256a600a28cfa7c1e42ee24b748ac1451bb581ddf780b1832a48809dca16f423857debee9259de1d54650869f832c39b99e482a8585138fc306d0610541da99f4fdc657e3dc2d68c3e1fd6286a43dc43fd671935956f16bf59f3431212011cc0b86b18fce3cc1087220979217ceb888731f6e1751245faf87fe0b3681ed3fde1702ff0bd79c94a87e3b1ab46224c4855f4d62c270c5f83e897cc684137f26746c4c6bacb7c36c58ba1d5cd95fe09404f9c56956f349c38f0368fc0654ac1444ee22548a1032b8e977c51aa9cc2f6e764d845096c8b85274c0178c8fccddef315e30d354ce7c48ac8e4701f7483bcb1e0d268fb5b85392119fe11af52e08734137c84f92999f20fa5da374ff17234890a9bf1b56538c1a0bbc7ed2a8fe9af7a9236605256a9e27ca730de64f46a024050db2c1740d19826893394c71372c6d6eafae16c2068660fbd5750fde1544eccdeeb4d9af5647f5634d6e66c9ef2132bdf94e23fcb159ab02c34d55cbdbccec2aa1f6e2cc6b06eedc9cbf965b6b3c936a3931d6904d08d806645aa9a7cf486a100ba3f55829c597b150ea69bd14826e3808cdffca90ecbb239be98486366470c6f4ee9f81d5356b96470f134ccbdfacb015f0434bb421d681b1778e643702e28a76431b258c24bae4d2cc315665716426292ae4f9bccac1fe0ccbfc626c01c4bf0a97c9eb5c8bbf901988441d1bf38b9e5731055b317ce81a23100c951063b230e5c9d370632895ca932966037f26fe96e4f6257b4523c0c84ca203d92338b78eea33bfd00adbef82ddfa21ded6d405f2d9516c8a51bbd0b1d14d5a427f183087bbbd73021031fc269b008f523a04320d1052482de3176e687ea5d6fac7b21924f941d30e79f6e207fb597e1528c02742e06c71165a20d967553ba0f898c04d2e3750a9f0101f7586e94569444e46227bd67c09a2b804ce74cbc4c5239021207bde540000032af807606406f22a9121cdb03279dee0786e6578569dd4eadb4651cefe6f31726bd125c3df9c6914a4373dd5e9ab7a5a1a42b167be652e7d37db368f9a6a55a99039fb7757bc6c95e49380588412b2f9943e52eafcf2416cd9f6de565ffb22913ec1a7702ced2384933f4ea5cef61cbcc0dc0e9316b921671685274a2bad3a2669af4c97580f4b8c74e1c8f72fd3cbc5dee03024a25bc9a2f53aeaee321f014403389820c3155a1ae0a03299bfc4bb768ea1ecdbea7683623b1983093aef81665887ff72c64319f9a97e7d23ca20fd7ef34b2bd855b25857992fbbb324e5c50a7dccd70f4916fe3ecd1798c79de63d379b0079e10b9e6496d3e04516f483d643a454abbba791dfe67aaef9836ad33179d41c0f4f3710d7085461189474910a0b88f58b8946d25ff7324b5e2f4848736e0e1afeda64af214d456bd72833072f2135f083942d07e54b8b9332be1667dcea407b6c1949e584f5d1fdfe58c6924047867f83bcd6a203269b1a5c62fca13326b1deb4181ca45cb326ad3277c889e84454c01a8a5e1e89b4de2d7cca239ad1d15f91c1fc8cd65bd910f7e60df62ede8c4e3b0c1b042aac23a1bcc04cd1d7978c16f88b555423732451c44aba45fa50a51da4a1935bdca42a9f146571426d47d0b418b5be5d960e5232a69ffd3ad38b6bbc2e7e59611de873e4d956cea640ad162752f5483bcf62df431c033a1e5afc6d3c398b90b217ef1b8a63862ca6135ee43b36d8d701aec2d871773cc2618fce57747e0c0ef924a93b39d812dd3bb374b399a30a95c0984a71202a58ae6805da4654f1f024bf29841aab698ef95f6bb662c70a00f715d94fdf0dc4b589898462860602a901c30ee3781638be2a710c29192a8bbc692247868b50442121f5e97e509554564bf306e99726d07e744a5f71d840391d98d4010a20e47b922cd3a25b7de965207822946d1e93fc269a4050dd7d4af3655a258df6ef3aeb6c838807dcd026ec5a00de51f6bced8f6fc17d55c4bd245372262334a22c851e8fa77442a3343d041d493fd061d574c7a6c52da59f0aa32805f0e358a1c81c3bccff20c32cdb3bd49f00ba6a455257f055cd571a19d058b57cfa9e3cdd064701987cf47204dfd48b57ea6bae327f4a510f87ace48229f185e75a053d84443bcd5a7f2a61da49982f96fe2a1ae9764983de6f2d22ed1abde587e67e3b0ec7a3126fb01a859bed410f71896d0413363bfae58ed9e672e93e372abf5e57add5085dab60af56d2493bb046c920b771fda2d303957ad3f842ff47a9edb51c7948561a8bab4d8d34db6d1cae1fe75aa3fba06efabc2f95f2d7d53206a48c58942766ff22390651eaf359297739e1e7acc558631bba48bf02830582b8d69af9129014811b26173982633d4ab8f32b47a5281f2892d00c833eb4d431d1f40e238709231347f3c9a13717e9efd7d7fcc89125f927b652c5a1a3518d7898589d329f6c9256d27e4c45c577ccdcd6d043e860e49b1f9d1cc7efb139a998a44e31e4a8d450384b86952ce88e5ecf1d1595b4b96d331ad86ef06f71703d2190aa6fe5b0170dd4d5e3209639b51e83797f19efa7622e965002f4645b7055fc8208173d10a01a36e24b9d00c89ff4b6563a8e742e36cdd76ab1332f3bb45266b7b16be587a43617a672affc5c3a17236e379f6344142e3d50104c31de4f38662b74430da4a591498205956ad77c3735ad02861a727e7980058ef2c9dd7827dad20cf67ed06195ee8587c73e5280c1568c59682eca2e6aa31972d7354aad3ea14f590c55da81ef8672b9e65490f4c0da934e841415237ad3bab494e3829ed97116c0c29daefa0cf6538f735d28bb125f066b2bbe082f9ca7fa6193c49b7bb058ebb6f26d2df3b42537afd73a52e6609f7025714405caaf63400ecf20080e647c4e58951671a7cb9cb4523a07e92b9449dfd06d9c7962730169cf6f91dc81564a6414cce32821238d31599d4beef1dc95c392c3b9d156e9d08770bce6ef60d154902c637a6a40b41591e5a7db862c49062d4e6c1a2e11cf39a13efda9707f558fa848c89a76d9ae64063bb809e685f4ca4d97c072abdefb826ea4aa79a3a7b257d17d87d838b72fcd36f76e151e0c9c62cfb075d606178ae18c6c17f39d2a74b891fed5c56efcfb09219fab49e7cea9b293ff19ca6688459b5b74d418878266f5353e7453dc555aeac359a322b4fee6f2fbb81656f46c88138cf698420015b229000dc540c6468cd861e77215c97e8ea3a2117abea8a2c6e874cedf6c62ebce55ec145dec9d8f098d7b4187ef6f802f9fe18df254e776d0c285038d402e426a4e8bed27ccaffbad749f3746ce4026226f148c851c8d1c8ed64612acc51b065bcf9db00b6f40b3d62cb0f3dae5b78321701e8c987f7aef42322f798f9794644ec2447917dedc253d6a106ce66c8b6a8c2c04aa7ad9bf7ac10b5a69acffe9573f736ea92a608622ac8628d5d2c063219b86bed4571e2bfc0dae20f03add40ff86f7532c4482a2b1b72b1d258ac68af10ad1554d590e8cbbdbba25aecbd0bbb8ae5b3ff7189cdf9a480ce1d78ab4b689e84eb2f163f50bc1f423807d439a6e481e038e9a8fcf62f960323e536508a9844115c38276aea5c756946fe2bfd49e50a423379240c8c01502b17e58167fa324d2907ab908e02d171c567807546b02bd2b04c66cd47f70fcab4c64924d87904acd792f9aa3ec4eaf8a9c7cbe7043b5847be2ddd9d29350762788b744e2c224993dd8312a2a26fbe508e47ece5834a1ff2f722adb834027f39b757fe7b7c8607c66583a905ab568a0b37ed1c3d018a31463c258df6b44d3fbf6733668d84a1941f44bbac220c143fcd89301d9fce3d15241fda5b283ddab80a3bb17f57a04ddb1976b775b6cc226a38d351c0a4cc965231300664bd5991922b68735c00eb1a973bf6c9d8f7e8a2ac9ed2d207b47efaea485a7b31fd537fd9f0206761025abc15c425617e9c21d6419b759f8bfe81b67160700856e0413a131ce6876f471bc53b9ed8f4eeab768ee95b1f99a46f05da17aea9eee802ce5643b63dc9ebba6a5c98a2a1abf099af8d5015f3f44beee195a49470ed94b0dc3e0d9cd9bd3c3ca3062c06098cebe072cf4a1845bcae8f1543acbf71762a8b49574162fcb91d19f0d59d28ce6096d94971debd136a6a575c72e1374facfc58e7ae44ece9f87e2d2c5e7c582067e9e38a0b46919a29fda43b00f8606121a59b6db1eb880b040bbec9c34e4e3a8575f2c8fddcaf87a6e847485b80fa200ed6fb20396bbaf443fdd6be41069c521e66d9ad4b9b2e9f379a80890350ca79a816f7d3c5c1689312b5371ca386c8ff129c8d8ec5149255fed5d8b75004ae09ff6d1b59866cb8e3e08bcb05abd992ba2f50331e973fa4c680cff52f3d42719fc20c4a40cec8e9e5281cf42f9f9fabf90b563bdcbb40334921638b77a72493b8c1ddc6af9671b0f2456d9d688650e2329dabafef553ce5b55fda6f1ff5c049bd83f107cf8f50c43d5942c86054e216df5cdb8f6628b093d813e599a187ac1eb54b77acd96e208459a3c28ed7de030e28312cbb4b0a2d049ead9c102c24dc86fb58ebc9e59c2ce7af7a9c09e5dc17730c97f0f62ec19d2a1e636d092dc5bfa2732984a4e0c271c64dcb284653b22f89853397ebac52d1fc077f6f98d669ace2c1b8c46f8bc98d5928aa9e9fd62a4c394f582b6960cbc527c8dd9ace0f686083af9a8e7543551f80f00a21c90e4009d1a10b6999c2b5e6cfa17792136b26c86e043a70dcfa518599bf8170c13f1b11ada7a54594e6413591cb48c361bc13f269fe75682d92c5a62e03d2cd12a3abe5068da3cb705bc0d4ea12bfcedbf84a435dbc693d3b0d3cf4c5b291623bfd1179c4b24e947c82f18dc837cf0e20cb77c9ffeff1eed7540bc16cdef178c8f2443db0be3be44e4a2efa52460f50b4217174f69e1a9a87ea8f213d3e9ebcfc279a0d91d8b5c6e73ef1194cdbd93491de93c29c9a5eebb3b59a9a7c9a9ac459a3f72c69d5af3e7065da5fa4a3f024fd6cdf57c486b2fca5483229254f837f0db8c25c2750a66a1c39b0efb2556287f33c307f9802a82cfeefcd42f16c71c626dad027267698ab476dcbe6f1b7c7e04c65bcb51451649e13dae5835d94503429e64686d354eaa6711d6407ab0159b834e9953648ca0b87dba1e4a599a7af72693a04825a93746727221a5e185c2ca47577e556aadf4e76437f46aff66e21e800f21938f8e9e0344ac32b11226c95dbafebfb93a13ff0a65dfcedfbc764d7ea3339d6280f05528134425351caa2c29921324e8222194ea6d4392c2e57aad0b3fd85be78cf33597438e71e9920ad25cdeceaaec6f61f29988e9c038ac67b6e9ac56075d0cdb1b7ff202c890c3c7fdf62ff2d69900e4c1701c7d283138bd944bd9537b48b6ebf20e52b84a64672af3e47b42f95d9bed1eb797bea1ae6ac295879da72dcf2c234a539cd5382ec309f047e5888aeb557e72a8d7ca368bd5f13b5099fc87b0fe5f9410fe270af9d688ca7ad48661d152ce9ae8a12fef7a98f067d3c3101db201eef1087bf31e73c8f97b217cfa93abfc8230a69248b1885a2273a7e0b109db527ef7ac1545781af51ed5ec7de1bbaae7956610977cd14eb7a41b87fb3012c665e1d3aeb392beda678eee74e62f2d6b1f2e1b971dfcf20f12112ae5093a200918e5998917b145b0a90e2d1eae8c4264580e7ef5bcca09bb5d8ff58a353ea54ca5e5cde199295c6c9ba2dd863dba6b27108f1ee91fce0c7c070982d702afc113f7d41fedb574bf49e5e5fb6330891d56b445d1c2cb30a477f2c769a004debcfbbea4d90172b425918a8efb29e9ac9092e0b78658dc212693ba1e911ecc23efdb74fe6e2e170773529d3f018cb9fcd5c083feef7cfcaf548e1664d481a66035175f9117ba99b9a02c49997da3868fa267bf1f47e670b3e4ae9deea39941ef6faf9df89d37f991acaa20c12b10fb68181f6cb29bbd8111aa42d1c95b287aea7e68df699d1c0f0c8eda0c448071202fafde5b3d8bfb2cc85c9b174db0b5d5a28531f6f36ec7421858fe68bab189be958782f9864577631a86fd02b715518d15c9d72c14c8a5dbdf7a0d3815574f32d24f02dbc20fa42d21c89eee6245aadddcc02982b519dd895e6aa922620b5618efad88bc36985a3c893f502c6cdcca1ac563b0c7e9600045b8d8dc24b913acc98e51c77fe70396316714b1136f2171021d72d6bcddb671c6 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"},{"name":"特征工程","slug":"特征工程","permalink":"https://wiki.quartz.ren/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"006.算法工程","slug":"算法/006-算法工程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"},{"name":"特征工程","slug":"算法/006-算法工程/特征工程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"}]},{"title":"3.特征工程系列_降维","date":"2024-09-13T16:48:57.000Z","path":"wk/算法/006.算法工程/特征工程/003.特征工程系列_降维/","text":"6529a249a0af82b27e00ec9fb492a165c4e83dd8141b5e09c527f584514dbf917a069630a8b6e34420c1eba6d8bb552d6c926b532db7704125dc781c4f33335077c8fae29c4ad5bc7774f40faec5213281b64c28c1584694580a59a56c60a3b68bf514f60c0ef28cebbbf3f273e1dd5fc1669e5788a5194e49d6526e1c529b109cbeae70eccc4a1644d7952469cd1e89ad16c55069cb42b0fcba2822ef3dca513fb26d6284a6302918cb20a566edcce1b66d4ff60c8bcb01a83f7378d6d76052a09bb3623b3a75b710386d0c2c2d167a5f0af0254b99f614d0a3e865a20cdc35aace5e01eeafc68b7068d84b8e022d272428ded9e837fe2f663d32e04f85a6ef9208cc39b58481c2283ac4212421a3cf5fab50839d590495432b199172cf80a7b3e679710cf6966b756b1969a028675bc5dcc7882b2d379fea0cf298b3b686be1da31ef454b1b76772ffe2239c10d1377ff6c7130b88bf34eb3f75219c596288b58fb525de3c685fb4d42d3caf49c3ca88baee23a8e210cd2d5165a712b28882ac05a69ce514c69f10186716cd18c29fcaaf0abe0c7c92b3715ef0de7acac04d4a55788d48915229e3ffa2abdbc03856df62147c7344aff179060c9145494d9206eeecd92dfb5ac1ce4a2f3bdb4f165a1cdbf168c60303ddf6178fd8a521862f2e49098e45e2894f57c3cf247754a541c4cd0f39210ec658e0242bcbcc00de38e6d75074c65f79b369cd2906fd295d082dd5a58cc29e245cfce0cb76b7b924d4db26f35111b9eef7a85c7e8625b7ed0eb94e74b015312004316f541e113e5121ce1853dc1582f70903cf7e1646a11eda45788441acf1a368e638f7d2a6d2914dd6c715e579636ac14323f79293daab7e510d8e763289a4d9f7da20bbdcb538e5470628968810e28db628048094b321687ac42cd3e8fefc8bc676258577481b1a57c8dea0dd7762eb289356f1fd002011c03c476196aefc518c2dd415f9a61f7455649cb485cdda999c6938de17ccf397898f8472e3d7e0eb4055f73081ce925c8f3bfeb097e78327956866b2046a7c7e32887049d4086373c108de236df9ef37b6d90c88a75412dd0c8983a5595400911e4b86169aa42409c0454de67bf0aec0cd17d213248b564f36aae2171c9caa75121c6ec8576e52d7c4703fb2fd512f139bb1360cc91a7641ae8898c59224ada48243d3fe678aed09fd7a693e599b5bc185d29c2a798d8449f0a9495875475105b616649744cb2c2bf368550fa7ce8f9868fe2ce44ed6905dc046d53920e57cf0b0db68f4e6cfb82bb2b76d89a38bbca6984dd49a218fc4e5b374f3f4ed1c04fc89c528bfd5aa3d8ff720cb68d59e9c8c98ad16e7feb79874a1bbdf0a3d4fa2c5005b6d8bd51b7f700658c3a636d6202cd8750e4c2bd457d976aefd599ee4ef2d7d385781721f527e997efccc9d3cec8a29aafbbc1b3d22083fe99ac2f12afe0cb9d7f4e48abea204aca40fd713a0ca782dd64c563a3101c9f92a4d8f281bfd92ff54d2612a661763981b5be7183b20cfb003299602324c5064a8fe6863b8107758741ba3c5797948f7e9d3dac297295a1ac20044e8e1c06a022e2dac4837aacfe0a9359499f4264c9c217fceed7a2df8bfcefc10b28dbc0963584c1c7268a79058c19353c03c6ea1ce25cda5ee441fd635020e45668fd5536cc0bab4051c38334e5f89937e828003d7a1a4404b2a88ec2fcbd2740422ec0e27146f79aab033f0a13420aef86df5cacd55256edd70f5afc95424aa7480150a8d3da46006eacbf12010116210284d771e128e0a868277abf31b942cba58c60fc1601ccc322e7ff2c355de997525adc500e37da2d3023e96a43ca5a6ab9a8192d52e01bc53fac3095e0efa3a4afb71706daf6fd39b64ef5899f69dd8e97cae4aff61c6c262b2eb0c8a4ab111d35d1fc44ef8d146f344aec5c8b4c83b04f6f542ac0be66ed8a34d4007ad2a840035190a2cd873e56c3e73de0c1effb7caf3bf9afbd6a8159ddb37ff870febbfcab10b280b677e706ab15faebb51951de62c5cca3dd9134c36110efa8c8d85ce3257e220f269a3c087b579074a28d6c257e6f395e30d9a4cdd80cdcda6e8427c600f76a156e93fbd295b0ac13f9810fee2d8bfcc572b95ea4887c60ea2889fa5daca4d63e46224d4d6eb11551c6bd7f36d0429d0fd6bcc1570352c60213cc6a33018d82877a4a556a7a3880c0a1715f023ecb65623137eb718737aca178a28a661aeac1f15ee72cde1a1f1563e2ef1973ff0496b30e154f57d5914039018d1ceb9f997d83df11a1ea822da8337c4fb433781bf6959c52a488a8e65cd9d337110dac0b8a137b47b1024c8ce9600728a09409bbaaddc49223e8055d748fa7e1b43d9cbd30cd0545cb99296941cdfe15de7a7481f1551af760403bc750f1a81a4ae2939ad51ef6d4f9d14ab42aa0fcf867a73cb8e9c1fde51fb06a816f3f7312ec603bda56d565b5e744bfda93f43ea07e13d193ac925aac26e047340c737b9269b62cf8e977395624a5ba77c3b0df047be74adc0521e9bcc5939b349f24557a137c010aaa94ee174f60f6bdac2bca389236bb414d5a4392a7c35d34bb9e3f96b5fd0c72652112d4c8e63d7104154286728fb7ac1d2ff31cc0bb69310f6e27a8f852cd9f2a76e11cecbf320bfaa4b196ef47473852a03396a5789e464de9dc83e65dfe29d2fe20283366cce4abfff4b97aab519167e9b3cf764e2af21d53bf5c98bf681f979ea9912fc8be951752b8c236e6ef61c63f087bff63a6cc3ab9e26dfdb3bcc4de41e7180d65fc987d7 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"},{"name":"特征工程","slug":"特征工程","permalink":"https://wiki.quartz.ren/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"006.算法工程","slug":"算法/006-算法工程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"},{"name":"特征工程","slug":"算法/006-算法工程/特征工程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"}]},{"title":"1.分布式架构体系_专题-开篇介绍(架构概述)","date":"2024-09-09T16:05:57.000Z","path":"wk/平台工具/[1]架构设计/03.分布式架构体系_专题/001.架构设计概述/","text":"单体架构早已成过去， 随着互联网和业务规模的发展，分布式系统已经随处可见，掌握分布式架构的知识体系 显得尤为重要. 这里主要是对 分布式架构的认识总结. 分布式架构体系设计 是一种将系统得 不同组件和功能分布在多个节点上，通过网络进行协同工作的架构设计理念和方法. 1.主要特点1.1 去中心化不存在单一的中心控制节点，各个节点相互独立又相互协作. 1.2 分布式部署系统的各个部分运行在不同的物理或逻辑节点上 1.3 网络通信节点之间通过网络进行信息传递和协调 2.目标 高可用：通过冗余和容错机制，减少单点故障对系统的影响，确保系统持续可用。 可扩展性：能够方便地添加或移除节点来适应业务增长或变化的需求 高性能：通过分布式处理和负载均衡，提升系统整体的处理能力和响应速度。 容错性和可靠性：即使部分节点出现故障，系统仍能正确运行或快速恢复 数据一致性： 保证在分布式环境下数据的完整性和一致性 弹性：可以动态调整资源分配以应对不同的工作负载 todo： 怎么实现这些目标？都有哪些实践？常见的中间件都有哪些解决方案？ 如何和别人直观的描述这些内容？ 3. 常用架构设计模式如何选择适合的架构设计模式. 架构模式 说明 优缺点 具体的实现技术 相关的中间件 *分层架构模式 将系统分为不同的层次，如表示层、业务逻辑层、数据访问层等，各层职责明确。 优缺点 - - *微服务架构模式 将系统拆分成多个独立的微服务 - 数据6 - *事件驱动模式 客户端与服务器 - 数据6 - *微核模式 客户端与服务器 - 数据6 - *整体架构 是一种用于设计和构建企业信息系统的框架和方法 通过包含多个层次或视角，例如业务架构、应用架构、数据架构和技术架构等 - - 分布式对象模式 客户端与服务器 - 数据6 - 管道-过滤器模式 - - - - 主从模式 有主节点负责主要任务处理，从节点提供辅助或备份 - - C/S 模式 客户端与服务器 - 数据6 - MVP模式 客户端与服务器 - 数据6 - 分布式缓存模式 利用缓存提高数据访问效率 - 数据6 - 分布式缓存储模式 如分布式文件系统、分布式数据库等 - 数据6 - 分布式协调模式 如使用zookeeper等进行分布式协调 - 数据6 - 优点：分布式系统的目标， 解决了高可用、扩展性、高性能、容错、弹性等问题。缺点：负责性增加、 数据一致性挑战、分布式事务难题、部署和管理复杂、成本高(构建和维护分布式架构 需要更多的硬件资源和人力)、网络延迟和开销 3.1 架构模式总结不同分类的架构（技术架构、产品架构、算法架构、云计算架构、解决方案架构、业务架构）todo 这些模式怎么划分？ 软件设计模式？区别？todo：自己的认识和总结？ 3.1 整体架构模式整体架构模式的目的是： 确保企业信息系统能够支持企业的战略目标，同时保持灵活性、可扩展性和可维护性。 整体架构模式通常包括以下几个关键组成部分： 业务架构：定义企业的业务流程、组成结构和业务策略，以支持企业目标 应用架构：定义企业应用系统的结构和交互方式，包括应用的功能、接口和服务 数据架构：定义企业数据的组织、管理和访问方式，包括数据模型、数据存储和数据交换 技术架构：定义支持企业信息系统的安全策略和控制措施，以保护企业资产和数据 安全架构：定义企业信息系统的安全策略和控制措施，以保护企业资产和数据 集成架构：定义不同系统和组件之间的集成方式，以实现数据和流程的无缝流动 整体架构模式还可以能包括 治理、风险管理、合规性和其他方面的考虑。 通过采用整体架构模式，企业可以确保其信息系统的设计和实施与企业战略保持一致，并且能够适应不断变化的业务需求和技术环境。 4. 分布式系统模式架构模式 相比分布式系统模式，是一个更广泛的概念，不仅适用于分布式系统，也适用于单体系统。 架构模式提供了一种高层次的抽象， 用于知道软件系统的组织和设计。 架构模式通常关注于系统的结构、组件、它们之间的关系以及它们如何交互。架构模式可以包括分布式系统模式，但它们也包括其他类型的模式，如： MVC（模型-视图-控制器）模式：用于分离用户界面和业务逻辑。 管道-过滤器模式：将数据流通过一系列过滤器进行处理。 分层架构模式：将系统分解为不同的逻辑层，每层负责不同的职责。 总的来说，分布式系统模式是架构模式的一个子集，专注于解决分布式环境中特有的问题。而架构模式提供了更广泛的设计原则和实践，适用于各种类型的软件系统。 分布式系统模式都有哪些呢？ 代理模式：一个中间代理(代理服务器) 代表客户端与服务端进行通信，可以提供负载均衡、缓存、安全等功能 断路器模式： 命令查询责任分离(CQRS)：将读取(查询)操作和写入(命令)操作分离， 以提高性能和可伸缩性 事件溯源： 领导者选举： 发布者/订阅者：kafka等。 消息生产者、消息消费者 订阅. 分片模式： 5. 难点 分布式一致性 分布式事务管理 网络通信与延迟 分布式故障处理 资源管理与调度 数据分布与管理 分布式锁与同步 性能优化 监控与调试 安全问题 5.1 网络通信与延迟在分布式架构体系设计中，如何避免网络延迟和开销？ 对网络延迟赫尔开销的理解： 这是分布式系统固有的挑战之一，但为了获得诸多优势需要面对现实困难问题，需要在性能优化和系统特性之间权衡和取舍 解决办法包括： 优化网络架构、数据压缩、缓存策略、就近访问、异步通信、协议优化、资源预分配、负载均衡策略 等 合并请求、优化网络协议、智能路由(负载均衡)、流量控制、系统优化(减少不必要的通信) 如何评估网络延迟和开销问题呢？ 基准测试、监控工具、性能分析工具、日志分析、压力测试、分布式跟踪(系统)","tags":[{"name":"架构设计","slug":"架构设计","permalink":"https://wiki.quartz.ren/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"03.分布式架构体系_专题","slug":"平台工具/1-架构设计/03-分布式架构体系-专题","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/03-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E4%BD%93%E7%B3%BB-%E4%B8%93%E9%A2%98/"}]},{"title":"C++数据类型","date":"2024-09-08T17:13:34.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/Cplus教程/001.数据类型介绍/","text":"1234567891011121314151617#include&lt;iostream&gt; #include &lt;limits&gt; using namespace std; int main() &#123; cout &lt;&lt; &quot;\\t最大值：&quot; &lt;&lt; (numeric_limits&lt;double&gt;::max)(); cout &lt;&lt; &quot;\\t最小值：&quot; &lt;&lt; (numeric_limits&lt;double&gt;::min)() &lt;&lt; endl; cout &lt;&lt; &quot;long double: \\t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(long double); cout &lt;&lt; &quot;\\t最大值：&quot; &lt;&lt; (numeric_limits&lt;long double&gt;::max)(); cout &lt;&lt; &quot;\\t最小值：&quot; &lt;&lt; (numeric_limits&lt;long double&gt;::min)() &lt;&lt; endl; cout &lt;&lt; &quot;float: \\t\\t&quot; &lt;&lt; &quot;所占字节数：&quot; &lt;&lt; sizeof(float); cout &lt;&lt; &quot;\\t最大值：&quot; &lt;&lt; (numeric_limits&lt;float&gt;::max)(); cout &lt;&lt; &quot;\\t最小值：&quot; &lt;&lt; (numeric_limits&lt;float&gt;::min)() &lt;&lt; endl; return 0; &#125; double: 所占字节数：8 最大值：1.79769e+308 最小值：2.22507e-308long double: 所占字节数：16 最大值：1.18973e+4932 最小值：3.3621e-4932float: 所占字节数：4 最大值：3.40282e+38 最小值：1.17549e-38 java呢？ 分析几种情况： 真实值 小于 分裂值。 例如 81792.43380 &lt; 81792.4334 真实值 等于 分裂值 真实值 大于 分裂值 miss的情况 走左子树。 舍如方式通常采用“向最接近的值舍入”的策略。 选择距离 double 值最近的 float 值。如果有多个 float 值与 double 值具有相同的距离，则选择其中的偶数（也称为“向偶数舍入”或“银行家舍入”）。","tags":[{"name":"C++","slug":"C","permalink":"https://wiki.quartz.ren/tags/C/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"},{"name":"Cplus教程","slug":"平台工具/2-计算机基础/编程语言/C/Cplus教程","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/Cplus%E6%95%99%E7%A8%8B/"}]},{"title":"2.软件系统建模工具_UML","date":"2024-08-17T14:55:57.000Z","path":"wk/平台工具/[1]架构设计/01.架构设计体系与方法论/002.软件系统建模工具_UML/","text":"1. UML介绍关键词：系统建模、系统分析与设计、统一建模语言、软件建模与系统设计 1.1 UML概念(What)UML 的全称是 Unified Modeling Language，即统一建模语言。 1.2 可以做什么?(Where-应用场景) 软件开发项目：项目启动阶段，用例图可用于明确系统的功能需求和用户期望； 类图有助于设计系统的类结构和它们之间的关系，为编程实现提供清晰的蓝图。 企业信息系统规划：组件图和部署图能描绘系统的组件构成和物理部署情况，辅助企业IT基础设施的规划和优化。 数据库设计：通过类图和实体关系图(ERD)的结果，可以有效的设计数据库的表结构和关系。 业务流程建模：活动图可清晰地展示复杂的业务流程，帮助发现流程中的瓶颈和优化点。 系统集成：序列图和协作图有助于理解不同系统之间的交互方式和消息传递，从而实现高效的系统集成。 技术选项和架构决策：基于UML图对系统的描述，可以更有针对性地选择合适的技术框架和架构模式。 1.3 为什么用UML?(Why-重点)首先 随着软件系统的复杂度越来越高，并且软件开发迭代过程中往往有许多角色参与和使用，怎样从不同角色视角更好理解这个软件系统?其次，对软件系统以及各个模块组件清晰的理解有助于大家建立相同的认识便于软件生命周期过程中沟通和协作和减少理解偏差，有助于软件设计人员更准确设计更好的系统。 而UML工具包含不同的图表(模型)，提供不同的角度来让各个角色更清晰的认识系统。各角色人员包括系统分析师、设计师、程序员、测试人员、客户、技术文件撰稿人员。 那UML都有哪些图表呢，以及重要常用的有哪些呢？接下来详细介绍 1.4 UML图表类型大致分为结构性图表和行为性图表 1.4.1 结构性图表七中结构性图表包括： 类图 (Class Diagram) 组件图 (Component Diagram) 部署图 (Deployment Diagram) 对象图 (Object Diagram) 包图 (Package Diagram) 复合结构图 (Composite Structure Diagram) 轮廓图 (Profile Diagram) 1.4.2 行为性图表行为性图表显示了系统中对象的动态行为 ，可用以表达系统随时间的变化。行为性图表有七种类型： 用例图 (Use Case Diagram) 活动图 (Activity Diagram) 状态机图 (State Machine Diagram) 序列图 (Sequence Diagram) 通訊圖 (Communication Diagram) 交互概述图 (Interaction Overview Diagram) 时序图 (Timing Diagram) 2. UML图表其中最常用和最重要的2个是类图和时序图。 2.1 结构性图表2.1.1 类图(Class Diagram)类图是一切面向对象方法的核心建模工具。描述了系统中对象的类型以及它们之间存在的各种静态关系。 1. 关系类图有三种主要的关系 关联：代表类型之间的关系（一个人为公司工作，一间公司有多个办事处） 继承：传为实例关系图(ERD)应用于面向对象设计而设的一种关系。 它在面向对象设计中的继承概念相互呼应。 聚合：面向对象设计中的一种对象组合的形式。 各种关系的强弱顺序：泛华=实现&gt;组合&gt;聚合&gt;关联&gt;依赖 关联(Association)：表示类之间的联系，可以是单向的或双向的，具有名称、角色和多重性等属性。例如：学生和课程之间存在关联，一个学生可以选择多门课程，一门课程可以有多个学生选修。 聚合(Aggregation)：表示整体与部分的关系，部分可以独立于整体存在。比如，汽车和轮胎，轮胎可以从汽车上拆下来而任然存在。 组合(Composition)：表示整体与部分的关系，但部分不能独立于整体存在。例如，房子和房间，房间不能脱离房子而单独存在。 集成/泛华(Generalization)：表示子类与父类的关系，子类继承父类的属性与方法。比如，哺乳动物是动物的子类。 实现(Realization)：类与接口之间的关系，表示类实现了接口中定义的操作。例如，一个具体的排序类实现了排序接口定义的排序方法。 参考：CSDN:九种常见的UML图总结 在 UML 类图的描述中，一般在较为宽泛地提及类之间的联系时，可以使用“relation”这个统称（draw.io中不同的线段表示）。而使用具体的关系类型，如关联、聚合、组合、继承、实现等，通常基于以下情况：当需要清晰准确地描述类之间联系的特定性质和约束时，应使用具体的关系类型： 如果强调类之间是一种普通的连接和交互，没有明确的整体部分关系或层次关系，就使用关联。 当要表明整体和部分之间部分可以独立存在于整体的关系，使用聚合。 若要突出整体和部分之间部分不能独立于整体存在的强拥有关系，就用组合。 对于表示类之间的层次分类，子类继承父类的特性，采用继承（泛化）关系。 当类需要实现某个接口定义的方法和行为时，使用实现关系。 例如，如果只是简单地说“这些类之间存在某种关系”，可以用“relation”。但如果要详细说明“学生类继承自人员类”“汽车类和发动机类是组合关系”，就会使用具体的关系类型。","tags":[{"name":"UML","slug":"UML","permalink":"https://wiki.quartz.ren/tags/UML/"},{"name":"系统建模","slug":"系统建模","permalink":"https://wiki.quartz.ren/tags/%E7%B3%BB%E7%BB%9F%E5%BB%BA%E6%A8%A1/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"01.架构设计体系与方法论","slug":"平台工具/1-架构设计/01-架构设计体系与方法论","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/01-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%BD%93%E7%B3%BB%E4%B8%8E%E6%96%B9%E6%B3%95%E8%AE%BA/"}]},{"title":"开窍","date":"2024-08-03T01:56:24.000Z","path":"wk/项目管理/[3]生活学习/[2]教育/学习方法/002.开窍/","text":"开窍 是一件非常重要的事/点。浅层的学习可能是灌输，再着是理解和吸收、特征提取，解决学习困难的学习一定是开窍。 所以我们要寻找开窍的方法 早些年 学习不好的人， 往往是因为 对学习方法没有正确的链接也就是 没有开窍。 从心理学角度来看，“开窍” 通常指一个人在认知、思维或情感方面的突然转变或提升。 比如，一个学生在学习过程中，可能经过长时间的努力却没有明显进步，但在某个时刻突然 “开窍”，理解了之前一直困惑的知识点，学习成绩也随之大幅提高。这种开窍可能是由于多种因素引起的，如积累了足够的知识和经验、受到特定的启发或经历了关键的事件等。它往往伴随着思维方式的转变、创造力的提升或情感的成熟。 或者叫 领域、理解；突破和进步；心智成熟；从更广泛的人生层面来看，“开窍” 还可以意味着心智的成熟和成长。 如何开窍? 1.广泛阅读2.勇于尝试3.交流与启发4.坚持不懈的学习思考5.积极心态、良好环境","tags":[{"name":"教育","slug":"教育","permalink":"https://wiki.quartz.ren/tags/%E6%95%99%E8%82%B2/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[2]教育","slug":"项目管理/3-生活学习/2-教育","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/2-%E6%95%99%E8%82%B2/"},{"name":"学习方法","slug":"项目管理/3-生活学习/2-教育/学习方法","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/2-%E6%95%99%E8%82%B2/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"}]},{"title":"信息安全与机器学习.md","date":"2024-08-02T14:55:57.000Z","path":"wk/算法/001.机器学习/004.应用场景/001.机器学习在安全领域的应用/","text":"","tags":[{"name":"机器学习","slug":"机器学习","permalink":"https://wiki.quartz.ren/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"004.应用场景","slug":"算法/001-机器学习/004-应用场景","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/004-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"}]},{"title":"202409","date":"2024-07-24T01:56:24.000Z","path":"wk/项目管理/[3]生活学习/[1]认知迭代/202409/","text":" 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[1]认知迭代","slug":"项目管理/3-生活学习/1-认知迭代","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/1-%E8%AE%A4%E7%9F%A5%E8%BF%AD%E4%BB%A3/"}]},{"title":"202409","date":"2024-07-24T01:56:24.000Z","path":"wk/项目管理/[3]生活学习/[1]认知迭代/202410/","text":" 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[1]认知迭代","slug":"项目管理/3-生活学习/1-认知迭代","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/1-%E8%AE%A4%E7%9F%A5%E8%BF%AD%E4%BB%A3/"}]},{"title":"计算机网络总结","date":"2024-07-20T15:11:57.000Z","path":"wk/平台工具/[2]计算机基础/计算机网络/001.计算机网络总结/","text":"本篇主要总结计算机网络核心的知识点，包括网络概述、网络性能指标、网络体系结构以及其中的分层细节。 一、计算机网络概述主要内容包括： 互联网边缘部分、核心部分的作用。包括分组交换的概念 计算机网络的性能指标 计算机网络分层次的体系结构，包含协议和服务的概念。(比较抽象，需要理解概念) 计算机网络通信的一个显著特点是：间歇性、突发性。 1.1 互联网边缘、核心1.1.0 什么是因特网 协议：一系列规则和约定的集合。这些规则和约定用于管理两个或多个实体之间的通信、数据交换和交互操作。 1.1.1 网络边缘1.1.2 网络核心电路交换、分组交换(数据报、虚电路) 构建网络核心有两种基本方式：电路交换、分组交换。 电话交换：在通信双方进行通信之前，网络会在发送方和接收方之间简历一条专用的物理电路路径，该路径在整个通信过程中保持，直到通信结束才释放。（优点：通信质量稳定，实时性强；缺点：资源利用率低、灵活性差） 分组交换：将需要传输的数据分割成一个个较小的数据包，称为分组。每个分组都包含一个源地址、目标地址和一些控制信息，然后这些分组独立地在网络中传输，并通过网络中的节点(如路由器)根据分组的目的地址和网络的当前状态，选择合适的路径进行转发。 一个简单的类比如：考虑两家餐厅，一个需要预定，而另一家不需要预定但不保证能安排。 对于需要预定的餐厅，我们离开家之前要承受必须先打电话预定的麻烦，但到达餐厅时，原则上能够立即点菜。 不需要预定的餐厅，没有预定餐桌的麻烦，但也许不得都不先等到有空闲餐桌才能找服务员点菜 计算机网络书中主要和因特网、分组交换有关。然而，理解因特网和其他计算机网络为什么使用分组交换，而非更为传统的用于电话网的电路交换，这一点很重要。 1.电路交换频分复用(FDM)、时分复用(TDM) 2.分组交换现代计算机网络中，源主机将长报文划分为较小的数据块，并称之为分组。 这些分组的每一个都通过通信链路和分组交换机(路由器或者链路层交换机)传送。 分组交换机(路由器、链路交换机)： 多数分组交换机在链路的输入端使用存储转发传输机制。 是指：在交换机能够开始向输出链路传输该分组的第一个比特之前，必须接受到整个分组。 存储转发时延：由于存储转发机制，分组交换机沿着该分组的路径在每条链路的输入端引入了存储转发时延。时延和分组的长度成正比。 排队时延：如果到达的分组需要跨越链路传输，但发现该链路正忙于传输其它分组，该到达分组必须在该输出缓存中等待。 分组丢失：如果一个到达的分组发现该缓存被等待传输的分组占满了，在这种情况下将出现分组丢失。（分组丢失怎么解决：超时重传、分组编号、ACK机制、流量控制、拥塞控制等待） 3. 数据报/虚电路网络分组交换网络有两大类：数据报网络和虚电路网络。它们的差异在于：其交换机是使用目的地址还是使用所谓的虚电路号朝其目的地转发分组。 因特网中路由器根据主机目的地址转发分组，因此因特网是一个数据报网络。 数据报网络 虚电路网络 4. 分组交换与电路交换对比 电路交换 分组交换 时延 时延低 端到端时延:变动不可预测 成本 较高 低 效率 利用率低 简单有效 1.2 网络的性能指标常用的7个性能指标：速率、带宽、吞吐量、时延(发送时延、传播时延、处理时延、排队时延)、时延带宽积、往返时间RTT、利用率 非性能指标：费用、质量、标准化、可靠性、可扩展性和可升级性、易于管理和维护 1.3 计算机网络体系结构 主要重点学习五层协议。 二、物理层信道、单工、半双工、全双工 物理层设备： 传输介质：双绞线、光纤、电缆数据通信基础：信道复用技术： 三、数据链路层(数据单元：帧(Frame))网络分类： LAN(局域网)、MAN(城域网)、WAN(广域网)。它们的划分主要基于覆盖范围、传输速度、网络拓扑结构、管理和控制方式等因素。比如： 覆盖范围：局域网一般在几千米以内，通常是一个办公室、一栋建筑物、一个校内的网络。城域网一般覆盖一个城市，通常5-50千米。 传输速度：局域网内一般10Mbps到10Gbps之间；城域网一般1Mbps-100Mbps之间，广域网一般几kbps-几Mbps之间。 网络拓扑结构：局域网(星形、总线型、环形、树形)；城域网(环形、双总线型等)；广域网(通常不规则的网络拓扑) 应用场景：局域网一般用于企业内部办公、学校教学、家庭网络；城域网一般公共服务设施、企业之间通信；广域网实现跨地区、跨国家的通信和数据传输，如互联网。 这几种网络技术细节后续展开。比如WAN技术包括专线(VPN)等. 差错控制、流量控制、介质访问控制协议。 四、网络层(重点) 4.0 网络层协议IP、ICMP、ARP、RARP、OSPF… 4.1 IP协议网际协议：因特网中的转发和编址 因特网的网络层有三个主要的组件：IP协议、选路组件、网际控制报文协议(ICMP). 4.1.1 IPV4数据报格式由首部(包含选项)、数据 组成 IP数据包分片 MTU(最大传输单元)：一个链路层数据报能承载的最大数据量叫做最大传输单元。 4.1.2 IPv4编址(重点)全球因特网中的每台主机和路由器上的每个接口必须有一个全球唯一的IP地址。这些地址不能以随意的方式自由选择，一个接口的IP地址的组成部分需要由其连接的子网来决定 核心概念：子网、子网掩码、无类别域际路由选择、分类编址(A/B/C类) 子网：子网是将较大的网络通过划分逻辑地分成较小的网络。其主要目的是为了更好的管理网络、提高网路性能、增强网络安全性和减少网络广播流量。 子网掩码：是确定IP地址中网络地址和主机地址的分隔表示。 CIDR(无类别域际路由选择)：因特网的地址分配策略。传统的IP地址分类(A/B/C类)存在地址分配不灵活和浪费的问题。CIDR摒弃了这种固定的分类方式，采用可变长子网掩码(VLSM),通过指定网络前缀的长度来标识网络。 模拟信号和数字信号 是通信和电子领域中两种不同的信号类型。 模拟信号 ：是一种连续的信号，其信号的幅度、频率或相位等参数随着时间连续变化。例如：传统的音频磁带记录的声音信号、有限电视的电视信号。 数字信号：是一种离散的数值表示。这些数值通常是二进制的，代表不同的状态或信息。计算机处理和存储的数据、通过数字通信线路传输的数据等都是数字信号。 调制解调器(Modem)是一种在通信领域中用于在模拟信号和数字信号之间进行转换的设备。 1. 获取一块地址为了获取一块IP地址用于一个组织的子网， 一个网络管理员也许首先会与其ISP联系；ISP会从已分给它的更大地址块中提供一些地址。例如：某ISP自己被分配了地址块 200.23.16.0/20。 该ISP可以依次将该地址块分成8个长度相等的较小地址块，为该ISP支持的最多达8个组织中的一个分配一小块， 如：200.23.16.0/23；200.23.18.0/23；….外界其它部分不需要知道在地址块200.23.16.0/20内实际上还存在8个其他组织，每个组织有自己的子网 一块地址的分配取决于组织的具体需求和应用场景。网络规模较大、对网络的功能/性能有较高的要求，或者有特殊的网络应用需求 2. 获取主机地址一个组织一旦获得了一块地址，它就可以为该组织内的主机与路由器接口分配独立的IP地址。对于路由器接口地址，系统管理员手工配置路由器中的IP地址。 两种方式为一台主机分配一个IP地址： 手工配置、动态主机配置协议(DHCP). 除了为主机和路由器接口配置独立的IP，主要的工作还包括：规划IP地址分配方案、配置路由功能、配置访问控制列表等。 那第1条获取一块地址我理解是从ISP获取一块公网IP， 在一个组织中，IP地址的分配、路由的配置等 实际配置的是什么？是和公网IP有什么关系呢？是怎么通过公网IP访问互联网的呢？ 3. NAT(网络地址转换)背景：如果一个局域网变大了，则需要分配一块较大的地址，这时应该怎么办呢？NAT：应用更广泛、更简单的地址分配方法(网络地址转换)NAT中的地址用于 专用网络或具有专用地址的地域。指其地址仅对该网络中的设备有意义。数以万计的家庭网络的事实，许多网络使用相同的地址空间。NAT使能路由器对于外界来说甚至不像一台路由器。对外界的行为就如同一个具有单一IP地址的单一设备。 所有离开家庭路由器通向较大因特网的报文都拥有同一个源的IP地址，例如：138.76.29.7 ,且所有进入家庭路由器的报文都拥有同一个目的IP地址。 路由器通过从ISP的DHCP服务器得到它的地址，它再运行一个DHCP服务器(NAT-DHCP)，为家庭网络的地址空间中的计算机提供地址。来自广域网到达NAT路由器的所有数据都有相同的目的IP地址，那该路由器是怎么知道它应将一个给定数据报转发给哪个内部主机呢？ NAT转换表。家庭路由器一般都是NAT路由器. 虽然NAT在近几年得到广泛应用，但它也存在一些问题比如违反了所谓端到端主张、妨碍P2P应用程序等。 4. IPv65. 其它 怎么确认一个ip是哪类地址？根据第一个字节(网络号部分)判断：A类地址范围(1-126);B类地址范围(128-191);C类地址范围(192-223);D类地址范围(224-239);E类范围(240-255) 私有地址(IETF定义，对私有IP地址的范围明确定义：满足企业、家庭等内部网络的需求，同时避免与公共网络的IP地址产生冲突)A 类私有地址：10.0.0.0 到 10.255.255.255B 类私有地址：172.16.0.0 到 172.31.255.255C 类私有地址：192.168.0.0 到 192.168.255.255这些私有地址通常用于家庭、企业等内部网络，在互联网上不可路由。 子网掩码：网段划分？子网掩码和IP，如何区分是否同一个网段？(重点)当子网掩码为 255.255.0.0 时，这表示前两个字节是网络号，后两个字节是主机号。假设网络地址为 192.168.0.0 ，那么同一网段中可能的 IP 地址范围是 192.168.0.1 到 192.168.255.254 。需要注意的是，网络地址（192.168.0.0）和广播地址（192.168.255.255）通常不分配给具体的主机使用。例如，如果网络地址是 10.10.0.0 ，那么同一网段中可用的 IP 地址就是 10.10.0.1 到 10.10.255.254 。举例2：与10.110.12.29 mask 255.255.255.224 属于同一网段的主机IP地址是？子网掩码 255.255.255.224 对应的子网块大小为 256 - 224 = 32 。所以子网的地址范围如下：10.110.12.0 - 10.110.12.31其中网络地址为 10.110.12.0 ，广播地址为 10.110.12.31 。因此，与 10.110.12.29 掩码 255.255.255.224 属于同一网段的主机 IP 地址有：10.110.12.1 到 10.110.12.28 ，10.110.12.30 组播地址指在IP网络中实现一对多通信的一种特殊地址类型；组播地址的范围在IPv4中是224.0.0.0 - 239.255.255.255例如：视频会议、在线直播、网络教学等应用中，可以使用组播技术。 4.1.3 选路算法以上介绍了网络层的转发功能。 五、其它5.1 二进制数字调制FSK、DPSK VLAN 学习过程： 按7层从下到上依次学习。 再看TCP/IP体系结构，五层模型。 参考书计算机网络 - 第7版 谢希…","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"计算机网络","slug":"平台工具/2-计算机基础/计算机网络","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"策略治理_策略评价体系","date":"2024-06-24T07:55:57.000Z","path":"wk/信息安全/风控与业务安全/策略平台/001.策略治理_策略评价体系/","text":"6529a249a0af82b27e00ec9fb492a16554c827f272e9748714be7891901a63d8de314d6d0b6656af15cadc33b8cce5aa86c8b95ec593b02332f93dbbc84d4343222e9b804f962bacce50f4de7ab55acffe9516142e678310b11e54b99873542462fbd3f477668f73b69edfbf7df084952600abad77f454dddd2153ebe063a444b098fb9772b94a84396ea167c211466d4e05d706a5801e210b094f34eabfcd34907a082811091897da7eaa63eb95624bfc174946d447c8119d99de2e9636565d9b430ab9ab5e4f45ec5e77ee91c77de25ab0dce573baaceb9fdca9e976d073bf0f86fb93428d619f622dbb29e85ab4f9bf464317494b83d76c9edb841b2de1d84a48a65c509dae3c711a48fa89ae441fb4164b4d2b65fcdf2d2da5db3b216fe718bd35c7c852009c18cf38608b47df8c18d826a017530df7098102ce3c886705ae4f1f8a93806c661fd041a53a3d498af34db88726916996cf4565e72baf9f139fdd033d44dc10ee877c9595ecbc9437bb93b0acb62c041095499e55ff3f08977f8ec8032731e7690f36f2b213dc341f233bdfc580162f873a469e08d3801db390420e28d2b62a5975d5c60df5a97621d4cc1ce536b1731f376a568b087837d7e8575fe2cdf7d3fdfd8c873f8930bbd8744061ea1b4038d9d603bff061f5c9272d479e58e16d533a7266825a601e32fc8dc746d7a811d2b33250a64a96ae3d0c2dbbfe7e49581ef32db3a9b1dd5cb69ff70d2fe11f71c09499e60358d3a34f1b4251d7743cbc20dc5c96aaa56eb9153deb6f852e68f1d06230931de849c5ad81c1a12554e9cd035f3479ca089bdddf6cca4cc71e0f8187a57b55c5b46811e1a854abaa28c11ba489cedde1643b14c1e49bb0bbdf36d930eb758b02e37e9644e3a61830637106a0d82db582dd637d976c1d9be34ba607ea37e0713dcb2815650b8d0f870499f7b11eb36351b92cca22161d291e33bc76eb0300b77c7c76755e202ba68888f6f65a4c2252bcb1ddce5a4fb31b55621f3049e39f1575512fc06fd54a6493ffd1422371561be419a8610aff5ac6569843933e87d0a599041b3b71aa1069fa5e58648d23b6960bc82464de50eae683dea98d9acf08629a0aa36a80416c6e81bb73486eee66619d5b13176b6b3ddfb9a4fadd2385afeeb783791b9c624267e551074356510e832270283da58648e53c4f15594e7d5fff8a815a598f1c3e17e66371d02a53ace029eb72614bbf85e14ce2e0649e80b9136528fecbe9854bf2252a9d68cc4a39a32efca2b0faf456799c17a389587b42a160e0feefe5eb8e95038dd9b3dceb43cdaca2aceb49b3c64ffd5c4d97341c65c13eb510764a0b8b4fb0b9ef0abe1a52d929cd06c96c32f02ccb1ba3ec64e1539709402f059970e5fd86cce8aa9bcae4098b09113491e553c154dc8d3a1cea27a2c5d4d8af655dad0fae242e7a0dc74fcd8729b398c0e9070be8af5921fcfbd1ff4851e2fc2ba8b27351169db2de8380d50fbad5e34984db912455d33400c25f7b406dd81d2fa0169ff3ab8d3cdeca00be1fb0a2698e14b4c8f6bfdd2edbbc3d0552dc7d6f59758de3042be73c98c8e3c93378bd517cbb29811cceb10bf47197076c55b7ac796d6fc199cff69b5c482e1dd27b9a3cc372110c9e098e6a7059395060391c91e90e33554af10d47a52c29a740487c66ec0048035e28e029423bd094dd81a6773136902aa2daeaa63fd484d6464f6dd13f9373d6367e0ece0586cc2ba42ef55fcb67b998994f175f9db4e766cb181b12a78e2904fda9ea084abbd5691be7c784beee6d1f02eb010b1af30163af925f5277347e925d218bb7eb212f9604b3c18e3d985a255905d7421eb02fb7105b7c144be5ba59107d1a2dc69ce68baf539cf6fff55247b2d62501b3c29ce93faff33ec2d96a40c3451edd03304232b789f3dfdfb2b54aba06b38f680492c1e01c84d4a9dcebe5f99c2902961f3b2967eec659e63a727695f1e0d66771982c434265bcd182dd4e70c3fee0a716dbd1c8d383b64845526e4bf6a7049100149b3ca1a7f2d60cf3205e26e976804247df3f90d34f30e4644d6314ea1a5f518dc643d0267f7c5653fc25b9dac6ad2234cd5bb546262a5e92c9084056d5110401ff268ffd9742c5141d8b0616968be9a4a678aba383d325f4bd6ade7edc043978bc22d42021e805a8571c2b708d86ab9d5946ae32e4c9fceefaf453cf358a7401b4b3858ae30ce70ba1f00753cdd90ee8cad1df8b58aca4373c7c239a700d0c1ea205e9375bbc28d14391891f1a883dd6853eb84f97f45a382f46de943b28094d86d79e97cb129d72fbe496c2b5f6de556df1f5d0468b206b5d1f7897e8c8f2207b5dfc7c979e42c9e7415aaa5363a439ee104387d1a41f5f13a84fc94db27084a9ec75f2fcfc99e27f7d7c5eedf1228c86867951ca6c2be5a9cbb204c504dab92bfd0781f38383fbd18ca45b6e429a3e9dc3d783d4a8b6305ebed7978e395f36b5e0f4c03ec98dec084a44badba4a9cb46f554f599760f27bc9806adf0b6227eb91d3a6dd9185142e8d093b8df8855691f39e20ee1a6f442b7ea839ae3b4e06f221a8d44fad5f5464b407fd77ae9673bd8323d00faf59ec99fc42fb23e58f9fc5f2b47d4667324486a4f6be9a02925efb07a9faa3d7b19af6d65d321dcef7ecb74d3ac0679c2d3eeb513717dd1a3b799cca15bc8585a9851cd1beb1a731d4bee0767d03097d9a1 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"信息安全","slug":"信息安全","permalink":"https://wiki.quartz.ren/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"},{"name":"风控与业务安全","slug":"信息安全/风控与业务安全","permalink":"https://wiki.quartz.ren/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%A3%8E%E6%8E%A7%E4%B8%8E%E4%B8%9A%E5%8A%A1%E5%AE%89%E5%85%A8/"},{"name":"策略平台","slug":"信息安全/风控与业务安全/策略平台","permalink":"https://wiki.quartz.ren/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%A3%8E%E6%8E%A7%E4%B8%8E%E4%B8%9A%E5%8A%A1%E5%AE%89%E5%85%A8/%E7%AD%96%E7%95%A5%E5%B9%B3%E5%8F%B0/"}]},{"title":"策略平台产品","date":"2024-06-24T07:55:57.000Z","path":"wk/信息安全/风控与业务安全/策略平台/002.策略平台产品/","text":"6529a249a0af82b27e00ec9fb492a165139c3cab6083c44fcf717c7658439994a49d0760a03e592e92ca5352d78a28d2712f99923cfbe6672962a4fb5f2b37fc9f1ae2ccd083b052fe60c0550691c42fe610363a3c5fb3afb31aa4eff353e597a9af888da622ddc71c32254e2fa40dd843c90a080d491c7a1e4ab9176696089c304743e466b4b747ef94d07e1b7756b9783968e86fc2944dd3a33f36df1d631679f6029304342b2ab5725423060738ff62191688deca5c0392e1cb50798d5c483f36699b17d9015210be9f8ad7e4755c0f5e8e285f471ce89cd0f703d762da2a6fb39cc660597ecbbef74294e2d2b879708a1f6ec1cbdcd1f369c9353c82a0778acfa5e9f75ea88ee2787c27eeff63123129656221eb40881fcd0281d6253af5a21bf4397373b54ae9b4f44c0d1c3b09bd6dcc5e44da2e21b8254f79c572c24f1de90b43830e7371ae37077266c0942b670e136399814df46762d6f12391d03081a5d9b38ff5042f32e59316538950f2fdc4985df6565b464274da6b8ce170ed41907d3b2ef5d5f1937224446e9ff5dfb534b1e56a52d7740c408a3891b3d044ff49adfebb28de855242648bac38ed8a29aa13918b37b424fc43aedb6a8547a4aa5c7267337be42f7a9f7eaed337f624 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"信息安全","slug":"信息安全","permalink":"https://wiki.quartz.ren/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"},{"name":"风控与业务安全","slug":"信息安全/风控与业务安全","permalink":"https://wiki.quartz.ren/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%A3%8E%E6%8E%A7%E4%B8%8E%E4%B8%9A%E5%8A%A1%E5%AE%89%E5%85%A8/"},{"name":"策略平台","slug":"信息安全/风控与业务安全/策略平台","permalink":"https://wiki.quartz.ren/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%A3%8E%E6%8E%A7%E4%B8%8E%E4%B8%9A%E5%8A%A1%E5%AE%89%E5%85%A8/%E7%AD%96%E7%95%A5%E5%B9%B3%E5%8F%B0/"}]},{"title":"工作手册","date":"2024-06-07T01:56:24.000Z","path":"wk/项目管理/[2]发展规划/TODOLIST/工作手册/","text":"为什么很难形成习惯， 因为 每天的工作 都是 自由、随性的， 需要做什么没有计划？遇到什么学什么？ 这是一种低效、不好的学习方式. 把 中长期的学习目标 列成清单, 每天只按照清单 处理即可. 把学习和工作内容 框定在 流程和范围内. 深度学习_实践篇 启动win，连接网络 123ssh Administrator@192.168.0.115wsl 打开mac， 跳到 win机器的 wsl环境. 启动notebook(jupyterlab) 12345678910111213# 启动ml3.8环境， 支持 tensorflow2.11....conda activate ml3.8# 启动 jupyter-labcd /mnt/d/jupyter/quanoc &amp;&amp; nohup jupyter-lab --ip 0.0.0.0 --no-browser --allow-root &gt; jp_nohup.out 2&gt;&amp;1 &amp;# (重要)端口转发与 防火墙端口开启 (用于在mac中访问win wsl环境)netsh interface portproxy add v4tov4 listenport=8010 listenaddress=0.0.0.0 connectport=8889 connectaddress=172.24.11.211netsh advfirewall firewall add rule name=&quot;Port 8010&quot; dir=in action=allow protocol=TCP localport=8010# 浏览器打开(jupyter-lab的地址； 115为win机器地址)http://192.168.0.115:8010/ 实践 书中的项目， 并总结成 wiki，方便记忆 把总结的内容 提炼下， 讲出来， 分享的形式. (费曼) 深度学习_数学篇找到需要的数学章节 近期：梯度下降、 微积分、导数 回顾：线性代数_矩阵 概率论：正态分布… netsh advfirewall firewall add rule name=”Port 8000” dir=in action=allow protocol=TCP localport=8000 netsh interface portproxy add v4tov4 listenport=8010 listenaddress=0.0.0.0 connectport=8889 connectaddress=172.24.11.211netsh advfirewall firewall add rule name=”Port 8010” dir=in action=allow protocol=TCP localport=8010","tags":[{"name":"todo","slug":"todo","permalink":"https://wiki.quartz.ren/tags/todo/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[2]发展规划","slug":"项目管理/2-发展规划","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/2-%E5%8F%91%E5%B1%95%E8%A7%84%E5%88%92/"},{"name":"TODOLIST","slug":"项目管理/2-发展规划/TODOLIST","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/2-%E5%8F%91%E5%B1%95%E8%A7%84%E5%88%92/TODOLIST/"}]},{"title":"002.Bert模型实战","date":"2024-05-28T14:55:57.000Z","path":"wk/算法/002.深度学习/004.系列课程/002.Bert实战/","text":"1. 了解Bert模型BERT 是 Bidirectional Encoder Representations from Transformers 的缩写，意为多 Transformer 的双向编码器表示法 BERT是基于上下文的嵌入模型。它的原理是基于Transformer，可以把BERT看作只有编码器的 Transformer。 在Transformer中学习了如何将句子送入 Transformer 的编码器，它将输出句子中每个词的特征值。 另外，BERT的双向是什么意思呢？Transformer 的编码器是双向的，它可以从两个方向读取一个句子。因此，BERT由 Transformer 获得双向编码器特征。（可以理解为 对文本进行编码时，能够同时考虑一个词左右两侧的上下文信息） 原始的Transformer架构本身不是天然双向的。然而，BERT基于Transformer架构，并通过特定的训练方法和任务设置(如掩码语言模型)实现了双向的语言理解。 具体的工作原理在另外的篇幅再展开介绍。 1.1 Bert的配置 编码器的层数用 L 表示。 注意力头的数量用 A 表示。 隐藏神经元的数量用 H 表示。 1. BERT-base12 层编码器叠加而成；每层编码器都使用 12 个注意力头，其中前 馈网络层由 768 个隐藏神经元组成，所以从 BERT-base 得到的特征向量的大小是 768。 因此，BERT-base 模型的配置可以表示为 L = 12、A = 12、H = 768，它的网络参 数总数可达 1.1 亿个。 2. BERT-largeBERT-large 由 24 层编码器叠加而成。每层编码器都使用 16 个注意力头，其中前 馈网络层包含 1024 个隐藏神经元，所以从 BERT-large 得到的特征向量的大小是 1024. BERT-large 模型的配置可以表示为 L = 24、A = 16、H = 1024，它的网络参数总数 可达 3.4 亿个。 3. 其它 BERT-tiny:L = 2、H = 128。 BERT-mini:L = 4、H = 256。 BERT-small:L = 4、H = 512。 BERT-medium:L = 8、H = 512。 1.2 BERT模型预训练在大多数实际业务场景中，一般不会直接进行BERT的预训练。 预训练通常是由大型研究机构或公司在大规模数据上完成的。 1.3 BERT实战应用方式Bert模型应用方式有以下几种：微调下游任务(分类、)； 特征提取； 知识蒸馏；对预训练的Bert模型进行修改和扩展。 1. 微调(主要的应用方式)微调下游任务： 文本分类任务、自然语言推理任务、问答任务、命名实体识别任务 2. 特征提取利用预训练的Bert模型生成文本的向量表示，然后将这些向量输入到其它机器学习模型中进行后续的任务处理。 3. 知识蒸馏得到更轻量且适合特定业务场景的模型。 4. 模型修改和扩展1.4 从预训练Bert中提取嵌入要进行具体的实战，先看看怎么 从预训练bert中提取嵌入。 2. 实战1:文本分类任务","tags":[{"name":"NLP","slug":"NLP","permalink":"https://wiki.quartz.ren/tags/NLP/"},{"name":"Bert","slug":"Bert","permalink":"https://wiki.quartz.ren/tags/Bert/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"002.深度学习","slug":"算法/002-深度学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/002-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"004.系列课程","slug":"算法/002-深度学习/004-系列课程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/002-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/004-%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/"}]},{"title":"ForkJoin","date":"2024-05-10T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Java/多线程/003.ForkJoin/","text":"参考：https://zhuanlan.zhihu.com/p/397670985","tags":[{"name":"Java","slug":"Java","permalink":"https://wiki.quartz.ren/tags/Java/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Java","slug":"平台工具/2-计算机基础/编程语言/Java","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"},{"name":"多线程","slug":"平台工具/2-计算机基础/编程语言/Java/多线程","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"1.架构设计方法论理解","date":"2024-05-07T14:55:57.000Z","path":"wk/平台工具/[1]架构设计/01.架构设计体系与方法论/001.架构设计方法论的理解/","text":"1.对架构的认识1.1 架构是什么?对于技术人员，“架构”是一个很常见的词。 整个系统的架构、架构设计评审、开源系统(mysql、hadoop)的架构、大公司的架构 (微信、淘宝架构) 等。 虽然“架构”这个词常见，但深究一下“架构”到底指什么，大部分人可能不一定能够准确的回答出来，比如： 架构和框架什么关系？有什么区别？ linux有架构、MySQL有架构、微信也有架构、当我们谈到这些架构是，到底在谈什么架构？ 要解释这些问题， 首先要搞清楚几个相关而且相似的概念：系统与子系统、模块与组件、框架和架构。 系统：一群有关联的组成，根据某种规则运行，能完成个别元件不能单独完成的工作的群体。(整体、总体; 关键词： 关联、规则、能力) 子系统：(观察视角的差异) 一个系统可能另外一个更大的系统的子系统；一个系统也可能包含多个子系统 模块和组件：（在实际工作中也容易混淆）模块和组件都是系统的组成部分，只是从不同的角度拆分系统。 从逻辑角度拆分出来的称作 模块； 划分模块的主要目的是职责分离 从物理的角度拆分 的带的组件； 划分组件的目的是 单元复用 举例：一个简单的网站系统(比如学生信息管理系统)。 从逻辑的角度拆分，可以分为“登录注册模块” “个人信息模块”； 从物理的角度拆分，可以拆分为nginx、web服务器、mysql等组件。组件更多的是体现复用，而模块体现的是系统的逻辑组成. 框架与架构： (比较相似的概念，有较强的的关联关系) 框架 是组件规范：例如mvc、mvp、j2ee等； 框架提供基础功能的产品。 软件架构：指软件系统的“基础结构”， 创造这些基础结构的准则，以及这些结构的描述 但： 平常经常会遇到一些似是而非的说法。 比如：“我们的系统是MVC架构”， “重构成MVP架构”， “基于SSH框架开发”，“是SSH的架构”这些说法都是对的，原因在于架构的定义中：“基础结构”这个概念， 并没有明确说 从什么角度来分解，采用不同的角度或者维度，可以将系统分为不同的结构。 比如，学生信息管理系统中，从业务逻辑的角度分解，系统的架构是”有哪些模块，模块之间的关系“；从物理部署的角度分解， 系统的架构是”用了什么组件，之间的关系(数据流向)“从开发规范的角度分解，系统采用MVC框架来开发，因此架构又变成了MVC架构，”由Controller、View、Model 组成；之间什么关系(数据流向)” 这些架构， 都是“学生管理系统”正确的架构，只是从不同的角度来分解而已， 这也是IBM的RUP将软件架构视图分为著名的“4+1视图”的原因。 最终的架构定义： 软件架构 指软件系统的顶层结构。 (这个定义看似简单，但把系统、子系统、组件、模块、架构等概念都串起来了， 包含的信息丰富) 1.2 怎么学习架构设计我们工作中见到过很多架构设计，也做过一些架构设计。 但是我们做的好不好呢，很多人尤其开发人员做的系统上线后才发现很多设计上的问题，没有系统的规划和解决。 是因为 没有系统化的 架构设计思想和能力。 没有完整的从头到尾，从需求分析、软件系统的复杂度分析，到详细设计和时间 完整的结合业务场景做系统设计。 不管是我们遇到的 各个领域的架构 比如搜索架构、安全风控架构， 还是其中的数据架构、子系统架构。 其实最重要的是 结合实际业务场景，搞清楚架构设计的目的了；学习系统的架构设计方法和思路； 实践总结经验。 tips:了解架构模式及技术的发展历程， 在什么背景下出现，解决了什么问题。 无论是在平常的工作还是系统架构设计中，最重要的是发现和识别清楚问题。解决问题的方法有很多。其次是选择合适的方法(合适的架构模式和技术) 2.架构设计的历史背景2.1 结构化程序设计20 世纪 60 年代 ，高级语言的出现后，随着软件的规模和复杂度的大大增加，60年代中期出现一些软件危机。 典型表现有软件质量低下、项目无法如期完成、项目严重超支等，因为软件而导致的重大事故时有发生。（1963 年美国的水手一号火箭发射失败事故， 由于一行FORTRAN代码错误导致） 大型软件项目的延期、成本超支，结构化程序设计方案应运而生。结构化程序设计的主要特点是抛弃 goto 语句，采取“自顶向下、逐步细化、模块化”的指导思想。结构化程序设计本质上还是一种面向过程的设计思想，但通过“自顶向下、逐步细化、模块 化”的方法，将软件的复杂度控制在一定范围内，从而从整体上降低了软件开发的复杂度。结构 化程序方法成为了 20 世纪 70 年代软件开发的潮流。 2.2 面向对象程序设计然而随着硬件的快速发展，业务需求越来越复杂，以及编程应用领域越来越广泛，第二次软件危机很快就到来了。根本原因还是在于软件生产力远远跟不上硬件和业务的发展。 第一次软件危机的根源在于软件的“逻辑”变得非常复杂，而第二次软件危机主要体现在软件的“扩展”变得非常复杂 结构化程序设计虽解决或者缓解了软件逻辑的复杂性；面向对象解决业务变化带来的软件扩展。 面向对象真正开始流行是在 20 世纪 80 年 代，主要得益于 C++ 的功劳，后来的 Java、C# 把面向对象推向了新的高峰。第二次软件危机促进了面向对象的发展。 2.3 软件架构的历史背景流行在 20 世纪 90 年代开始随着软件系统规模的增加，计算相关的算法和数据结构不再构成主要的设计问题;当系统由许多部分组成时，整个系统的组织，也就是所说的“软件架构”，导致了一系列新的设计问题。 系统规模庞大，内部耦合严重，开发效率低; 系统耦合严重，牵一发动全身，后续修改和扩展困难; 系统逻辑复杂，容易出问题，出问题后很难排查和修复。 随着软件规模的发展，不同时期产生了 “结构化编程”、“”模块，“面向对象编程”、“对象”，“软件架构”、“组件”。我们可以看 到，“模块”“对象”“组件”本质上都是对达到一定规模的软件进行拆分，差别只是在于随着 软件的复杂度不断增加，拆分的粒度越来越粗，拆分的层次越来越高。 3. 架构设计的目的很多人对架构设计的真正目的还是比较模糊。 先来看几个问题：做了架构设计就能提升开发效率么?设计良好的架构能促进业务发展么?不是每个系统都要做架构设计吗为了高性能、高可用、可扩展，所以要做架构设计？ 但不是所有的系统都需要高性能、高可用。 那架构设计的真正目的是什么呢？ 从架构设计的历史背景看，整个软件技术发展的历史，其实就是一部与“复杂度”斗争的历史，架构的出现也不例外。 简而言之，架构也是为了应对软件系统复杂度而提出的一个解决方案 3.1 系统复杂度架构设计的目的架构 是为了解决软件系统复杂度带来的问题。 (回顾架构产生的历史背景和原因) 结论虽然简洁,但却是架构设计过程中需要时刻铭记在心的一条准则. 3.2 做架构设计的理解通过熟悉和理解需求，识别系统复杂性所在的地方，然后针对这些复杂点进行架构设计。 架构设计并不是要面面俱到，不需要每个架构都具备高性能、高可用、高扩展等特点，而 是要识别出复杂点然后有针对性地解决问题。 理解每个架构方案背后所需要解决的复杂点，然后才能对比自己的业务复杂点，参考复杂 点相似的方案。 如果系统的复杂度不是在性能这部分，TPS 做到 10 万并没有什么用。 淘宝的架构是为了解决淘宝业务的复杂度而设计的，淘宝的业务复杂度并不就是我们的业 务复杂度，绝大多数业务的用户量都不可能有淘宝那么大。 Docker 不是万能的，只是为了解决资源重用和动态分配而设计的，如果我们的系统复杂度 根本不是在这方面，引入 Docker 没有什么意义。 3.3 复杂度来源3.3.1 高性能软件系统中高性能带来的复杂度主要体现在两方面，一方面是单台计算机内部为了高性能带来的复杂度;另一方面是多台计算机集群为了高性能带来的复杂度。 单机复杂度计算机内部复杂度最关键的地方就是操作系统。操作系统和性能最相关的就是进程和线程。为了解决手工操作带来的低效，批处理操作系统应运而生。为了进一步提升性能，人们发明了“进程”，用进程来对应一个任务，每个任务都有自己独立的 内存空间，进程间互不相关，由操作系统来进行调度。多进程虽然要求每个任务都有独立的内存空间，进程间互不相关，但从用户的角度来看，两个任务之间能够在运行过程中就进行通信，会让任务设计变得更加灵活高效。 集群的复杂度虽然计算机硬件的性能快速发展，但和业务的发展速度相比，还是小巫见大巫了，尤其是进入互联网时代后，业务的发展速度远远超过了硬件的发展速度。 任务分配任务分解 简单的系统更加容易做到高性能可以针对单个任务进行扩展 3.3.2 高可用计算高可用存储高可用 高可用状态决策 独裁式：独裁式决策指的是存在一个独立的决策主体，我们姑且称它为“决策者”，负责收集信息然后进行决策;所有冗余的个体，我们姑且称它为“上报者”，都将状态信息发送给决策者。 协商式：协商式决策指的是两个独立的个体通过交流信息，然后根据规则进行决策，最常用的协商式决策就是主备决策。 民主式：民主式决策指的是多个独立的个体通过投票的方式来进行状态决策。例如，ZooKeeper 集群在 选举 leader 时就是采用这种方式。 3.3.3 可扩展性业务需求、运行环境方面的变化都会导致软件系统发生变化，而这种软件系统对上述变化的适应能力就是可扩展性。 预测变化应对变化 3.3.4 低成本、安全、规模4. 架构设计三原则系统架构设计原则 合适原则：“合适优于业界领先”简单原则：“简单优于复杂” （结构的复杂性、逻辑的复杂性）演化原则：“演化优于一步到位” 其他原则：高可用原则、可扩展性、可维护性、松耦合原则、性能优化原则、安全性原则、可测试性原则、成本效益原则、一致性原则. 4.1 合适领先的技术方案可能并不完全适配特定系统的实际需求、技术能力、预算限制、维护能力、以及业务发展阶段等因素。例如：一个小型企业的内部管理系统，如果强行采用业界领先但复杂且昂贵的架构，可能会导致资源浪费、维护困难，反而不如选择一个简单、实用且适合其规模和业务特点的架构 4.2 简单简单的架构有以下优点： 易于理解：开发团队成员能够更快速、更清晰的理解系统的整体结构和工作原理，降低沟通成本和理解偏差。 易于维护：简单的架构减少了组件之间的交互复杂性，使得故障排查、修复和系统更新更容易运行，降低了维护成本和风险。 提高开发效率：开发人员可以更高效地进行编码和测试，减少因为复杂逻辑导致的错误和延误。 曾强可靠性：简单的架构通常具有更少的潜在故障点和意外情况。 便于扩展：简单的基础架构在添加新功能或模块时，更容易进行规划和整合，不会因为复杂的现有结构而受到过多限制。 4.3 演化演化意味着随着时间的推移，根据业务需求的变化，技术的发展以及用户的反馈逐步改进和完善。这种方式具有以下优点： 降低风险：避免在一开始就涉及一个过于庞大和复杂的架构，减少了由于前期规划不准确或考虑不周全导致的重大错误 更好的适应变化：业务需求和技术环境通常是不断变化的。 通过演化的方式，架构能够更灵活地适应这些变化，而不是被最初的”一步到位“的设计所束缚。 成本效益：逐步投入资源进行改进和扩展，相比一次投入大量资源构建一个可能不完全符合实际需求的架构，更加经济高效。 增加学习和改进的机会，在演化过成汇总，团队能够不断积累经验，发现问题并及时调整，从而使架构越来越优化。 4.4 其它原则4.5 系统架构设计原则案例5. 架构设计流程识别复杂度设计备选方案评估和选择备选方案详细方案设计 不同的架构分类","tags":[{"name":"架构设计","slug":"架构设计","permalink":"https://wiki.quartz.ren/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"01.架构设计体系与方法论","slug":"平台工具/1-架构设计/01-架构设计体系与方法论","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/01-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%BD%93%E7%B3%BB%E4%B8%8E%E6%96%B9%E6%B3%95%E8%AE%BA/"}]},{"title":"0.华为HCIE课程","date":"2024-04-27T14:55:57.000Z","path":"wk/平台工具/云计算/05.解决方案_技能/课程学习/001.华为HCIE/","text":"HCIE： 云服务专家解决方案架构师 学习阶段: 4个 ; 学习周期: 2周 ; 每周学时: 3-10小时 第一阶段：企业上云技术基础 （企业上云顶层设计、云底层技术） 第二阶段：企业上云架构设计 （云架构设计） 第三阶段：企业上云实施和运维（云迁移实施、云运维与优化） 第四阶段：企业上云应用与实践（云服务使能、云行业场景最佳实践） 一、企业上云技术基础 企业上云顶层设计 云底层技术 1. 企业上云顶层设计1.1云转型时代了解云转型的挑战 驱动力和面临的挑战 背景：（以物理机为主的 传统IT架构 比如F5等） ；应对新的信息化需求。 企业IT架构3个阶段： 传统物理机架构 -&gt; 虚拟化架构 -&gt; 云架构(云计算应运而生) 解决的痛点（为什么要上云）： 对数据进行有效的处理、开发、管理是非常重要的， 传统架构中基本依托于物理的存储设备； 使用数据库和数据管理工具，受限于数据库系统的性能、数据量的急剧增长； 大规模数据处理性能表现不好。 影响业务效率。云化 提供了性能强大的数据服务：数据库服务、大数据相关的数据处理工具服务。 企业可以直接使用云上的这些数据服务来处理和管理企业自身的数据资产；对自己大量的业务数据进行数据挖掘分析，帮助企业进行数据化智能分析，以此来辅助经营和决策。从而为企业创造新的价值。 还有各个解决方案、融合大数据、AI相关技术 帮助构建全生命周期管理平台。 帮助客户解决 在更为复杂的场景下 由于多样性数据、多样性系统、多样性业务 所带来的数据接入难 数据融合分析难 促进消费难的挑战 助力行业数字化转型、释放数据价值、提升业务体验 让业务更敏捷 传统数据管理 传统IT基础设施方面：虚拟化技术、 烟囱式架构、数据/资源孤岛、统一平台、云平台、统一的平台、底层资源、上层平面、业务敏捷 对客户需求精准把控、容器技术。 免去了工程师 重复去规划底层资源的隔离，配额、环境配置等 使得业务标准可度量。让企业从原来的需要大量设备和系统维护人员 向需求更多的业务运营人员转变， 依此来实现硬件、系统、应用到人员的降本增效。 传统开发模式 以上3点是 技术驱动 。 还有业务驱动：将各个资源整合在一起。 政策驱动、云转型焦点问题（扩展性、高可用、性能、安全、成本）客户视角：五章可循、效率低、难开展 发展趋势：云出现早起，基于对云不成熟的担忧， 云转型主力军主要是一个互联网企业。 现在 随着云计算不断的完善和成熟，也有越来越多的传统企业 在对企业架构进行云改。 上云过程中的难点： 上云过程中的方法： tips: 怎么融合这些点 进行讲述. 1.2上云整体设计了解上云设计方法 2. 云底层技术2.1 华为云技术介绍2.2 擎天架构2.3 裸金属技术2.4 OBS对象存储技术2.5 企业级云网络(KYON)技术2.6 华为云边缘技术二、企业上云架构设计1. 云架构设计1.1 应用上云概述1.2 云上可扩展性设计1.3 云上可用性设计1.4 云上性能设计1.5 云上安全设计1.6 云上成本设计研讨：云上架构设计研讨什么是研讨？研讨的目的？ 实验1：云上架构设计实验2：云上架构设计综合实践三、企业上云实施和运维云迁移实施、云运维与优化） 1. 云迁移实施1.1 华为云上云迁移服务1.2 网络迁移1.3 主机迁移1.4 存储数据迁移1.5 数据库迁移1.6 容器化改造研讨：迁移方案研讨实验3：云迁移实验","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"解决方案","slug":"解决方案","permalink":"https://wiki.quartz.ren/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"name":"HCIE","slug":"HCIE","permalink":"https://wiki.quartz.ren/tags/HCIE/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"05.解决方案_技能","slug":"平台工具/云计算/05-解决方案-技能","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/05-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%8A%80%E8%83%BD/"},{"name":"课程学习","slug":"平台工具/云计算/05-解决方案-技能/课程学习","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/05-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%8A%80%E8%83%BD/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}]},{"title":"3.Softmax函数(ivew形式)","date":"2024-04-12T15:55:57.000Z","path":"wk/算法/001.机器学习/002.数学知识/函数/003.函数Softmax/","text":"1. 请描述Softmax函数的数学定义。1.1 定义Softmax函数是一种在机器学习和深度学习中常用的激活函数，特别是在处理多分类问题时。它将一个向量或一组实数转换成概率分布，使得每个元素的值都在0到1之间，并且所有元素的和为1。 1.2 函数定义(公式)给定一个样本的特征向量 $z$，Softmax函数定义如下：$ \\text{Softmax}(z_i) = \\frac{e^{z_i}}{\\sum_{j=1}^{K} e^{z_j}} $其中： $z_i$ 是输入向量中第 $i$ 个元素的值。 $K$ 是类别的总数。 $e^{z_i}$ 是 $z_i$ 的指数（自然对数的底数）。 分母是对所有类别指数的和。 1.3 数学特性 非负性：由于指数函数 $e^{x}$ 总是正的，Softmax函数的输出也总是非负的。 归一化：输出值的总和为1，因此可以解释为概率分布。 可微性：Softmax函数是连续可微的，这使得它在梯度下降算法中易于优化。 1.4 用途 多分类问题在多分类问题中，Softmax函数通常用于神经网络的输出层，将模型的输出（即每个类别的原始分数或对数几率）转换为每个类别的概率估计。这样，具有最高概率的类别将被选择作为模型的预测结果。 在计算损失函数的梯度Softmax函数的导数在计算损失函数（如交叉熵损失）的梯度时非常重要，因为它涉及到概率的对数，这在多分类问题中是常见的损失函数。 1.5 (扩展)为什么是指数函数 归一化：Softmax函数的目标是将一个向量转换为概率分布，即所有输出值都是非负的，并且总和为1，$e^{x}$ 能够确保即使输入值$x$很大或很小，函数的输出也能持在合理的范围内 区分度：指数函数能够放大输入值之间的差异。这有助于在多个类别中区分出最可能的类别。 数学性质：数函数具有许多有用的数学性质，如可微性、连续性等，这些性质使得Softmax函数在优化算法（如梯度下降）中易于处理。 2. Softmax函数如何应用于多分类问题？Softmax函数通常用于多分类问题中，其作用是将模型的原始输出转换为表示概率分布的向量，以便对多个类别进行分类。在多分类问题中，Softmax函数通常作为神经网络输出层的激活函数之一。 2.1 模型输出神经网络的输出层会输出一个原始的分数向量，该向量的每个元素对应于一个类别。这些分数可以是线性变换的结果，如全连接层的输出。 2.2 Softmax转换将这个原始的分数向量作为Softmax函数的输入。Softmax函数会对这些分数进行指数化并归一化，得到一个概率分布，其中每个元素表示对应类别的预测概率。 2.3 概率解释这些预测概率可以被解释为模型对每个类别的置信度。 2.4 损失计算在训练过程中，模型的预测结果会与真实标签进行比较，通常使用交叉熵损失函数来计算预测结果与真实标签之间的差异。","tags":[{"name":"数学","slug":"数学","permalink":"https://wiki.quartz.ren/tags/%E6%95%B0%E5%AD%A6/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"002.数学知识","slug":"算法/001-机器学习/002-数学知识","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"},{"name":"函数","slug":"算法/001-机器学习/002-数学知识/函数","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E5%87%BD%E6%95%B0/"}]},{"title":"2.深度学习中的函数","date":"2024-04-11T15:55:57.000Z","path":"wk/算法/001.机器学习/002.数学知识/函数/002.深度学习_激活函数/","text":"激活函数定义：激活函数是神经网络中的一种非线性函数，用于在神经网络的各个层之间引入非线性变换。目的：激活函数是用来加入非线性因素的， 因为线性模型的表达能力不够。引入非线性激活函数，可使深层神经网络的表达能力更为强大. 将神经元的输入信号转换为输出信号，从而引入非线性因素，使得神经网络能够学习和表示更加复杂的函数关系。 激活函数通常应用在神经网络的隐藏层和输出层，以及某些特殊的网络结构中。 常见的激活函数包括 Sigmoid 函数、Tanh 函数、ReLU 函数等。 1234线性激活函数是指激活函数本身是线性的情况。例如，线性函数 $f(x) = ax + b$ 就是一种线性激活函数。但是，线性激活函数在深度神经网络中并不常用，因为它们的组合等价于一层线性变换，无法引入非线性因素，从而限制了神经网络的表达能力。 1. 激活函数满足的条件 非线性 可微性：优化器大多用梯度下降更新参数 单调性：当激活函数是单调的，能保证 单层网络的损失函数是凸函数 近似恒等性：当参数初始化为随机小值时，神经网络更稳定. 激活函数输出值的范围： 输出为有限值时，基于梯度的优化方法更稳定 输出为无限值时，建议调小学习率 藏剑的激活函数有：sigmoid，tanh，ReLU，Leaky ReLU，PReLU，RReLU 激活函数使用建议 初学者 首选 ReLU激活函数 学习率 设置较小值 输入特征标准化，即让输入特征满足以0为均值，1位标准差的正态分布. 初始化问题：初始化参数中心化， 即让随机生成的参数满足0为均值，2/当前层输入特征个数开根号下为标准差的正态分布. 函数详解1. softmaxSoftmax函数是一种常用的激活函数，通常用于多分类问题的神经网络输出层，将神经网络的原始输出转换为表示概率分布的向量。 对神经网络 全连接层输出进行变换，使其服从概率分布，即每个值都位于[0,1]区间且和为1. 与其他激活函数（如ReLU、Sigmoid等）相比，Softmax函数的主要不同之处在于它的输出是一个概率分布，而不是单个神经元的激活值。 详解见下一篇. 2. ReLUReLU（Rectified Linear Unit）函数是一种常用的非线性激活函数 2.2 函数公式$ f(x) = \\max(0, x) $ 2.3 数学特性 非线性：因为它在 $x$ ≤ 0 时输出为零，而在 $x$ &gt; 0 时输出与输入 $x$ 相等。 简单：计算非常简单(只需要比较输入 $x$ 和零的大小，并输出较大的那个值).这种简单性质使得ReLU函数在计算上非常高效，可以加速神经网络的训练和推断过程。 稀疏激活性：… 导数的简单性：ReLU函数在 $x$ = 0 处不可导，但在其他地方是可导的，导数为单位阶跃函数。这种简单的导数性质使得反向传播算法可以高效地计算梯度，从而实现神经网络的训练。 抑制梯度消失：ReLU函数的性质使得它能够在一定程度上抑制梯度消失问题，有助于训练深度神经网络。ReLU函数使得正的梯度可以直接传播到输入，从而在一定程度上缓解了深层网络中梯度消失的问题。 ReLU函数具有非线性、简单、稀疏激活、简单导数和抑制梯度消失等数学特性，使得它成为深度学习中一种常用的激活函数。 资料：https://blog.csdn.net/in546/article/details/119621649","tags":[{"name":"数学","slug":"数学","permalink":"https://wiki.quartz.ren/tags/%E6%95%B0%E5%AD%A6/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"002.数学知识","slug":"算法/001-机器学习/002-数学知识","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"},{"name":"函数","slug":"算法/001-机器学习/002-数学知识/函数","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E5%87%BD%E6%95%B0/"}]},{"title":"1.导数与微分","date":"2024-04-10T15:55:57.000Z","path":"wk/算法/001.机器学习/002.数学知识/微积分/001.导数与微分/","text":"数学背景： 函数与极限(数列与极限). 导数概念在微积分中，导数是描述函数变化率的概念。导数可以理解为函数在某一点的斜率，表示函数在该点附近的局部变化情况。 1. 导数定义导数是函数对其自变量的变化率或斜率的度量。 给定一个函数 $f(x)$，它的导数 $f’(x)$ 或 $ \\frac{df}{dx} $ 在某一点 $x$ 处的定义如下：$ f’(x) = \\lim_{h \\to 0} \\frac{f(x + h) - f(x)}{h} $这个极限表示当自变量 $x$ 的增量 $h$ 趋近于零时，函数在点 $x$ 处的平均变化率的极限 (函数值$f(x + h)的变化量与 $h$ 的比率$)。$h$即自变量的增量 $ \\delta x $，是一个趋近于零的实数。 导数告诉我们函数在 $x$ 处的瞬时变化率，即函数曲线在该点处的切线的斜率。 另一种常见的表示形式是利用微分符号 $dx$ 来表示导数，即：$ f’(x) = \\frac{df}{dx} $这表示函数 $f(x) $ 相对于自变量 $x$ 的变化率。 tips: $h$ 是在定义导数时用来表示自变量 $x$ 的微小变化量，是一个无限接近于0的数。 $dx$ 是微积分中用来表示自变量$x$的微小变化量的标志，通常与微分和积分相关的符号一起使用 2. 导数的集合意义导数$ f’(x) $ 在 何上表示曲线 $y=f(x)$ 在点$ M(x_0, f(x_0)) $ 处的切线的斜率，即$ f’(x_0) = tan a $ 3. 函数可导性与连续型的关系可导 比连续. 连续不一定可导. 函数在某点连续 是函数在该点可导 的必要条件，但不是充分条件. 4. 多变量函数的导数对于多变量函数 $f(x)$，其中 $\\mathbf{x} = (x_1, x_2, \\ldots, x_n)$ 是一个包含 $n$ 个自变量的向量，其导数有两种常见的形式：偏导数和全导数。 4.1 偏导数(Partial Derivatives)偏导数是多变量函数在某一点关于其中一个自变量的导数。偏导数用 $ \\frac{\\partial f}{\\partial x_i} $ 表示，表示函数 $f$关于 $x_i$ 的变化率，而将其他自变量视为常数。 4.2 梯度(Gradient)梯度是多变量函数的导数的一种推广，它是一个向量，包含函数对所有自变量的偏导数。 梯度 $\\nabla f(\\mathbf{x}) $ 是一个向量，其分量表示了函数 $f(x)$ 在每个方向上的变化率。 梯度用符号 $\\nabla f(\\mathbf{x})$ 表示，定义为：$ \\nabla f(\\mathbf{x}) = \\left( \\frac{\\partial f}{\\partial x_1}, \\frac{\\partial f}{\\partial x_2}, \\ldots, \\frac{\\partial f}{\\partial x_n} \\right) $ 梯度 $\\nabla f(\\mathbf{x})$ 指示了函数 $f$ 在点 $ \\mathbf{x} $ 处的最大变化率方向。它的方向是函数在该点上升最快的方向，而其模长则是这个方向上的变化率。 tips: 在数学和物理中，模长（Magnitude）通常指的是一个向量的长度或大小，也称为向量的模或向量的大小。它是一个标量，用于表示向量的大小，而不考虑其具体的方向。 换句话说，沿着梯度的方向，函数值 $f(x)$ 的变化速率是最快的，而这个速率就是梯度的模长。","tags":[{"name":"数学","slug":"数学","permalink":"https://wiki.quartz.ren/tags/%E6%95%B0%E5%AD%A6/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"002.数学知识","slug":"算法/001-机器学习/002-数学知识","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"},{"name":"微积分","slug":"算法/001-机器学习/002-数学知识/微积分","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E5%BE%AE%E7%A7%AF%E5%88%86/"}]},{"title":"1.高中_62中常考函数图像","date":"2024-04-10T15:55:57.000Z","path":"wk/算法/001.机器学习/002.数学知识/函数/001.高中数学_62种常考函数图像/","text":"https://www.bilibili.com/read/cv27018632/ 普通函数 $y = C$ 特殊的线性函数，常值函数 $y = x$ 特殊的线性函数，称为 恒等函数 或 身份函数 $y = mx + b $ 线性函数 $y = \\frac{1}{x} $ $y = x^2$ $y = \\sqrt{x} $ 平方根函数 $y = a^x$ (当0&lt; $a$ &lt; 1时； 当$a$ = 1时；当$a$ &gt; 1时) 指数函数的一种形式，其中$a$ 是底数，$x$ 是指数 $y = e^x$ 自然指数函数 $y = \\log_{a} x $ 对数函数 (当$a$ &gt; 1 时；当 0 &lt; $a$ &lt; 1 时) $y = \\ln(x) $ 自然对数函数(以 $e$ 为底的对数，通常记为 $lnx$) 1. 线性函数线性函数的定义和区别： 线性函数的图形是直线，而非线性函数的图形可以是曲线、折线或其他形状，取决于具体的函数形式。 1.1 特性一次关系、可加性、简单性(线性函数简单易懂，容易计算，且具有明确的解释) 均匀性线性函数满足均匀性或齐次性原则即如果将所有输入值乘以一个常数 $k$ ，输出也将乘以 $k$。数学上，这意味着 $ y = mx + b = kmx + kb = k\\left(\\frac{y}{b}\\right) $ 叠加性即多个输入的线性组合可以通过分别计算每个输入的线性函数然后相加得到。也就是说，$ y = m(x_1 + x_2) + b = mx_1 + mx_2 + b $ 2. 指数函数指数函数是典型的非线性函数，因为它不满足线性函数的叠加性和均匀性原则。 2.1 底数的影响底数 $ a $ 的值影响函数的增长或衰减速率。 2.2 特殊案例 当 $a$ = 1 时，函数退化为常数函数 $y$ = 1. 当 $a$ = $e$(自然对数的底数) 时，函数是自然指数函数 $y = e^x$. 2.3 微积分… 三角函数 $sin x$ $cos x$ $tan x$ 反三角函数S曲线 $\\sigma(x) = \\frac{1}{1 + e^{-x}} $ sigmoid函数。其中 $e$ 是自然对数的底。这个函数的输出范围在0到1之间，常用于二元分类问题中作为激活函数。 $\\tanh(x) = \\frac{e^{x} - e^{-x}}{e^{x} + e^{-x}} $ 双曲正切函数。这个函数的输出范围在 -1 到 1 之间，是Sigmoid函数的另一种形式，通常用于神经网络中的隐藏层。 $\\arctan(x) $ 这个函数的输出范围是从 $ -\\frac{2}{\\pi} $ 到 $ \\frac{2}{\\pi} $ $y = \\frac{x}{\\sqrt{1 + x^2}} $ 代数函数","tags":[{"name":"数学","slug":"数学","permalink":"https://wiki.quartz.ren/tags/%E6%95%B0%E5%AD%A6/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"002.数学知识","slug":"算法/001-机器学习/002-数学知识","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"},{"name":"函数","slug":"算法/001-机器学习/002-数学知识/函数","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E5%87%BD%E6%95%B0/"}]},{"title":"6.架构师职责及基本的理解","date":"2024-04-07T14:55:57.000Z","path":"wk/平台工具/[1]架构设计/01.架构设计体系与方法论/006.架构师职责/","text":"6529a249a0af82b27e00ec9fb492a165dad2c7dc9d9153caf0a6ce05508277ec60d88f728824778fc6a333f80ef505bcaacf698fab125dd378884d6c1fd60816368337d4c7beb889991afca5973c7d87dbdeb99b42ec400a448bfccc481d633500098101e92a04070aba2dd8a5448cb8ad89297cd849e25db3d5f006ae5e31ea1d4b9f4542b094bd47066c33bebf552cd041cfec111a689ac92c7df67e445fb68408f66a57a3088819385ca3f5d9f84aa227f8722cea1547adf63f7470c987a92ee7f77e0cf9b55d3bf4c91bfbb621704d6af435aec56826a155c15a80159e9b84ffa17a6b078e087bd638fe0306ff5ab918dca27b33644673507bcc7d59c435efdd1d1e7e61fc1484c393aee89b896a871550ec04ae6b8052a2530b7664eed3d31bd90c64196d126d15b35084bf71de6c85ae546d0c6520aa77e30895efeaf931e73192618305d7d0f3c3c960609e524029cb3434c472ac6a0f9f0f2c108d2f261c455134d563381da1cc5059daafdf2025544ffd7ecfae0999021e0e3f8695caf193cd7e100c19a591f17e229aa2125aa0cc2a3b72c09d1de61db6a1b48829075271486fccd8f67be08eeb7e3b43e7f4abfab32178e51fd3beb71e53933d17f93ddc579c94e4c7edb7c19c3021639b48a657893cbfa77041e829094a4cc349e9971ca4267396c47ed84b997af56d67d992a7dfd8df81cd17b935779d96b834a5a95a2fc2e7856ca0aa68ea7b7ef1a1071cef353f661aa1b8d6c0f0d7b9f70beb8ba09157a42972331929134c703f4bb6a7ea9efa32a50a8b1d131890f4d37861ce2ef88ce61697df29ae092bb0c82d9c2e7bf7d92579c46b97952402bfd4041bd1c8b06829d38ffcb4ffa96087a58618f4c8ebab5fff9df5883e8d4a829f075e2de4d7e481b28d8e78a9ce44a8e72e78086d0be02443a92548f9f08b2fba485ce616f8c4633967d7ca991e527abc94aab7d108a3e7699242fcfd0c30748f2223043f5de2577a69d809c5a240ce9a6a858ecea7120bd5684a1897e4e09c579addf4f2093a986186cecfa299d58af95bff264bd6098d9fd30600ba5138baced8a4072bf25a3f0131e03e608650c7fcddd383955f28400df87610a588a7302b443a5e4e6f95a53f4c8e785adeb89177917741c22fad58f7b4b22e4c345a1e0dfc48ecf2785503f68b0621d4fd99a2105675836b9a93a1ac100ddf0dba0d42f473386d832825d132bf773ab42f90f989362c6bd07d1d6352400ad6640ec02e191ff03e4d0e5202b51f7ce0f1a4a57e0338193b737840dc39efc43654fc7937d0bcea9793f60b56a23690880fc514bc1f1c4f4decd729207256f69bba0e8426b60150507adc794df9ab09d212f36d5cae90b12558a99f8b5b74225f8f83f1bb62bea5544ca1524f01ba315c6a7cd3a39cda097df04646ba3fa32956e1560a2b0f21c0155d11ad34ce9f159fd77524cc316c231fa758a5a7c0be53cbe110e2845fd6ffbc5d7c8c427ab13c80509e88b58ddc3710012047a25f2437f4b133f406e893bbf2429f78e87e375ba85350387a6579ed5f1ae912da645e824201f59e98edbda3c6255e4925507a8db200dc5cc5616ef2b9309f3205b57f79c83ac551ad3a26b7655a643b60c86277e0e75141b2179dcc422a612de5f77b7f5a43846e8591684668fc558b9c795705aeb0d061d8b9e7f365964d1dcfb9b26d379d6e82f958e05f749f7be3c11d3c30aa4aad6eab22ae72569c1bae00939c87ef2baab17992a98fe0ecb9cd85f3376dd68a45fbfdcdaf773ff51daee78e04bf2b529f955627ea9ae7b0b64aba23ae2d4f6a1207ee2bd5cdb009605e650a658eb5659507ed82c3ba2169421822fddd0559a30aca7c12cdde47669b678b06dbf60daa83d6241b4cea4daedf4ae25a53c28300ec282ff8e0d4083044bcc2eb70391837ff045b7cae3475dae3df9a6905f8b7d267c999f7166ecfbe3cedf9128bd8f229ec55be35cabe841e82f097bd602a59babb002a87caba79e72f191f547395e60993c97ebc20bd268826118509e88f68d5c87333791f984a1c360316fc812b332c72432e629a7005311a5399f83154757313ab402891c6fa56c3dca6fd5d335664bb392ceaa014781081313bc6e8a4f88128be31250c4a565d8906fec80a9a080dc9750cf08e6b0e793a565d3d83d3b456a4ab0dd25e5f39f5eeb5526d234d72cd14189e719d8fef431371e001ff35a52e46822fc101faa6b9ed51464a2cdbc5f2f6a3ba59a261750404e256f118f342db113d24035fb62ba90a288ca5e4730717d87b9cf852191be78c34b5e784c03a652a45bc7693429b70adcb43b388e5b2fda8a3732d0e8d18d69451a0b5433b6665d7a2fe1e9eb42e25fe5012447e99570d305741eef7589f13ad63ec8ecad911e27feadd89acba5c9777063a0406d75ce06c26677896ec8aaca15ce6a34661683fdbe30c148b6e6498f1cf97469c7c6c518be7ff11a5ac37a892955a73ed7b2a7356f3f6715b087748055c6fbf9888fc66fc6b642f301fb28983908f9e11726cb5174f8a4f9769555880fba27e2b6e8a301f624017eb59869cf36ecc5d05be21dde30c344723c4d389197b5c6c97b66ab249dd21815825edf964efbfc0a3157d153b124ffbaa286f8075ddc45fdd28268f68b015ad95bd466601546f27ffd644afb707187b223b0f77eb2fd9f087cec7c37f9516a08a 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"},{"name":"架构设计","slug":"架构设计","permalink":"https://wiki.quartz.ren/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"01.架构设计体系与方法论","slug":"平台工具/1-架构设计/01-架构设计体系与方法论","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/01-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%BD%93%E7%B3%BB%E4%B8%8E%E6%96%B9%E6%B3%95%E8%AE%BA/"}]},{"title":"设计模板_001设计模板","date":"2024-04-07T14:55:57.000Z","path":"wk/平台工具/[1]架构设计/05.学习资料及实践总结/设计模板_001设计模板/","text":"6529a249a0af82b27e00ec9fb492a165cd7b472eb2ff883b7cc2ddc06f5cd8c5 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"},{"name":"架构设计","slug":"架构设计","permalink":"https://wiki.quartz.ren/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"05.学习资料及实践总结","slug":"平台工具/1-架构设计/05-学习资料及实践总结","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/05-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%8F%8A%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"}]},{"title":"设计模板_架构设计文档模板","date":"2024-04-07T14:55:57.000Z","path":"wk/平台工具/[1]架构设计/05.学习资料及实践总结/设计模板_架构设计文档模板/","text":"6529a249a0af82b27e00ec9fb492a165cdeff919c1e3b0b703e0a95a87175d9e50975a8a1caeffca6ba04b165084d5c3ed000f549c5a145c738a3e08b814630293fdccfc911fe775a2d4726d9aba974cbf923a7042486403d056780f1e6368830697b3f3aa751bec7626e4f4419d2b8bc55d4251414f80cf5cd6bd1286d177af8a6bd8109f0439e24f216cda244f1bf56d26d5d3f05fb86d170a09c3d52c8c6ec504fd4ba1faa99efefa51da2ed6630a03d93e1e292d5220a19cdd76bf25ba03acc2afe99dcf3f9b531540992acd5f6d07d6ca0e528c6854a07b67d0dab7fd62779a7bd86b39fe731c201f1869f8f99b8bab3865d27ac4fac29be2eddd9f71566787ade8fc4cbd25a5e768830f158eb38510e4989d7b371ceef5c83b4df17cec35e673385571a65e4c6db1f4d36a6896c0024111028ac3cd4b550e446a92b0ac8b7568e17066cdc6ef3514cff5fc62d6ef2d12d0cafac561e63000da582047e75bb75214a437c09b7840038e859a23d4bbea41992c02efd99d9276ecdfa5068bf424f3b04a47019b7ef582deada4b2c70407b81abc76ecd386c119776eaf5f667eb8e1b53d460bdd696852e89dfbad5d3b2c18e1add814a6482d201e96a014b63c53190aeb1de6755e824d501fa352189699cd2ddff532481d086f4fd4928562279f2f3f28454e40d29320bff957af5c389a4fac0ffc0aeb39b7aef10f6d4a43c8ddc35710fa1bd90c395d02ad1c0ee3a7c507a81f6b76fac1e0e8e35ad14eb611dfe4613bc92bd42eac62c50e46ef01cc97e0f008257a00291c2e156a28a68c8ad0839e3a14e436a761949d16641db6b887ec10911111f90b89a7d98bf4146d49a5fefdb6b2e769ea9295fa55e5838f35fd412b15440c97125ada17807eecfe444efa56baebcae0719e68d5245c76d27f7afc5b8855717862294b24f3995331d9b4c87394c1d27c4723e2de6dc196f5a6921af5ff8fdc60177a66a95f29cc6955ad2e8ca5fc908a086d3b7da1dce21a592a39eaa1907f4abdccc330d8d9095a7082707a92c86f9970d4c36bdc61ae617b13401327625d4ef249e95fa77dbd35cd98e14f66d2880a218d13f90acd4df2f3f06827ac39f502d9be22ce9cf8f005e57339bcea167b815dd56650edf51680c12c8e1ae6ba1a6195650108e386ea63aeb76c7a46fcba869130627d7b7d5ffe04b6e3a4ee4c5c03e6895d6e6b002d34f02823894b49bcc9095791a6882fbc08e6b14073d9d2b3b261f7f41906efaa03f8600c2205d7dae4e61d53bfbe92669da87b02255f6703b49d43bd49031e9609499ee6dc3517dde9ab823ff57b4013f932f0797e6e7901cbd1429da07f5cfa39513a046bd22cbbebdc638da922d708a37574f2f3361893bdcc1d0057d700f0a41fb32f8d0241af899364b78b3726253d9a349ed2ada700264e4a71772d393ccca15b28065da7cbe2e4e6d29fe95b720fb7b200e60691cfdc1eb0cff145cbe53fbbdd5519192291e522461b144ec0eaf0f7497f6285dc304aa369a0c3988b57b59cac2087484e53b5f0cf72ab7cab05420a63c83499d7e92100e599a61fb92979d656704e1c2a5a3d6d9e00fc5278c85af4c42852d389bc97f9a0117dbc75a218080cdad781e8b7d96e24f76b0df8295c698fb1c267ea2ded003c6248ee5ba7bc9635768e806d5ab6d3bbe1a3910e8dec6c3b97eee6f4fd57a7d047a6725086a81b483782b474053dba410706e68f3abebc7cd8c091aa5e433d6810c8d31f231bf3096da41ef22cf473f5762d1d8c44e0a1c4b983406761b3db7d0f692357d3013b62c2c9fd6c889bf1ad549787791387ee3cfb20776e242f43b8b48dde0a3f89fc66d67c21c7f379748ac27e974dbf3abad2e2a0f27232153476ad3fbe8d66a1457300a1f1495bf78c0cfb810ad25547013cc437992dd371ad3d08aa54df83c07b8520fe446c8a38f6930d7aac71c2d70c301328f12c5fcf10ccdcd84b5f35863c6a0da84041cb90ddf22ad14255fae0dcc4d8139042c3b83c4be78645033319d50a2e90e213858d8f366769c0def326d40cab862fdc675d25fe7ad885ecb6a9758b73b770f13f8eaca138620c9bf21fb1caf1c1d27cd75f7fe6c4fc9295ec75e2330b5175eb3a35d18aadf156529dc236698fcde1906cb16e97fd77ecb0b0b2fdf23c23daa9359b485a744b9da00d59f67af920eaecc7cc2d4bcb1fd49aedd6b1c62d54d799447de649f4b3201c33b28beb533a042c32e6026ba20aab4e515547c14b42c6d194a815e6870521fd167bd40ffa236a3ca5cbdb2c90cfeca3fb0412090eaa9dd2e387ed8d0ad97865fd44b38b442ff03bde3c56e13f44c26e5a3eca08ee1dcfa61ccd801643fbba1478997f1f2aae0ba5e6785ff5659c4b1753eb1b4c5acaf1cc6098cd22bf76adbacbc1d1571df47aed569e51564ffccd87ce26b600b224a530bbcc15395216b419b25705b859e70099055e1c8e052326be6dbf9c308e8728eeef62d51d6eff697a608fa3ea21dba014f05ca442e93cb28e19660a79ef2da1ce7219b3fafe84ce85f1c0a014c41b46d66b82b2429ec2851552e48bbe7afcd36904811f56607e6a84dfc6fe34c29e2c1a8293bbe3ccbdf8ef5723a14a333960b9f3898bc1ce5661fc218726a2da29b8514ac71ac45f8104affa30adc654de26fcc5099b05fe4b75d719ed9f6b8e9c08e27f586c9e38ee6359a2f3e7a1bbe6599e82f53af3f9f66234ecdb17df0a65cfcb2c10562db8cc7f1979dfef6dc8c01af6965386c7394500367d43a11af8c5cbb9d376dcfa2b90f436ac9b143298f3a6249889ee16e319903e8ed1d0bbf998a7a729882bc71834fda2b94aaa7e51fd3db8ad12892b5d6246f79083b929ef21569f882ccf2d0bed58498f4a9a3ad22139a6d8b59a66bdf94befa540245a3e32084f54fc316a6998b0afb87d35b3cdf3ad7f64979a395e00d8f3d0091810a75abe203f57646f67759ae81e2b2cbfd0c1a5e649077ffa662899cbab53bd7ee9aa9869d61cc0a32daaa4d652ecd94255b1309724a41b137659c07584528ecbaf93641d1951cdc6f1fb2267c457ab4a0ae37626084637dcd67d2d2b4bd804e1e03c32193e3f84b73d9fe570f8e7e162583968c3f8431980879c52390642035c5c5498e68891bba431c57d123ee55e7c99709a9463ade8a7fb17d9480b72e054d6fd3e32c88482ad80cf28b8005fff33158afbcba0e92fc0f77486a11fba8eed9edd8fb9a5ee8a6cafb017225277b18da55ca49619328292a5a2a2e219a2174242701d00ae6b684e67a6ed1a831ca3256a701dec7e651df0ec92e8bafbf607c3dc639883d76f2994bdf501cc23856c8e0b75485b649c72e6b68ff61b9b9deac2a1296c6b6e3ba65cbf8ea7583478288609940321b4cbb86382d9bd384090b1ae470af44f937d33897b76145bfb38d100c54431399199425dc3e57030a2ef683a9e6e083dc7fcadab6587138cab8817d38ec29c4d8a8f76619aed87b5a144a918900e66678b0bcff2e89e7aaf49287dec0b981e6eeca52a0b1f845fe6f45907979862b45da70de0bd349352439858773bf3cf27d8cc882da9344641a10353488da4ddec9bb2a402fc658d23cbab69e5bda2eecefc999a43bda88175ca6ac7118341a585394c141726f73f06dc7806df01e78c9505bbb755acb15159fe80046a81501f2235edfb07ec6ef63ae14098f44471882cacc248cc56bf4786aab4a587322b41338b4f42e4f48a0990faec9e9b2a869e90ce7347637a011e4b6988590643cdd8ce924cda93a73f5112902265178a090c5a2f14b008e4e2efc80d8c4b44044e167b34e85ccb0cf74e7557e169fc33b01dcdd6b553abdb54bef611a2dfdbb6e003b6ecbed75f8455b1bd2e6fbd04ced6d728ede6b8b6644b8961f6f611b039c2076f1e70aa293eed215b924216711832b81a8ac59297ad27d1d436378122af58d9702082ba468c1dcfc5f69549d65d8e76410a1ec3e6a1756bfd27dc373f318ad772961362bc85608f53575912d471cbe955923efb6a560b8a4fb25a31a8e9d6b055b129bf9e4a4692bb60c53a7a1440989e87ab12eaa4bdba98feb758a8e20ebebd5889951e73d81f6be2bbf5937c90d88b06664eb95892a664d5b831669887bd50cb33d748a8a953b1d2d27881e5c61214628a9aa0b3f8f226aa6cb76c92113007eae66546ba8f0c3b5f7cc970ab9d0688acf444201d54cdbb44d9218562f82c2f8eb68506758887de8d291671cf85e8c4786a897c2b0898fb89074d1a1d7111326e837d82735ee0ff741c87222ebbbb23523e9f41acc9b72d3c89c92c007e3b92e1c12f61938265839f363b29664dfb6edd3741491d04e28e4395b2c2fd7bfe6c9e18fd9ace10a6124171687766ffa5a23434936dd17c4aba1c8c7344902dbaaa688ce70f6e06b303acad8706727628f14063ab858e474d877fd156320a839b87f3e8d0b830807e68dac64ea83991358e12406318f132f641c79ccc1ac38c3dbc6cead3cbfa263bbf8b512333466b4fc146100ce571147b7128a467dfdcc13f8aea4494318a17d07bd7705b2bac7355aa8e39c5bf6e810aeab28d4c3a69166eb6fca94414b26a6e72cf8152b2d5b88b8d2a63bb366c263ce72e287eea457a36f57242cbf4835ee75e4f2f9d2b6e4dc793b4c2994983e922cc6a72007f5fd967188fb2f31706d77b18e7b090da99da7913660a18f2f84dfb729c22e69517d850f2b1c0a527c9153f30356ea0672f887c43b095e56d024bc0aab5cc2aef48f87057cab1497c844db62531700c6163926ed22c4dc7bd003fcb86fcf5b7de03615f7359ec0c4554c209f28140a04ed9495a9b9baf9f108296d6ddd73e23e92ada47e80e8a5691ac6b95cfb663fe227426c680d057c60e581647fda284bc6ce04104e0291f1024df92c6836f32b9d7942e633653a7b0a6b7241f2a968a9718af5e8b5e5663e0afce5cafeb0e856d32babe99a27e7072cb5460ab6673d705dcf5a91e7a54060f52ca8760e0d17e7b4c0a247bfffcd54c3510414b13423bcbf6c946a00dc8a942a5b113771594c62f6940a1aa3347770d3942aea2670d2e8f37df8ad5362e786c18819c0177a99e491e3426e97c87f2267b1238bb560f351d15d6fbe56b676ac1b93d0296ad08df590c578683325aa92d274e8caa99627e1b165046ac2920e4d282db5e81ddad183d65700067cb567198b08a634db338c17a8d157292ea4a3632f69ea6bec85c868df04e71a62fc07520aa0f0a784a10015d641d24d362be8cf68f4015eec15f1a27f13a195ec7160171b38408c0d4c844aa0af7efb440e7972e6e85bee51120347678c650af60bd24066f670c1873310a82313e4d5ddc6cc457bdb703a36ec38ac657bab20b4cd470ffc72ac03e006be08cc6e650a7f17662578cadc7f2fc28605b64820c405644dbac0c5168ba45e2722933a48a1f72144935340499bde5b629c167fa401edc86530b476af13bd01209ae30789a985b78e19a9ad1b74926132660cc5954d49ea7ccb4eca8ac3d5c6242db6430222580b3509a9e88a8c9e9e01c7cd1da08d2abd7e3fc685dc668a493ee02d613d4a5aa9aed7479b97bf74adef0bef31f9ba1ba30934f4681ade4eca8a20d03438e6696310128e915e5ac230874aed37e7c2bab4e052a7f40f1a7954924dc84a8b54c7836017a729ef356944a48a2c6f7f672975635f7edc11b13b5dbe2254dce28b8c32c33c9b2aa42fff1f3389982c61dd7d6258de5da0c6cd600dbb7cd03518ce70c3d7d2cf62e0c87ef491ba3d716baa4fceeb6956eb8d0c9abe8ae69b206b502369083f63c681b884adcd3d419da8a1dc254c8c3ad6cc39e9d2130211d4f1cd396c6cd55a249824f825acc52c1f877a75987b2760f7791df70ab44cca3ef5476ad5a325162e8043a705f6c6b485c08bb99844f97e436ee02da8002b239158bcd4d9916471e431ce42c23686fd2d8d75f30f99e6b3c2a2fe8aa64d7a5d9ab8bcc71c50753de6298d23680dad55166d232f8d77ff885eabee3e9146d32c2076049704e17ac55b19699b787906b326bf8603dcf1668022874cc08b9b3681f7d628f610d6d567fe6f6fbc8d98725849d6ff359fbd7c8cc0a606bd1ebdd2a312d7fe8fcf6011181b37d6b14cf34b6dc960f8be2735b37660e31f6d0e6f4a8e7d9078eafb88e7ea0e4adbf8234ebdeba34f5b29e55ac49b7b5a2aa136a059fcff52eda8a8f9d0fe656346b20a18388e312681b76c15f1df14098d2fbb822295a07ee04c319e5b2be023593e752564785f758dc04967e1c7043222891ec86805dfc4fa584df617a3f5e44152ed3ac4d7112988aeae6932f62119c5891a66c45f334398936a7a3cbcd57301ff3447970ab2038eb12910b56642a93c4ca5b3bf9417ab525f6f4f2b6671e6dfefebcfd14018b69b6f88aa905747e58c679a28916e02737e1c5c60455552e27ab1911766149096e774bd595ec364fa7ab733ef8ba07545f67e01c569fd2827c17987789e41d4d7d1b611082856936a50dd188490bb4f020fc3d63d093aa1c07d82adc8baaa6f67f5513b510f83f998889db363b270f2520832f1f917a7c45af24cfdfd4d9840b1c7359addff9403e19c0a23a797614d855076e1ee89fa81011a71666ab91e160b78920db64caa12c8ba491d1dcd4a09f39d313b06861fb3f94d49f52492a08a030a386e1f3442b065cd4c9ec07284baa1a356cba2ee38ecaabc32998184d53f4ef78b1261832e3a9da773a81f725c9b036ec4719158f7f81507097f4dd4627cc246509b46b710a2e51b9ff9956bf479d3cff7cf237cb0c9d007903586dc3ea9b75c583f86a30627aa6a8d16e94a35add3ad5f3cbe594fe493196db1a6b27c1f1f44c2896a545cb9fdcb27bce5b391f622ea3af9505d8850391a831e9f4ee70112a9f0b562efb99224e48063fc7ba0b6e3ccaea259ee5b8bda4b263bbd7221e79eefa20943e51afad647742a776a4abe250dee82fccc182c1f3486d9483ca458cb5c1ec24dc3c67a4190a572d75824f8e3be549c907199e7ca430f43ebe59600dc4b73f5969e2c780d9c706ec77d1 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"},{"name":"架构设计","slug":"架构设计","permalink":"https://wiki.quartz.ren/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"05.学习资料及实践总结","slug":"平台工具/1-架构设计/05-学习资料及实践总结","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/05-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%8F%8A%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"}]},{"title":"0.Web端安全","date":"2024-03-25T07:55:57.000Z","path":"wk/信息安全/Web端安全/000.Web端安全/","text":"常见Web系统安全漏洞原理，利用方式(含工具)、以及对应解决方案.","tags":[{"name":"安全","slug":"安全","permalink":"https://wiki.quartz.ren/tags/%E5%AE%89%E5%85%A8/"}],"categories":[{"name":"信息安全","slug":"信息安全","permalink":"https://wiki.quartz.ren/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"},{"name":"Web端安全","slug":"信息安全/Web端安全","permalink":"https://wiki.quartz.ren/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Web%E7%AB%AF%E5%AE%89%E5%85%A8/"}]},{"title":"信息安全体系","date":"2024-03-24T07:55:57.000Z","path":"wk/信息安全/Security/","text":"6529a249a0af82b27e00ec9fb492a16501984edbc607ccf0f41870d9f4790f9369ba71c269a1f9de362469f6f9cf8b5a9aae346b33cc1501753a68faf8297657ec15e3f06bb30736dedfb86f5cb4119abfc6de8dc2993ae4d68dd52dc4586511d5cb30a95ef8f9663d346786eb5587d0e36267b294e91ad86692e06ba0360150c969a902b745e70dc5c07ff6604662247aab3d5d2dab3d2992df2d25f70569a03b2f4e84bf2e1266bbef5de04884d84311b541c073f4f0c59845f3be20a947546fb944c2ce385b54d815a35beb14f347d8f0e01697809c4cf16238eab10f974693fe29a00febed535ae55beb0422e139d0ce3e6c0f6f5b272853eecf793293998df5b1b59d630ddd4240aec8144a705d 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"信息安全","slug":"信息安全","permalink":"https://wiki.quartz.ren/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"}]},{"title":"1.技术面试问题汇总","date":"2024-03-24T07:55:57.000Z","path":"wk/项目管理/[1]沟通能力/面试总结/001.通用技术面试问题/","text":"梳理一套面试框架，用于通用的技术面试. 技术面试指南 1. 基础知识1.1 语言基础(开发技能)不同语言考查内容 1.1.1 扎实的Java编程基础1. Java基础基本类库 为什么重写equals时必须重写hashCode方法？ 如果不重写hashCode会有什么问题 引用：说说java有哪些引用,它们的区别 Java编码：Java中String占用几个字节 Java编码：谈谈你对Unicode的理解(忽略) Java编码：谈谈对utf-8的理解(忽略) String：StringBuilder、StringBuffer的区别 String：String类为什么是final的? String：String str1 = new String(“aa”); 这段代码创建了几个对象? 2. JVM java类加载的流程 3. 常用框架4. 集合队列 、 map、list 5. 并发6. WEB1.1.2 熟悉Python或者Go语言开发架构、框架 1.1.3 C++基础 简述一下左值和右值，以及引用折叠（进阶） 简述shared——ptr和weak——ptr的功能、原理和使用场景 1.2 数据结构和算法归并排徐原理并实现（基础）LRU的原理和实现（中等）给一个对称领接矩阵，分析共有几个独立的联通集合。（进阶） 1.3 中间件基础mysql、redis、kafka、zk等 1.3.1 MySQL索引：索引的最左前缀 1.3.2 Redisredis持久化机制 1.3.3 Kafka1.3.4 RocksDBrockesdb的写入流程 1.4 网络与操作系统(校)1.4.1 计算机网络1.4.2 操作系统什么是虚拟内存，内存访问时发生页缺失时会发生怎样的流程（进阶） 什么是进程和线程，区别和联系 2. 项目经验2.1 开发经验2.1.1 架构设计2.1.2 云原生2.1.3 微服务架构2.1.4 系统设计2. 管理经验2.1 沟通能力","tags":[{"name":"面试","slug":"面试","permalink":"https://wiki.quartz.ren/tags/%E9%9D%A2%E8%AF%95/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[1]沟通能力","slug":"项目管理/1-沟通能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/1-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B/"},{"name":"面试总结","slug":"项目管理/1-沟通能力/面试总结","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/1-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"}]},{"title":"2.ERP系统架构设计","date":"2024-03-24T07:55:57.000Z","path":"wk/平台工具/[1]架构设计/04.不同领域架构/03.ERP/002.ERP系统架构设计/","text":"1. ERP系统理解1.1 ERP系统与智能工厂首先所属行业是铸造业，所以先从铸造业智能工厂系统整体开始， 先分析ERP在智能工厂中的应用。下图简述了 智能工厂的分层架构概览以及ERP系统在智能工厂中的位置。那ERP系统的作用是什么呢？tips: 只是一个大致的简述，参考了车企智能工厂的概述. 相较于共享的铸造智能工厂系统架构，此图比较粗略、分层和细节有所差异。不过在这里不是重点，我们重点关注上层的ERP在其中的应用. 智能制造系统分层框架概览 ERP在其中作为一个集成的管理系统，通过整合企业内部的各种资源，包括财务、人力资源、生产、供应链、库存、销售等，提供一个统一的平台来监控和优化企业的运营。旨在帮助企业更有效地管理和自动化其业务流程。 随着技术以及企业的发展，CRM、SRM、HRM等模块从ERP系统中独立出来成为单独的系统，更专注于企业运营的特定领域，提供更深入的管理和分析工具。尽管独立运行，但底层通常与ERP系统进行数据集成，以便在整个企业范围内共享和流通信息。 1.2 ERP使用现状调研todo流程驱动？当前大部分企业的使用现状？发展历程？tips：TODO依据现状和发展时间线、准确总结下存在的问题。不过大致的问题差不多是以下这些. 1.3 ERP存在的问题ERP系统的作用在铸造业之外的其他行业也是同样的，是以企业的人、财、物资源集约化管理为目标的系统。通过业务流程实现资源调度集约，属于计划经济的思路，强调标准化和资源的复用节约。 然而当前市场环境下，企业面临的客户越来越多样化，个性化的需求，越来越需要以客户为中心动态的组织资源为客户提供服务。另外不同行业对于ERP的需求也有很多差异，有较多定制化的需求，国内的软件公司(用友、金蝶等)也往行业化、专业化发展，在行业提供专业的解决方案和产品服务，比如电商ERP、制造ERP、零售ERP、汽车行业ERP等等。 并且，传统的ERP存在的一些其它问题：高成本(实施和维护成本高-本地私有化等方式)、灵活性差(难以适应快速变化的业务需求，定制和升级过程复杂且耗时)、用户体验不佳、技术过时(单体架构、C/S模式)、数据孤岛、响应速度慢(企业数据信息响应) 针对这些问题，当前ERP的发展趋势是什么呢，最新一代的ERP应该是什么样子？ 1.4 ERP发展趋势可以定义为云ERP。基于云的ERP，①借助云原生技术，降低了硬件投资和维护成本；②模块化和组件化，更细粒度的拆分，使得企业可以根据需要选择和定制功能模块，提高了灵活性和可扩展性；③移动应用：支持移动设备，管理人员和员工可以随时随地访问企业数据和流程；④有较好的用户体验：直观的界面和简化的操作流程；⑤数据驱动：集成了数据分析工具，提供实时的业务洞察，帮助企业做出更快速和更准确的决策；⑥支持敏捷开发和部署：能够快速响应市场和业务需求的变化，缩短从开发到部署的周期。 要满足以上6大优点，并且适应市场环境变化，总体上的发展趋势有三个方面： ”去ERP化“： 以资源计划为中心转变为以客户为中心的敏态形式(技术层面：上云、微服务拆分)为能够更加灵活的支撑前台的不断变化，满足企业的客户多样化、个性化的需求，转型为以客户为中心去动态的组织资源为客户提供服务。通过云原生、微服务技术实现应用细粒度的拆分。当然，并不意味着一定要抛弃ERP软件。而是管理理念的转型伴随的系统架构的转型。 ERP回归本质：集中在完成财务相关以及资源计划方面的任务目前ERP囊括太多的业务领域了，导致其过于臃肿、繁琐，未来让ERP回归到他的本质是趋势；通过更好的和CRM 、SRM、OA、EHR、PLM、MES等系统的集成去实现对数据的采集、存储和计算使用。中心化、大而全的方式不适合市场及用户多变的环境，分布式、小而美才能给用户提供不一样的产品、服务和体验。 重点往行业化、专业化发展(目前正在发展的)各行各业对系统的要求还是差异挺大的。近几年大量的软件公司（也包括金蝶、用友）都开始事业部化了，在行业里去提供专业的解决方案和产品服务。电商ERP、制造ERP 云ERP 像华为的MeatERP、用友、金蝶的最新ERP系统产品。 2. 新一代ERP应用架构设计基于以上背景和发展趋势，新一代ERP怎么做呢？ 从灵活性、技术架构升级、模块化组件化、数据驱动、支持敏捷创新方面考虑.新一代ERP架构核心思路如下： 1.完善技术底座：基于现有的erp应用，抽象和下沉共性的技术能力，采用微服务、云原生等技术构建技术底座(技术平台)， 包括完善底层开发框架和公共组件。 2.精简ERP：保留老的erp系统最核心的模块。将相对比较独立的的企业后台，比如财务、人力资源这些保留在后台ERP系统。 其他的业务模块从单体架构变成分布式的微服务架构。 3.企业平台化-敏捷应用：将ERP非核心模块、敏捷需求上移。采用微服务架构，改变传统单体架构模式去开发。让新应用的开发的颗粒度更小，方便开发、复用、组合。去定制开发的一些新的一些应用，同时支持未来的企业平台应用体系(企业级能力复用平台)。以实现从资源计划为中心转变为以客户为中心企业管理原则的转变， 应对企业面临的客户多样化、个性化的需求。（现在的市场需求，越来越强调以客户为中心去动态的组织资源为客户提供服务）。可灵活支持除ERP以外的企业应用… 4.用云化(方便管理、编排、治理)：包括 1.公有能力的服务化 2.ERP套件服务化改造 3.应用和数据分离(”去ERP化“) 5.数据驱动：将原有erp系统的数据沉淀到数据平台. 通过数据分析供上游业务和企业管理应用. 2.1 整体架构 新一代ERP应用架构 2.2 复杂度分析从架构角度看，我认为对高可用、性能、扩展性的要求，通过模块化设计、多层架构(合理的分层便于扩展和维护)、数据管理等方面可以解决，并不复杂。而系统的安全性和成本是其中较复杂的点。企业对敏感数据的保护是至关重要的；也要满足合规的要求，避免法律风险和罚款。对于信息安全有一定的要求。另外对于成本，不同阶段的企业对ERP的投资、运营有不同的成本预算。怎么在保障系统安全的同时，合理规划和控制成本，是架构设计和选型中重要考虑的点。 从技术角度，ERP系统有集成的复杂度，需要与其他的业务系统集成，比如CRM、SCM等。不同系统可能使用不同的数据格式、接口标准等。还有定制开发，快速迭代-应对安全要求和敏捷业务。总体上就是需要实现业务流程协同、数据协同、技术协同、与其它系统协同。 针对以上系统复杂度较高的点，通过合理的技术选型解决这些问题。 todo通用的模块复杂度、系统整体的复杂点。针对垂类的复杂度差异分析等。 2.3 ERP的核心模块重点关注协同的复杂(流程、数据、系统之间). ERP业务流程（画个图？）：将销售、生产、采购、财务等整个流程串起来。 各个系统怎么协同、连接； 与 协同门户 的关系 ERP技术架构 2.4 详细设计解决系统扩展性、敏捷性，并且为支持上层业务的数字化发展。 todo：系统的用例图、类图、序列图。表述子系统和模块的组成、流程等细节。 2.4.1 ERP模块设计ERP核心模块及各子系统的 具体实现细节，包括组成、流程、用例等。核心模块、边缘模块。 2.4.2 技术选型云原生、微服务、低代码平台的考量 2.4.3 数据驱动基于数据平台的企业指标看板流程. 附带说明算法的作用. 2.4.4 公共组件和服务公共组件的设计和选项.(扩展性、成本因素考量) 2.5 安全和成本todo信息安全的考量：企业对敏感数据保护的要求、合规风险的要求。成本的考量：合理的规划和成本控制。 2.6 ERP与智能工厂回顾到最开始的，ERP在智能工厂的定位，仅作为一个集成的管理系统，以流程为中心对资源集约化管理。 新一代ERP围绕ERP建设公共的技术底座、引入数据平台、算法能力。 扩展至其它上层应用，支撑上层应用敏捷创新(相较于传统的ERP迭代周期长、臃肿、响应速度慢等特点)；支撑企业平台、铸造业产业互联等。 3.ERP的扩展在数字化转型，发展数字经济，强调数字化、网络化、智能化对制造业、服务业、等产业数字化的背景下。精简的ERP(企业资源管理/计划)以及其它企业平台应用，结合建设的公共、可复用的技术底座(基础设施)。可支撑企业平台的其它数字应用，包括公司事物、行政、监控、知识库等；并且支持实现企业的整体信息化转型、支持上层产业创新能力。比如铸造云智能制造的互联网平台、垂类行业的各个解决方案。 核心发展理念： 底层资源共享。包括(技术底座、公共服务平台、数据、算法、应用)。 数据统管(数据平台建设)。支撑数据驱动企业决策；提升开发和协同能力，促进产业创新。 以流程为中心转变为以用户/客户为中心的需求支撑(基于新技术架构)。 企业平台化-ERP以外的其他企业应用敏捷迭代，满足客户需求、产业创新。 产品互联网平台,作用于整个产业的运营效率和竞争力 3.1 底层资源共享底层技术架构应用到上层互联网平台、垂直行业的解决方案. 3.2 企业平台化企业平台化(构建开放、共享的平台，整合内外部资源)ERP以外的其他企业应用敏捷迭代，满足客户需求、产业创新。包括数字供应链(企业平台实现供应链各环节的协同工作；收集、共享供应链数据；快速响应供应链中的变化) 3.3 产业互联网平台ERP与整个产业链上的其他系统进行连接和数据交换，实现产业链的数字化和智能化，提高整个产业的运营效率和竞争力。并且提高创新能力：利用ERP系统中的数据和分析工具，支持新产品、新技术和新业务模式的探索和实验，加速创新成果的商业化。 4.调研4.1 国内-用友用友BIP-商业创新平台： 数智商业创新的使用平台 背景：为满足 数智时代商业创新的需求，企业需要一个社会级的商业创新平台。 基本产品形态：数智平台 + 十大领域的场景服务 + 大规模生态 基础平台： 技术中台、低代码开发平台、技术中台、连接集成平台、数据中台、业务中台… 领域场景化服务： 财务云、项目用、研发云、资产云 企业数智化财务云服务平台，助力企业财务数智化转型 特性： 云原生、敏捷工程化；技术底座iuap作为全PaaS能力一体化平台 架构：四大技术架构（云原生、元数据驱动-低代码、支持上层领域服务灵活扩展、中台化）、六大应用架构 用友iuap平台企业级的业务和应用开发平台 - 升级企业数智化底座(技术底座，Paas层) 包含：技术平台，业务、数据、智能中台， 低代码开发平台、连接集成平台. 123456789用友YonBIP发展： 云转型的思路是，先有各个SaaS应用(财务云、人力云、营销云等等)， 然后才有底层Paas平台， 并不是真正从零开始研发，而是将NCC等加起来包装成大概念BIP。相比较 金蝶，先有苍穹PaaS平台，然后不断完善上层的Saas应用。优点在于： - 针对财务、HR、供应链等企业业务管理领域应用和服务进行了合理的微服务拆分与关联组合，形成了相较传统技术跨越式的能力提升，不断刷新业内性能极限。- 设计之初就结合最新的技术发展趋势和设计理念，对整体的技术基础架构以及应用架构进行了规划，是一套拥有先进思想和技术前瞻的正向平台化设计来源于：https://www.zhihu.com/question/525625964 讲述了 金蝶云苍穹和用友YonBIP的比较。YonBIP是基于iuap5.0做的, 算是国内乃至整个业界最好的。 NCC是基于NC+iuap的改造版本，但任然适用于大企业。 4.2 华为ERPMetaERP 华为ERP详细情况到底是什么样的 4.2.1 华为ERP发展背景： 18,19年开始，美国打压华为，包括ERP也在禁止范围内。所以华为需要构建自己的ERP做替代。 数字化推进如火如荼，业务不确定性更加突出。 业务上对ERP的现状越来越不满意了（响应太慢，不能满足未来真正实现数字化的诉求）。 ERP是一套非常庞大的单体应用，数据量超级大，涉及模块多。迭代升级效率低(一次升级待半个月)。 远远不能满足业务需求。 急需架构升级。 4.2.2 华为下一代ERP构想第一，基于数据构建未来的智能化引擎，即智能大脑（跟传统的ERP一个非常大的区别）第二，在数据基础上，上一层是构建全孵化的产品。 把以前单体系统会拆分成十几个微系统，以微服务的方式提供给上一层不同业务不同流程来组装去使用。第三，面向各个部门按照自己的业务去挑选服务，去拼接组装，组成业务场景需要的一些业务流程和业务能力。第四，组装完成之后，面向用户层，实现一站式服务。 从底层优化和升级后，形成整个一套面向未来的下一代ERP架构。 参考：傅一平：一文讲透ERP的下一代架构！ 包含了 华为数字化转型之道 书中 华为数字化转型的框架，ERP就是其中的一个业务子集。 参考：中台崛起的本质是”去ERP化“： 有很多不错的理念. 套件ERP的弊端。 企业组织结构变更。 特性：客户联接、能力数字化、云化IT平台、数字化运营。 陈果的下一代ERP架构：以SAP ERP来说明下一代ERP。 有不同的观点(强调ERP目前没有过时，未来也不会过时) 4.3 技术调研其它架构的可借鉴点(架构背后的复杂点、领先的互联网技术-云计算等) Paas：各大互联网公司的基础研发平台中的各个平台产品(数据库、存储、微服务相关等)、各行业的软件平台(用友BIP、金蝶云·苍穹等)Saas：企业办公、ERP、CRM、等产品 4.4 ERP的发展历程和分类4.4.1 发展历程2010年左右，云技术兴起。为企业更好的体验，更低的成本。 2021年中国云ERP市场规模为153.22亿元，其中主要以私有云为主，私有云ERP规模达137.9亿元，占比达90%。预计到2026年，中国云ERP市场规模将达到467.6亿元，2021-2026CAGR为25%。 4.4.2 从技术架构分类C/S（客户端软件）和B/S（浏览器软件）架构 像用友、金蝶前期的很多产品都是C/S架构，现在也逐步都过渡到B/S架构了，能够让用户更方便快捷进行使用 4.4.3 从部署方式分类横向：私有化-买断产品、云服务-订阅产品.纵向：本地、云端(私有云、公有云、混合云) 本地私有化：软件部署在本地服务器，一般是内网，安全性高，但运维成本大。云端私有化：企业购买软件 部署在云服务器上，可通过专线直连内容，安全性较好，服务器软件运行环境的运维成本低，但软件本身运维成本较大、本地 云服务：云端：用户开箱即用，订阅式收费模式，也有按流量收费，环境安全性有厂商保障， 数据统一存储在厂商的服务器上，运维成本低(安全性、隐私性问题) 大型互联网自研: 都部署在自己的云端。 安全性、隐私性高，定制化程度高、灵活性好。有技术底座，运维成本较低. 中型互联网(boss): 私有化 云端（考虑数据安全和隐私性） 大型企业：??? 4.4.4 从行业进行分类 通用型ERP(用友、金蝶)：使用起来较复杂 专业性ERP","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"04.不同领域架构","slug":"平台工具/1-架构设计/04-不同领域架构","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/04-%E4%B8%8D%E5%90%8C%E9%A2%86%E5%9F%9F%E6%9E%B6%E6%9E%84/"},{"name":"03.ERP","slug":"平台工具/1-架构设计/04-不同领域架构/03-ERP","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/04-%E4%B8%8D%E5%90%8C%E9%A2%86%E5%9F%9F%E6%9E%B6%E6%9E%84/03-ERP/"}]},{"title":"1.ERP系统认识","date":"2024-03-24T03:55:57.000Z","path":"wk/平台工具/[1]架构设计/04.不同领域架构/03.ERP/001.ERP系统认识/","text":"1.ERP定义和边界1.1.定义是一种集成的信息系统。 目的：旨在通过优化 企业内部资源的分配和使用， 提高企业的运营效率和管理水平。 方法：通过整合企业的关键业务流程 和功能模块，实现信息的一体化管理， 从而支持企业的战略决策和日常运维。 简述：是一个集成的 一体化的信息工具， 实现 企业财、物、人 等资源的计划和管控。 erp 可以理解为面向计划的系统。 ERP系统的核心在于 「帮助企业进行资源规划」， 确保企业能够有效的管理和调配资源以达到既定的业务目标。 这里的”计划“主要体现在以下几个方面：资源规划、生产计划、供应链计划、财务计划、人力资源计划、销售和市场计划、项目计划等。 首先从定义上看， ERP系统集成了 财务、人力等系统，那它以什么形式呈现呢？一个单独的系统？ 还是说是一个抽象的概念？？ 具体实现为各个子系统？ 集成、 一体化信息工具、 统管 企业 财、物、人 等资源。 那 怎么集成、怎么整合、怎么统管？ erp的核心是联动？？ 管理软件仅仅是一个呈现。 技术架构 怎么合理，能有哪些收益？ 业务价值角度 、结合国家政策 新一代erp 都有哪些 点？？ 权限、流程、报表(在线)、知识库 安全。 123大家对erp的定义 是比较模糊的， erp到底有哪些模块， 和其他的子系统的关系。 SAPhttps://www.sap.cn/products/erp/what-is-erp.html思爱普对于erp的定义和系统支持、发展历程、未来趋势。 很完善，值得借鉴。什么是ERP： 分析 在企业财务、人才、生产过程、供应链运营、服务流程、采购等方面运作机制，探究ERP如何变革和提升企业数字化和自动化管理水平。 简道云https://www.jiandaoyun.com/index/solution_center/app/21805案例和方案。 轻流https://qingflow.com/?utm_source=baidu&amp;utm_medium=pc&amp;utm_campaign=0919-OCPC~liuliangci&amp;utm_content=crowdid%3D0&amp;utm_term=ERP-OCPC&amp;bd_vid=11124417601727752069 1.2 软件行业市场规模及未来发展趋势。 2020总收入 183亿。 可靠性、安全性。 为什么要自研？（软件产品总是滞后时代要求） 企业是主题，是亲历者；软件企业是附庸，是过客 1.3 ERP的难点 企业不了解自己 （高层-既要又要，中层-以假乱真、真假难辨，几层-不讲规矩，AI抄近路） 顾问能力不足 软件产品 不合身() 2.模块划分 核心模块：财务管理、生产管理、供应链管理 其它： 人力资源管理(HRM)、销售和市场营销模块、客户关系管理(CRM)、 项目管理、仓库管理、质量管理 2.1核心模块对企业运营 至关重要的模块，其中包括： 财务管理：作为企业的核心，提供企业运营的财务视角，是决策的基础。 供应链管理：涉及企业的核心业务流程，如采购、库存和物流，对企业的成本和效率有直接影响。 生产管理：对制造业企业来说，生产管理是核心，它直接影响产品的质量和交付时间。 1.财务管理2.供应链管理(SCM)3.生产管理信创国产化 企业应用安全可控 - 技术底座。 用友BIP：https://iuap.yonyou.com/ 数据集成","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"04.不同领域架构","slug":"平台工具/1-架构设计/04-不同领域架构","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/04-%E4%B8%8D%E5%90%8C%E9%A2%86%E5%9F%9F%E6%9E%B6%E6%9E%84/"},{"name":"03.ERP","slug":"平台工具/1-架构设计/04-不同领域架构/03-ERP","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/04-%E4%B8%8D%E5%90%8C%E9%A2%86%E5%9F%9F%E6%9E%B6%E6%9E%84/03-ERP/"}]},{"title":"A|人与系统","date":"2024-03-24T01:56:24.000Z","path":"wk/项目管理/README/","text":"6529a249a0af82b27e00ec9fb492a165b8e7bb0c9e343c4edc58a6b5efca46e5d372fb19841bfb2a932f3037f370be0c3d22af5bc9d0c54ecab31d77b8f7a37cc4851d35e3f1a4b2448af487e5e1ef1c4ecbcbcca4ac1462cbd589da6e6b17aaae08dd45cf0a40eb3f5ae574d04296a2c2d3df3837126d86deeac587db67fc86cef8c86452f2c8e2ba39297ec26dc22d45644a38959bf1d63a43e2ea8390568ef145ea0aeeb9e0162a97c8913c7ddf22dff4e0cdd38033c2c57b66ac70e0259a56f1239f709e72652b02c843678c0fe76a84f3190441852ee1bea121483fd7c9b7dfcb4b70047f179746b5766881ec97ba288c94b5f161f9853e5b3e028a388548eb8c43ba895c2eed9b0440e2f0328e507af477bd65538f34d70ac705b102b8d31938c3943c28edfec500c2067762236d0222a030f04d86c96316194f658ef19445beb25bce5a7d6596c619746ccefa0fc8b1eb5ef43a3edb790c045dd785dce1d311ba393b2dd9b3b317efc0c6a620eb7661dce46337bd84f11b399fa197d77610694192727d428256513f066f4e7045aa7df95600aa8cba2f562f3a8622b086311c3f59e62a4629bc2a626cedb7c159256fa3935b212c76e89ad5d3239a05827d8d0d2f7c8a5e2f36c6b8e688d5322c852be11db4b3f8921d230d3315690acc37f12708f859ec594b1b3dd72a10d13def37b27323fb0b137fc4689656d18877bbea35ac6f55dc507b7449b77fd10d48af73b9b737530117097d7b9db72ba5bb9a17f45859cfaf39c95bb082e105815739b1b09f9d00e1cd7c4cf819436c698a3980583cf15a8abcaee26ba54e4dce6342ab134d563e40e6471e0fa4ce1b214de06a7b60894dd93ba5d3ab17887f96534a5ca47012f3cb1c1af45ba9285f11e58513f349df799636ee2324917c2b814e113aee7f69b0a537175cc315bd77ec22cb3a938b8385e56e44d888358c74aba9e7ae4a4085fc5dda661b281d67f064ca9c42d3d7a8c4bd4e4cfb0352edaece822eec23e29b1de557814acb0d4ba51f6be2ee6445d95dd84024279dd3de7f29a3e8aaa6304834c3da573b02177aea51663e673c7f8834e4e8d5079fe5e4fef7d0aff333f15833b566ff6301f17bee7ad48366d0112ff9864680b037d18dbe1cee07f51b7bfe4b0fe33c6eed7707afaaca478f3a127a4175a0c40809f9f05af68e9fde58c606ac4ab607d3b4dafec7f57bb3352e9ff1866d626a605b13d3cf8d68cc2b53c5f0ef2701ac5583a2e1ad744308c8e0047b85c4135aeceff83b729884bd0577c52e5175fc73396da84cafed02c7fef229f095b31143a54677fcd133b9413be21775de38b43cfe8f348d24d5caffa180f8c42717a4135858223bd29b1a58faf959662ad21d31b42a4423f4fb61d6ca619ce60224c5c6f2a5f9239851e073851edeab73efabd5a9c645125c9959105fa1aaf8c90ddfd68bbcad80f9b2e86e6bf2ca3e3cae26d673e87ce1799f15130e16757ddfbb872b741be837dc78c45a9017f8378311edc33395e65764a513c6f8d946b917407efec198fa131f002694dae34c3d26409ce924de2433ceac661400d97e54a0546a1b4d428cdc5ce2 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"},{"name":"底层思维","slug":"底层思维","permalink":"https://wiki.quartz.ren/tags/%E5%BA%95%E5%B1%82%E6%80%9D%E7%BB%B4/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"}]},{"title":"3.异常检测算法及经典模型","date":"2024-03-20T16:48:57.000Z","path":"wk/算法/006.算法工程/实践/003.异常检测算法及经典模型/","text":"异常检测 指的是 通过数据挖掘手段 识别数据中的 ”异常点“， 常见的应用场景包括： 金融领域： 从金融数据中识别”欺诈案例“， 如识别信用卡 申请欺诈、虚假信贷等 网络安全：从流量数据中 找出”入侵者“，并识别新的网络入侵模式； 电商领域：从交易数据中识别”恶意买家“， 如羊毛党、恶意刷屏团伙 生态灾难预警：基于风俗、降雨量、气温等指标的预测，判断未来可能出现的极端天气 除此之外，还有很多行业都在使用异常检测技术来帮助企业降低风险，并为业务提供指导建议。 1. 异常点有哪几种类型？目前比较公认的分类方式为三种： 单点异常： 也称为全局异常， 即某个点与 全局大多数点都不一样，那么这个点构成了单点异常。 上下文异常：这一类异常多为 时间序列数据 中的异常， 即某个时间点的表现与前后时间段内存中较大的差异，那么该异常为一个上下文异常点。例如，在某个温带城市 夏天的气温的时序数据中，其中有一天温度为10度，而前后的气温都在25-35度。 集体异常：这类异常是由多个对象组合构成的，即单独看 某个个体可能并不存在异常，但这些个体同时出现，则构成了一种异常。集体异常可能存在多种组成方式，可能是由若干个 单点组成，也可能是由几个序列组成。 目标：近线识别和处置 单条请求的(参数异常等)。 一个用户的多个行为。(上下文异常) 一个群体、批量 认知提升：一个团队做的事情，一定是由方法论和一些指导思想的，尝试着去发掘这些。 如果发现不了，要么是这个团队无头、要么是你没认识到。 2. 异常检测中遇到的困难 有监督学习的数据标签问题：大多数实际场景中，数据本身是没有标签的，也存在一些数据集有标签， 但标签的可信度非常低，导致放入模型后效果很差。 这就导致我们无法直接使用一些成熟的有监督学习方法。 常存在噪音和异常点 混杂在一起的情况， 难以区分。 在一些场景中(例如欺诈检测)，多数 诈骗数据都混在一起，很难区分不同类型的诈骗，因为我们也不了解每种诈骗的具体定义 由于没有准确的标签，也没有对具体诈骗类型的理解，就导致我们陷入了鸡生蛋 or 蛋生鸡的循环之中。解决这一问题，目前比较常用的手段是：将无监督学习方法和专家经验相结合，基于无监督学习得到检测结果， 并让领域专家基于检测结果给出反馈，以便我们及时调整模型，反复进行迭代，最终得到一个越来越准确的模型。 因此，我们发现，很多风控场景中最重要的一环就是：专家经验。 3. 异常检测算法的分类 时序相关、时序独立 全局检测、局部检测 输出形式：标签 vs 异常分数 3.4 根据不同的模型特征 统计检验方法 基于深度的方法 基于偏差的方法 基于距离的方法 基于密度的方法 深度学习方法 如今 用于异常检测的算法已经非常多了，但万变不离其宗，无论优化到什么程度，他们都是由一些原始的模型和思想衍生出来的。 4. 异常检测经典模型思想异常检测算法分类及经典模型概览","tags":[{"name":"python","slug":"python","permalink":"https://wiki.quartz.ren/tags/python/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"006.算法工程","slug":"算法/006-算法工程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"},{"name":"实践","slug":"算法/006-算法工程/实践","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/%E5%AE%9E%E8%B7%B5/"}]},{"title":"2.机器学习网络流量识别的应用","date":"2024-03-19T16:48:57.000Z","path":"wk/算法/006.算法工程/实践/002.机器学习方法在网络流量识别的应用/","text":"一、概述1.1 网络流量概述网络流量是指在计算机网络中传输的数据量和类型，包括所有的进出流量，如用户请求、数据传输、协议交换等。(网络流量 是所有数据在网络中的传输，涵盖了多种类型的流量。是相对更底层的应用) 网络流量和网络安全的关系: 网络流量的管理和监控是确保网络安全的关键部分.网络安全：旨在保护网络和其数据免受未经授权的访问、攻击、损坏或滥用。网络安全措施包括防火墙、入侵检测系统、加密、身份验证等。 1.1.1 网络流量网络流量 是一个广泛的概念，涵盖所有形式的网络数据传输，包括正常用户流量、管理流量等。 网络流量 是所有数据在网络中的传输，涵盖了多种类型的流量。 特征： 类型：可以是正常的用户流量、管理流量、控制流量等。 监控：网络流量监控涉及分析流量的源、目的、协议、频率等。 “网络流量监控可以帮助识别机刷流量” 1.1.2 机刷流量机刷流量 是特定类型的网络流量，由自动化工具生成，主要用于抓取数据或执行特定任务。 机刷流量 是由自动化工具生成的网络流量，特定于数据抓取和自动化任务。 机刷流量 是 网络流量 的一个子集，指的是特定的自动化流量。 特征： 自动化：由脚本或机器人生成，通常不涉及人工操作。 模式：可能表现出一致的访问模式，如高频率请求、相同的请求模式等。 目的：可以用于数据抓取、价格监控、竞争分析、广告欺诈等。 影响： 负载：机刷流量可能导致服务器负载增加，影响正常用户的体验。 数据安全：可能导致数据泄露或被滥用。 定义：这是识别和分类自动化流量的过程，包括检测由爬虫、机器人或脚本生成的流量。目标：识别哪些流量是由自动化工具生成的，并与正常的用户流量区分开来。方法：使用各种技术和算法（如行为分析、请求模式识别、IP 地址监控等）来检测机刷流量。 1.1.3 反爬是一种保护机制，旨在识别和阻止机刷流量，防止自动化工具对网站内容进行抓取。 反爬 针对的是机刷流量，它通过各种技术手段来识别和阻止这些自动化请求，从而保护网站的内容和资源。 反爬 是防止机刷流量的措施，旨在保护网站和应用的数据不被自动化工具非法访问或抓取。 特征： 技术措施：包括验证码、IP限制、行为分析、动态内容加载等。 目标：保护网站数据不被未经授权的爬虫或自动化工具抓取。 影响 防护：通过识别和阻止爬虫流量，保护网站的数据安全和性能。 三者的关系： 网络流量 监控可以帮助识别机刷流量，反爬技术则通过分析和过滤这些流量来减少其影响。 1.1.4 反爬与机刷流量识别机刷流量识别（Bot Traffic Identification）、反爬（Anti-Scraping） 可以将机刷流量识别视为反爬的一个重要组成部分或上游步骤 1. 关系机刷流量识别 是 反爬 的前提和基础步骤。通过识别机刷流量，系统能够更准确地实施反爬策略。识别：首先，需要通过各种检测技术识别出哪些流量是由自动化工具产生的。这包括分析流量模式、行为特征等。响应：一旦识别出机刷流量，就可以应用反爬策略来阻止这些自动化工具。反爬措施可能包括发放验证码、限制访问频率、阻止特定IP等。 2. 总结 机刷流量识别 是识别自动化流量的过程，它为 反爬 提供了必要的信息和基础。 反爬 策略利用这些识别信息来防止自动化工具抓取数据，保护网站免受机刷流量的影响。 3. 具体流程数据收集：收集所有进入网站的流量数据，包括用户请求和行为。流量分析：分析这些流量数据，以识别异常模式和行为特征。机刷流量识别：使用机器学习算法、规则引擎等工具识别出哪些流量是由自动化工具生成的。实施反爬措施：对识别出的机刷流量实施反爬技术，例如发放验证码、限制请求频率、阻止访问等。 1.2 网络流量数据分类方法网络流量的数据分类的主要方法有 （1）误用检测 （2）异常检测（3）状态完整协议分析 误用检测也称为签名检测，根据预先定义的签名和过滤器，以有效的确定已知的入侵，但对于匿名入侵却无法检测，过度依赖于人为更新语料库。异常检测不是未知入侵的可靠检测方法，误报率高。市场上的大多数商业工具都是误用检测和异常检测的结合体。常用的强有力方法是状态完整协议分析，其使用软件供应商专有设计的功能来确定特定约定和应用程序的差异。 1.3 异常检测的定义和方法机器学习方法是目前用于IDS的突出方法。基于机器学习的网络流量数据分类大概可分为三种：聚类、传统机器学习分类方法和深度学习。（1）聚类：无监督学习，如K-Means，FCM等；（2）传统机器学习分类方法：半监督学习，如SVM，RF，GBT等；（3）深度学习：监督学习，如DNN，CNN，RNN等； 1.4 异常检测的意义异常数据检测非常重要。因为数据中的异常转化为各种应用领域中重要（且通常至关重要）可操作的信息。例如，计算机网络中的异常流量模式可能意味着被黑客攻击的计算机正在向未经授权的目的地发送敏感数据。异常 MRI 图像可能表示存在恶性肿瘤。信用卡交易数据中的异常可能表明信用卡或身份盗窃或航天器传感器的异常读数可能表示航天器某些部件存在故障。 1.5 相关概念 IDSIDS（Intrusion Detection System，入侵检测系统）是一种用于监视和分析计算机网络或系统中的活动，以识别和响应潜在的安全威胁或攻击的技术。IDS 可以帮助检测和记录异常或恶意行为，从而保护系统免受未经授权的访问或损害。 二、基于机器学习的方法what： 网络流量数据分类(基于机器学习) 1.1 聚类1.2 深度学习三、数据集首先，对数据集进行预处理，即将字符串属性转换为数字属性。 主要有KDDCup-99数据集、NSL-KDD数据集，以及最近推出的数据集，即UNSW-NB15。 3.1 UNSW-NB15数据集UNSW-NB15数据集被认为是评价现有和新型IDS方法的可靠数据集。该数据集有254w条记录，49个特征，其中有9种常见攻击。正常信息占数据集大小88%，攻击信息12%。 数据集以两种形式公开提供（1） 完整数据集；（2） 完整数据集的一小部分。一小组数据集有 175，341 条train记录和 82，332 条test记录。 ID Type Count Train (drop_duplicates) Test (drop_duplicates) 0 Normal 93000 56000 (51890) 37000 (34206) 1 Generic 58871 40000 (4181) 18871 (3657) 2 Exploits 44525 33393 (19844) 11132 (7609) 3 Fuzzers 24246 18184 (16150) 6062 (4838) 4 DoS 16353 12264 (3806) 4089 (1718) 5 Reconnaissance 13987 10491 (7522) 3496 (2703) 6 Analysis 2677 2000 (1594) 677 (446) 7 Backdoor 2329 1746 (1535) 583 (346) 8 Shellcode 1511 1133 (1091) 378 (378) 9 Worms 174 130 (127) 44 (44) Total 257673 175341 82332 说明： 攻击类别 描述 正常 没有恶意活动的连接记录 模糊器 入侵者通过连接随机向网络提供数据来降低网络资源 分析 端口扫描、html文件渗透和垃圾邮件攻击属于分析攻击类别 后门 入侵者通过逃避基线安全性来访问特定的计算机 婴儿床 Dos是一种攻击，旨在降低网络资源，因此甚至合法用户也无法访问网络资源 通用 通用是对块密码的攻击 侦查 攻击者与目标系统密切合作，以捕获与漏洞相关的信息 壳码 用于开发软件漏洞的一小块程序 蠕虫 通过复制自己，蠕虫通过计算机网络分布 kaggle-UNSW_NB15数据集 特征介绍 （49个）id,dur,proto,service,state,spkts,dpkts,sbytes,dbytes,rate,sttl,dttl,sload,dload,sloss,dloss,sinpkt,dinpkt,sjit,djit,swin,stcpb,dtcpb,dwin,tcprtt,synack,ackdat,smean,dmean,trans_depth,response_body_len,ct_srv_src,ct_state_ttl,ct_dst_ltm,ct_src_dport_ltm,ct_dst_sport_ltm,ct_dst_src_ltm,is_ftp_login,ct_ftp_cmd,ct_flw_http_mthd,ct_src_ltm,ct_srv_dst,is_sm_ips_ports,attack_cat,label 1.srcip: 源 IP 地址。2.sport: 源端口号。3.dstip: 目标 IP 地址。4.dsport: 目标端口号。5.protocol: 协议类型（如 TCP、UDP、ICMP）。6.state: 连接状态（如 SYN、ESTABLISHED）。7.duration: 连接持续时间。8.totpkt: 总数据包数。9.totbyte: 总字节数。10.srcbyte: 从源 IP 地址发送的数据字节数。11.dstbyte: 到目标 IP 地址的数据字节数。12.sintpkt: 源到目标的数据包间隔。13.dintpkt: 目标到源的数据包间隔。14.smean: 源数据包的平均字节数。15.dmean: 目标数据包的平均字节数。16.smin: 源数据包的最小字节数。17.dmin: 目标数据包的最小字节数。18.smax: 源数据包的最大字节数。19.dmax: 目标数据包的最大字节数。20.srcip_last: 源 IP 地址最后一次出现的时间。21.dstip_last: 目标 IP 地址最后一次出现的时间。22.sport_last: 源端口号最后一次出现的时间。23.dsport_last: 目标端口号最后一次出现的时间。24.protocol_last: 协议类型最后一次出现的时间。25.state_last: 连接状态最后一次出现的时间。26.srcbyte_last: 从源 IP 地址发送的字节数最后一次出现的时间。27.dstbyte_last: 到目标 IP 地址发送的字节数最后一次出现的时间。28.sintpkt_last: 源到目标的数据包间隔最后一次出现的时间。29.dintpkt_last: 目标到源的数据包间隔最后一次出现的时间。30.smean_last: 源数据包的平均字节数最后一次出现的时间。31.dmean_last: 目标数据包的平均字节数最后一次出现的时间。32.smin_last: 源数据包的最小字节数最后一次出现的时间。33.dmin_last: 目标数据包的最小字节数最后一次出现的时间。34.smax_last: 源数据包的最大字节数最后一次出现的时间。35.dmax_last: 目标数据包的最大字节数最后一次出现的时间。36.srcip_count: 源 IP 地址的出现次数。37.dstip_count: 目标 IP 地址的出现次数。38.sport_count: 源端口号的出现次数。39.dsport_count: 目标端口号的出现次数。40.protocol_count: 协议类型的出现次数。41.state_count: 连接状态的出现次数。42.srcbyte_count: 从源 IP 地址发送的字节数的出现次数。43.dstbyte_count: 到目标 IP 地址发送的字节数的出现次数。44.sintpkt_count: 源到目标的数据包间隔的出现次数。45.dintpkt_count: 目标到源的数据包间隔的出现次数。46.smean_count: 源数据包的平均字节数的出现次数。47.dmean_count: 目标数据包的平均字节数的出现次数。48.smin_count: 源数据包的最小字节数的出现次数。49.dmin_count: 目标数据包的最小字节数的出现次数。 kaggle-notebook 包含了 数据样例、特征说明、模型构建全流程(相关包import、数据分析和基本的预处理、探索性数据分析、数据预处理、模型构建)、 数据维度信息：dataset shape: (2540043, 49) 数据类型统计：40个数字类型、9个分类列 数据重复检查duplicated： 4w多重复； 删除重复数据。 空值扎占比统计 和处理(给默认值)。 描述性分析）指的是对数据进行总结和描述的过程 对分类属性进行描述性分析）指的是对数据集中分类变量（如类别、标签或分组）的统计描述和总结 特征处理：二值、数字化等 数据检查。 数据 标准化、 3.1.1 预处理 Featutre Engineeringc = a-bc = a/(b+1) 数值的加减乘除运算。 Target feature Encodingonehot 编码 Feature Scaling(特征缩放)标准化 3.1.2四、特征选择和简化方法","tags":[{"name":"python","slug":"python","permalink":"https://wiki.quartz.ren/tags/python/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"006.算法工程","slug":"算法/006-算法工程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"},{"name":"实践","slug":"算法/006-算法工程/实践","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/%E5%AE%9E%E8%B7%B5/"}]},{"title":"0.算法工程概述","date":"2024-03-18T16:48:57.000Z","path":"wk/算法/006.算法工程/000.算法工程概述/","text":"算法工程职责算法工程师 算法设计 数据预处理 模型训练和评估 模型优化 模型压缩与加速 算法实现 软件工程 系统集成 性能监控与调优 开发部署 通过识别MNIST了解算法工程通过Tensorflow深度学习项目来 了解算法工程 和Tensorflow. TensorFlow识别MNIST 工程方面可以做的事特征工程、特征平台 机器学习平台 mlp","tags":[{"name":"模型","slug":"模型","permalink":"https://wiki.quartz.ren/tags/%E6%A8%A1%E5%9E%8B/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"006.算法工程","slug":"算法/006-算法工程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"}]},{"title":"1.深度学习常见python库","date":"2024-03-18T16:48:57.000Z","path":"wk/算法/006.算法工程/实践/001.深度学习常见python库/","text":"transformers Hugging Face 开发的一个开源库，用于自然语言处理（NLP）中的预训练模型（如BERT、GPT等）的使用、微调和部署。该库为研究人员和开发者提供了一种方便的方式来访问和使用各种预训练的语言模型。","tags":[{"name":"python","slug":"python","permalink":"https://wiki.quartz.ren/tags/python/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"006.算法工程","slug":"算法/006-算法工程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"},{"name":"实践","slug":"算法/006-算法工程/实践","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/%E5%AE%9E%E8%B7%B5/"}]},{"title":"1.模型压缩与加速","date":"2024-03-18T16:48:57.000Z","path":"wk/算法/006.算法工程/工程优化/001.模型压缩与加速/","text":"1. 模型压缩概述模型压缩和加速是深度学习算法中两个 密切相关的概念。共同的目标是保持模型性能的同时减少模型的复杂度(大小)和提高推理速度。 1.1 背景/问题定义由于设备的算力和内存有限，尤其是嵌入式设备， 因此深度学习模型需要经过模型压缩后，才能部署到嵌入式设备上。 可以从3个角度定义 模型压缩问题： 压缩的收益：(1)计算:减少浮点运运算量；降低延迟-Latency (2)减少内存占用，提高GPU/NPU计算利用率 公式定义模型压缩的问题? 模型压缩问题的约束？ 一定程度上，网络越深，参数越多，模型也会越复杂，但其最终效果也越好，而模型压缩算法旨在将一个庞大而复杂的预训练模型转化为一个精简的小模型。 1.2 模型压缩方法分类前端压缩：指在不改变原网络结构的压缩技术。 主要包括知识蒸馏、轻量级网络（紧凑的模型结构设计）以及滤波器（filter）层面的剪枝（结构化剪枝）等； 后端压缩：指包括低秩近似、未加限制的剪枝（非结构化剪枝/稀疏）、参数量化以及二值网络等，目标在于尽可能减少模型大小，会对原始网络结构造成极大程度的改造。 1.3 模型压缩方法综述1.3.1 压缩1.剪枝网络剪枝：通过去除模型中冗余或不重要的神经元、连接或通道，减小模型的规模。 结构化剪枝：与剪枝类似，但更注重模型结构的完整性，通常去除整个卷积核或神经元。 将权重低于阈值的连接都从网络中删除。 卷积层和全连接层 韩松2016年Deep Compression属于开山之作，剪枝步骤：正常训练，删除网络中权重低于阈值的连接层，重新训练。需要重新训练模型。 2.量化将模型参数从高精度数据类型（例如浮点数）转换为低精度数据类型（例如整数），减小模型的存储空间和计算量。 指将神经网络的浮点算法转换为定点算法 卷积、全连接、激活、BN层等 TensoRT框架中的基于 KL 散度方法的INT8量化策略是主流技术。PTQ 训练后量化方法不需要重新训练模型。 3.知识蒸馏通过将大型模型的知识迁移到小型模型中，减少模型大小同时保持性能。 属于迁移学习的一种，主要思想是将学习能力强的复杂教师模型中的“知识”迁移到简单的学生模型中。 涉及的网络层:卷积和全连接层 经典KD论文，属于蒸 “logits”方法，将Teacher Network输出的soft label作为标签来训练Student Network。必须重新训练模型。 4. 其它稀疏性： 利用模型的稀疏性，较少计算量和存储需求混合专家模型：通过将模型分解为多个专家网络，并在不同输入上激活不同专家，来提高模型的效率 1.3.2 加速1. 量化除了压缩模型，量化还可以通过减少数据类型的宽度来加速模型的推理。 OpenVINO：OpenVINO（Open Visual Inference and Neural Network Optimization）是Intel推出的一种开源工具套件，专门用于优化和部署深度学习模型，以实现高效的推理。它主要针对视觉和推理任务，为开发者提供了一整套工具和库，以加速从模型开发到部署的整个流程。 模型优化和压缩：OpenVINO提供了多种模型优化技术，包括量化（Quantization）、剪枝（Pruning）和混合精度计算（Mixed Precision Computing）。这些技术能够减少模型的计算和存储需求，同时提升推理性能。 2. 模型蒸馏通过模型蒸馏技术，减少模型大小，间接提高推理速度。 3. 轻量化模型架构模型结构优化通过调整神经网络的架构来提高性能和效率。 轻量级网络的核心是在尽量保持精度的前提下，从体积和速度两方面对网络进行轻量化改造 涉及的网络层:卷积层/卷积模块 Mobilenet 提出深度可分离卷积；shufflenetv2 论文 提出的四个高效网络设计的实用指导思想；RepVGG 提出重参数化思想。都需要重新设计 backbone 和和重新训练模型。 4. 软件框架和库优化优化深度学习框架和库，如TensorFlow、PyTorch等，以提高执行效率 5. 硬件加速6. 线性代数加速通过优化基础运算，如矩阵乘法，来提高计算速度 7. 分布式计算使用多卡推理和通信加速，提升模型的推理速度 8. FlashAttention 和 PageAttention 技术些技术通过优化注意力机制来加速Transformer模型的推理。 参考文档深度学习模型压缩方法综述","tags":[{"name":"模型","slug":"模型","permalink":"https://wiki.quartz.ren/tags/%E6%A8%A1%E5%9E%8B/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"006.算法工程","slug":"算法/006-算法工程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"},{"name":"工程优化","slug":"算法/006-算法工程/工程优化","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/%E5%B7%A5%E7%A8%8B%E4%BC%98%E5%8C%96/"}]},{"title":"2.AutoML","date":"2024-03-18T16:48:57.000Z","path":"wk/算法/006.算法工程/工程优化/002.AutoML/","text":"AutoML（Automated Machine Learning）是一种自动化的机器学习技术，它旨在简化机器学习工作流程，并使非专家用户能够构建高质量的机器学习模型。AutoML涵盖了从数据预处理到模型选择、超参数调优、模型评估和模型部署的整个流程。以下是AutoML的关键组成部分： 数据预处理 模型选择 超参数调优 模型训练与评估 模型解释性 模型部署 用户交互 AutoML工具库","tags":[{"name":"ML","slug":"ML","permalink":"https://wiki.quartz.ren/tags/ML/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"006.算法工程","slug":"算法/006-算法工程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"},{"name":"工程优化","slug":"算法/006-算法工程/工程优化","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/%E5%B7%A5%E7%A8%8B%E4%BC%98%E5%8C%96/"}]},{"title":"1.特征工程方案","date":"2024-03-18T16:48:57.000Z","path":"wk/算法/006.算法工程/特征工程/001.特征工程方案/","text":"1. 特征工程1.1 定义从原始数据中提取、构造和选择特征的过程。 主要包括以下活动： 特征提取(Feature Extraction)： 从原始数据中提取有用的信息。 特征构造(Feature Construction)：根据现有数据创建 新的特征（如 组合特征、交叉特征） 特征选择(Feature Selection)：选择对模型有显著影响的特征，去除冗余或无关的特征。 特征变换(Feature Transformation)：将特征转换为模型更易处理的形式（如使用主成分分析(PCA)来降维） 1.2 目的创造出对机器学习模型有用的特征，能够有效地捕捉数据中的信息和模式。 1.3 特征处理、特征计算1.3.1 特征处理指 对特征数据进行预处理和转换的过程。通常包括（清洗、标准化、归一化等操作） 其目的是使特征数据符合模型的要求， 提升模型性能。 （特征处理） 是特征工程中一个具体步骤。 主要关注数据的 清晰和预处理。 主要的活动包括： 缺失值处理（填补或处理缺失值数据，如使用均值填补）， 数据标准化和归一化（调整数据尺度，使得不同特征具有相似的尺度，例如：将数据缩放到0到1之间）， 数据编码（将分类特征转换为数据值特征，例如：独热编码），异常值处理（检测并处理数据中的异常值，如截断或调整异常值）。 1.3.2 特征计算根据现有数据计算特征值的过程。这通常包括对数据进行数学运算、统计计算或其他变换，以生成新的特征或调整现有特征。 （特征计算） 是特征工程的一部分， 专注于通过 数学运算或统计 方法生成或 调整特征。特征计算可能在 特征构造和特征变换 阶段进行，是生成有用特征的关键操作之一。 总结特征工程 是整个数据预处理和特征生成的过程，包括特征提取、构造、选择和变换。特征处理 是特征工程中的具体步骤，处理数据质量问题，确保特征在模型训练前符合要求。特征计算 是特征工程中的一个关键操作，通过数学和统计方法计算和生成特征，以支持特征提取和构造。 2. 特征工程方案特征工程方案（Feature Engineering Approaches）指的是在数据科学和机器学习项目中，用于生成、选择和优化特征的各种方法和策略。这些方案通常根据具体任务、数据类型和模型需求来设计。以下是一些常见的特征工程方案和方法： 2.1 特征提取（Feature Extraction）从原始数据中提取特征：时间特征提取：从时间戳数据中提取日期、时间、星期几、季度等特征。文本特征提取：从文本数据中提取词频、TF-IDF（词频-逆文档频率）、主题模型特征（如LDA）、词嵌入（如Word2Vec、BERT）等。图像特征提取：使用卷积神经网络（CNN）提取图像的特征，如边缘、纹理、形状等。 2.2 特征构造（Feature Construction）创建新的特征：数学运算：对现有特征进行数学运算，如加法、乘法、平方根等。例如，创建“总消费金额”特征，作为“每次消费金额”与“消费次数”的乘积。特征组合：组合多个特征生成新特征，如两个特征的交互项（特征A × 特征B）。衍生特征：基于现有特征衍生新的特征，如通过对数变换、平方变换等。 2.3 特征选择（Feature Selection）选择对模型最有帮助的特征：过滤法（Filter Methods）：使用统计方法（如卡方检验、相关系数）评估特征的重要性，并选择显著特征。包裹法（Wrapper Methods）：使用机器学习模型进行特征选择（如递归特征消除，RFE），通过模型性能评估特征的重要性。嵌入法（Embedded Methods）：特征选择与模型训练同时进行（如LASSO回归，决策树的重要性评分）。 2.4 特征变换（Feature Transformation）对特征进行变换以优化模型性能：标准化（Standardization）：将特征调整为均值为0、方差为1的标准正态分布。归一化（Normalization）：将特征缩放到一个特定的范围（如0到1）。主成分分析（PCA）：通过线性变换将特征投影到主成分上，进行降维。线性判别分析（LDA）：进行特征降维，强调类别分离。 2.5 类别特征处理（Categorical Feature Processing）将类别特征转换为数值特征：独热编码（One-Hot Encoding）：将类别特征转化为二进制向量。标签编码（Label Encoding）：将类别特征转化为整数。目标编码（Target Encoding）：根据目标变量的均值对类别特征进行编码。 2.6 缺失值处理（Handling Missing Values）处理缺失数据以提高数据质量：填补缺失值：使用均值、中位数、众数、插值法等方法填补缺失数据。删除缺失值：删除包含缺失值的记录或特征（适用于缺失值比例较小的情况）。 2.7 异常值处理（Handling Outliers）识别和处理异常值：截断异常值：将异常值限制在一定范围内。变换数据：使用对数变换或其他数学变换减少异常值的影响。检测方法：使用统计方法（如Z-score、IQR）或模型方法（如孤立森林）检测异常值。 2.8 数据合成（Data Synthesis）创建额外的数据以增强训练集：数据增强（Data Augmentation）：在图像数据中通过旋转、缩放、翻转等操作增强数据集。合成少数类样本：使用SMOTE（Synthetic Minority Over-sampling Technique）等方法生成新的少数类样本以平衡类别分布。 2.9 领域特定特征工程（Domain-Specific Feature Engineering）根据特定领域知识设计特征：金融领域：创建“交易频率”、“账户余额波动”等特征。医疗领域：从医疗记录中提取“病史”、“体征指标”等特征。电商领域：提取“用户购物习惯”、“产品评分”等特征。 特征工程方案的选择和实施应根据数据类型、问题需求和模型要求来决定。特征工程是一个迭代的过程，需要不断实验和调整，以生成最能提升模型性能的特征。通过有效的特征工程，可以显著提高模型的预测能力和泛化性能。","tags":[{"name":"特征工程","slug":"特征工程","permalink":"https://wiki.quartz.ren/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"006.算法工程","slug":"算法/006-算法工程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"},{"name":"特征工程","slug":"算法/006-算法工程/特征工程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"}]},{"title":"99.面试问题n","date":"2024-03-06T14:55:57.000Z","path":"wk/项目管理/[1]沟通能力/面试总结/099.面试问题/","text":"6529a249a0af82b27e00ec9fb492a165cdeff919c1e3b0b703e0a95a87175d9e5ce0270b4f3341e1cbd7216bcfb2bceaf619be9ced5046b25c14c6f22682d8cac1026b4b17977cdffe3d4c58aec6b3abc28b9a93f7f687c12a077bc39d9405025c8181c6a98e63cc14ec0a1f21eb9bd0c90b3311fd885b50b69793033324568d965da68bb0f97ba440e69556380deda61af72ae00cac1a85430f387f63f546ed4c9f7be84ea5d1183a612ebe284168dd69c0d58a158a570fd4c74d1e1d4899bd7907c6d774c4539b913991c06578e2d138a7b42220e66c795a2bfea90f17fbb66efb3d056296e9e1167e37d29086081ae001d207016b5d12e3da4d6b1806d94bebb99aac0f019a698546f7224677b552839b02b7b4a73fa2be495a43246684983853e8b29a96ee1cb9369d4cf3f63a277439b21db718d32046317ec9661c28570aa6ce2eacb14b1445183e46828db148c6142a5aa8ea0df3a8d927340f4260b32e4e59a6650e25920a0dec5cd2d2ffd2ba435cf1a3b9dbc045f762c6e10e3a7458985bd3955d0145a74bb99f08b87bbd016a275c93de1b9241a45d10bae21dfe495fd378250c59748eb4b2a636df9aac8268f60eb992224e5b6da3f91966dcef8c5183c89c517b3dc1b6b5bba9f63530124082acda42ed0bc9cb833f3cb99bbcab453c6757e6d7906fbe559403e58861b6267350c8c4f08c57590a43a09dc7f3a747cdd2a62432539c62ba64a9b9be14060004475a6412e806f7c3c5f3be30e6bab78d76c075548866d42e955a4ce510c6f2673bbb86f783dac076520db0fc26c415b6aa68270e02226efb6c2a1097a24716b06ea35a2a0301de82b4a803489bb618e1186db3917cb0d7ba0e5d56db9766acfb7cf2d0bcb27c33403012704e3947169e5a101b9fd9e4506749254593390da2007a7ea18700cfe3aed530242592d72db12ff337d19f5c313a0fc7c447df726813be6ec5bb39b5238d8566b4a3eaab070145f735218dd6f671ce6f2e3a4172f56dc5e704fe5be8674571eccdbbf2bd0b947bfdac46e74479bb52345fd2ce78254920cfd9f4a5fb961dbcb4010d9244734db05a7597deafb6a7aae3a02f1fd6aad1df39e0ee8602753d9a89f80a941e30e99d82fd8de4d59759ef1e161338e10a8e3ae74e2585a06b6a858a25d723a53487a3a746a110872382e6bc8339e0d09859520f3df994cd2e4db663cd97a6fa9ca37e186a33b9b0673e5b55f1a82a6873346f3b6749245cac66550f95246b64aa1f521a4a0a8d46ae9fd12dce728906b606bdddf9d42552134b1a9eb5f594ab3dcc715ce9c452ddbf67bbd12c5efe6f3bddf8b90a87e51277a8434fc5bfe7962d7a15b37ce9c2f3dba3e32a5c3b7ede86078e290451e9b7232a677af522d460070224d975890ea46b1e2295062a3ddfa634a5a7db7babb1c002872c11d6e11750ad1acb5e4165fa55412db8662b5bbe3ac5345eed1e5a6c496bd04b627a616f5ee0f91c40c9405454bd24e8fa8df2ba07c33c81015297335c5c4f6d30acf27ab9a709cd1aadaebaa7c97106af84d8b53eb94b48ab54abcccdffd36d160621d72990bb6c855f7c475c83c88e1e7079d82922a68c11484d7f85d0dc2f3b8d3c9dfafd7b1bacf2d1ad346b535a3c0be7977dcbbb6fc7d6d90efd593ea1d3ce29e8b76b8ae37960e75f734a95cd65937321cc92d99e6011845f8f4da8a58a17f154f8b17702b779cbc883c30cefa65c559e8ceda0f05b83c7a5d91903b13785942fad783fb97d02fe0e88cdc2ded73e62ea5b265ec31b59841dbcbeae2fe441daeca1aeafdcfa480f2a23adbf7d6ccbcffcdd7915bc487e1c7386007cc33de1e5aff301d5a18f1a1ebe097163a77d32ca50da4ac11fafe6c1faa7a6e211a0ecf233c3c27a420ab21e651263835af2aae30fe545c944eb1ad1b988fe5b30b828bbdd8922f23f51904aeb7c355ed5c1e47f079e7014b46c2647393d709335add04b8002f48fa6fc6cad3f3dc94fc1a81f80439df0c772b74961231bf423e73abcc25c41710fc8eb968fdf3b13673dbd7e6a410d8330417e81bacdf7ceb3f3b3f9b525ffd4a1f39b637fc536e18485e67c21d9cb591e8927984ff03259a725757eedbd30afbeebf0afb03360655895a50d61d2d1aac3a4d6a3488b361df85a7d54f36958f84b9c09e04238be288eeffbbf9a4f931d9af3d48d62f3c2cab33683b25b8675472799cd68aa3452c76f874f6c258beb44a82f34a0ed435865493c3ae0c01582de73a97c5b939f9612f706388d02a165f198f361a7e7b11f923ba8bd787b846182ff8e842225a84275594daaa3b0b9e57cc26aab4c6fd1aae1c698a2a9b0947a02f7b87ddb7a107790f78b388afe51e28ee8b562068aac3f079e15fadcdcd64260eb0f7d50f7ff4b009f0cb45253c866ac56a52040a0573a093ea5a9523997405be4e16d4a196ec8e417e956a746f962b5efe3c94940aa0dba2032186e810b56e50c26204c283a008d1f1204c41ac6895f4c9b6a196eb625376ce708bf30ce84c58a50aa96948e40a27555bec686037de8293cfc4c72c6a55c32be0c50d264a76e82409ea0f24f888b8afde8bc2b9eb2b76dcd8e27acf587fd1e6fff3096554204471e3e50484910219bb54f2e329ab9b7ffc0cc90576dab03c40a763476913845166c18b8b257c4dd4fe3630de938569fe9165868db11c356a81159a9d85e784372e19b20624e8b3361125c4664c2ace16771e668517d8d392a29ccf137e476e426d2fbe31c5ace02761754acedee936c7d907abb8b0e13c5a77d91a495374492b75bcffe26d7b781f5ab576f73226b3364605284d8dd844e7f6866cc6bf684bc194e8cc3fa4f54bf3a5e737725146655058af65c71596ca1f9ee3d1f396aece2bad67c9fef46ec20780886634abe4e56c0ecc7b4b1c7fe3f2949d76a528110e6806b2725845cf9ef777e66e07eeed637720fdc67777f44156dd1c40cf7b0079170f618cb5925ae68d3a94279b16f408fba2b0c8140fa4b96746f29a2186067ddddb254cf60b0e0f632354833344e6a2c2a72a8540ed8cd5bce39487de178234f4f1aaab1019d1df90515bfd67d186fc61475f270e294e2e1c232ca18a263f586b15a817e76751f5f0061a3c951dc27cbfacf34859e12b8e1a7232a17f143b92dd525d198e89c3fa173cb1605bbcbfdac306963e5b24268c2388ddbb3b3a018b96f8a03af2d9e8cb7ddc4df1cd5aa0c4cd10369d0cce0d8248e5c84135ad04fceecd5fab8b348ac1062157f1b689b341c5b65929f5a78a11c72f33a85777f217906c595f67e275a0a82259c4d76c15eb728e13189426ffb11c66b94472fa1ff5af8f42c76e724ebac4d60b57cc372c2e47f878da08769e91ff53060865757a1efbeb95b056f5dbcc2ab03696fe8fd34a6982267ab76221ebb5647c24369c6eb7d64962068bde275c2753e7e18c40662acb0fde4240ba8637d60071db783b276fe1bd6d0c70415da8752e676a7d33aded43faa94c4bb09721f9f7672cb329ab9f3f09c7a22755eefab27b1b679b54ca78d4acbb5a511421bd2c6bff067b872bc94e80361ba0a34ef0bd907318a193783137fdd7c1bd908c37ceb626f8a4c8dd05f35efcf429f07ffdaceac17cc0964b0384e43f85cd72388beac535ed8e0c794478526bdb8bcf5e63697c66f1d607559eeb80602a6dcfa0651578533c2f2da491c6502ed2469ae8d93a92a1981c068213416f3cc622692d3513f8a8bb0414962500c69515e55f127c7a29000a18b76585a9206c61b483e857ae2b6efb81855c61856f868fd066d85916cb5e01469981e7e7fe867c1b116125a5a8bd8b8613a40e0f74124199213a0222c29b93ec83175a0aee92963d8738eae83b773e931d04a31482974eafb99d6de5766cc39ec2afc6435d3f2681cf1361ff834334c45fdcbbcce72be573c2c63b04e401110a84aa8485d93eeffd3692e693ddf69a5f00be5b20220271da858b6c7a461958e93417b5d5f3ae761e80846f79d93f1e0df155b8514a8572e7509061d67720a0123b4a8d38e7a20483eea028333986f29a4cd84176d575f611bc458fce15b824ef687238c05ff2623014f26490863f96649071886a0d28980dd4c0b6a7215603c8be6e871b89397d14f194f4916c70613caff853e9778ebed846984cb6a7543cef620e00138d55cfc5b7b21ba000e091c5d6abd5db0e3465354f1578ddaf05c25910c4611e46af44a6e8a5b2a3e88c04cdfe0683bde2d5c988a9a4fee3ef4edfd57574c1c6a205127431bd43151ea1d42a793aeb7e3f93f4efca607bc216543562abe5d6748cd7fc1c9e7d1eb883756b338cd467f709877c45ec828d10ec8c83e6a3329361c2d15d16d6f18e431adcb6fd17d3170ca5c4c3411f97fe64be984175fd8e481f1fb918eb5c741bdab2ef1be630ed63d8ad63ae234985e212fd87a9137e212b2bd59a8629e505d3d6bc085e1b0f4a968918a412cc2f836eb7b3878540d719bf012bbb711f898aeea1abeb85faa6afb681ff977314426e76d867a34665e0d1318e2b05d70d29a46e481ca3881856277369b5d79740b3d95bc58a8d6ecb4cfbd62b25fe6dc893987d728ff51ce903458bcd1d9dfeef6263836ac1614e510ad7cc76e0af52b0ffc359b762e03f6a0 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"},{"name":"面试","slug":"面试","permalink":"https://wiki.quartz.ren/tags/%E9%9D%A2%E8%AF%95/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[1]沟通能力","slug":"项目管理/1-沟通能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/1-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B/"},{"name":"面试总结","slug":"项目管理/1-沟通能力/面试总结","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/1-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"}]},{"title":"1.IOS开发总结","date":"2024-03-02T03:55:57.000Z","path":"wk/平台工具/[3]编程领域/IOS/001.IOS开发总结/","text":"IOS技术栈编程语言：Swift、Objective-C。 Swift：Swift旨在比Objective-C更安全、更快，并且更易于学习。 Objective-C：传统的iOS开发语言，仍然被广泛使用，尤其是在维护旧项目或使用某些第三方库时。 Objective-C 项目 启动入口入口及项目结构核心环节 main.m 在 Objective-C 项目中，main.m 是应用程序的入口文件，它包含了 main 函数，这是 C 和 C++ 程序的标准入口点。main.m 文件通常位于项目的根目录下，它负责设置应用程序的环境，创建和返回一个 UIApplication 实例，并启动事件循环。 UIApplicationMain UIApplicationMain 是一个宏，它在 main.m 文件中被调用，用于启动应用程序的运行循环。这个宏接受几个参数，包括应用程序的类、启动器的类、启动器的参数和返回值。 AppDelegate AppDelegate 是一个继承自 UIApplicationDelegate 的类，它负责协调应用程序的生命周期事件。在 main.m 文件中，UIApplicationMain 宏会创建 AppDelegate 实例，并在应用程序启动时调用其方法，如 application:didFinishLaunchingWithOptions:。 Info.plist Info.plist 文件包含了应用程序的配置信息，如应用程序的显示名称、Bundle Identifier、启动画面等。在 Info.plist 中，你可以指定 UIApplicationDelegate 类的名称，这个类就是 AppDelegate。 启动画面（Launch Screen）: 启动画面是用户在打开应用程序时首先看到的界面，它通常在 LaunchScreen.storyboard 或 LaunchScreen.xib 文件中定义。 RootViewControllerRootViewController 是应用程序的初始视图控制器，它在 AppDelegate 的 window 属性中被设置。在 application:didFinishLaunchingWithOptions: 方法中，你可以加载并设置 RootViewController。 在 Swift 项目中，main.swift 文件取代了 main.m，但入口点的概念和流程基本相同。Swift 项目同样使用 UIApplicationMain 宏来启动应用程序，并且也有一个 AppDelegate 类来处理应用程序的生命周期事件。 总的来说，iOS 项目的入口点是 main.m 或 main.swift 文件中的 UIApplicationMain 宏，它启动了应用程序的运行循环，并设置了 AppDelegate 和 UIApplication。这些组件共同定义了应用程序的启动流程和生命周期管理。","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[3]编程领域","slug":"平台工具/3-编程领域","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/3-%E7%BC%96%E7%A8%8B%E9%A2%86%E5%9F%9F/"},{"name":"IOS","slug":"平台工具/3-编程领域/IOS","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/3-%E7%BC%96%E7%A8%8B%E9%A2%86%E5%9F%9F/IOS/"}]},{"title":"1.1 C类_职测_例题精解","date":"2024-03-02T03:55:57.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/事业/001_1.C类_职测_例题_真题精解/","text":" 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"事业","slug":"项目管理/3-生活学习/3-综合能力/事业","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E4%BA%8B%E4%B8%9A/"}]},{"title":"1.2 C类_职测_例题精解_2024","date":"2024-03-02T03:55:57.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/事业/001_2.C类_职测_真题精解_2024/","text":"6529a249a0af82b27e00ec9fb492a16509e0ab54fed1a1b181f77886475504de6e4c68bf7f6d8d6090d051da1ad7bef09290497c1facdda1ce78b26502cfb5e62112528a8d539a5ff87e480a01fe98799bef4acba69437f45d72a5c968a44cbf68a550b1ad4aff9b15dd484477101f08894fc7e6608263d23c5457edecd9f95c3dd12769e26c9d32f530c60d686b1b22ff8adfa491090652f8ecc9a85144629fe5a598110cd7cd594165e63b57051c2626177608ac68541181c5076555da5855bb2e6911f58c3ffd84d5a85035e8ad1efb156ebaf44cf2a45623c016341bec8b57eb892da3466926d4c131e8dc1f8d3156c50fced9d4be0a89c8c9c972540a06967437d30aafdbf42ac14ba0ddf1a045174b7cd086cd03d70b40273c9ff9519fe2089fb4b24c38548212c2feee407d521415b28757f00e48430975bb0ad79d243909e54993c0fded89870a9c09f7f64e02065205978a754f453d5b2baec2ca1996e0b4903a66c6a5a8efe474624251091ef29fa186b1cd5a921d646a009cb004ca919349f5c4f774677d4fe8f9a50a88243e133a8e6d0931d64f4ccc433bd615a7a9f65409c0977eb01eb7fb93870ae6d87b2a239c9115ac77d5452d9985ea5949080f8f14a967e0a04fc3ebf72e8328b8e213d38674bdc4c413c32d9ccd24cee4f341277f24a259b322e038cf12c839c2966a2ca9df5981bf8ce5d53d86d0165b9b6c331c6fb0e2e067172127f49f038f22bd88c9b57f49924186b0e77b621ec6543b11ffb29db77f6c8f3727ff21120ed0d1f6efc23b73f1d52e5784b9e9ea8f662b85f18f962c1fb1b53fa283e0afdb98accd795d8792680d9e21f5cad8d2616b79ddea7ea5ccaf19e332d95c5f078dbb19b278738a16f51e38cae888011269dadbd4fe2fd7642cf1acb449c90493fbdc64050d5a85bb696fde5feeca9446d19b375770b142973cdc55643548adde93b186437f79b78e5324153bc9c35593e477167c361fa609025a5a522adcffd7f188eb84df4e89d90d69fe36012bf10c0e782023b07c244701b2cb54aa14bb1da449be4aaefde94f4e2627f0d16c4ed78722c33fdd3eb46da5e9c52d55f050c6a578b90c03a6c001761c0f8900c9d05563d1059107a872dcd1fe8dbea95d9d523221794daf4944fcaf76d5771f9d2cfe9a79738b0c254648e54a0cc5925913464e5ffc2bc650b724608bdce6793b1e2a9c182329124527753370d25940cf19110c22eef3d19ecfd3201111dfbdc271ca25a8596c3cdee1dd3489f837ec019f702f553cb2a29554245d018c663b5c3d183e15ecc32884e7c48021f485ac11f87af0e62df7851891f3691d7d213095141a1a9fdbbde61b1d2bba6d410abdc853e58b1112d8d18cb3589a24929d939ab728b5a29d02e64857d0dbdf3ad91bd3eee557ba2ed03d05dd305f922410b4e10e41faf19d5e66b51a3c564e9e5cf13e23df8b1973f825e61b816f3f0aad844010ddc61ea273e0e7c525290d7422fbeee76375c99e4f7c63c1cb543198e1eee57c4baf3e7494f1d0fb2e4b9166823cdb66b53312d3d6267d03c94a77d227b26ed449d0e6eea7f5d63e4babaf8074bb91a750af1599639ce791800692587cfd1e4c26db03864d0e9149c1bdf9d5749d461fdf2188a3db48c93a06937a1eececdca372962c840290cc685b62fe4a132d0297423b74214056e5e38cbf7eefbfb2a38f27f5d81dc9a203522772bb8e8902ee9ede82e8384738fca40ab09d80ae60111997b2e8e5e10359933218af91d6e195b517a54313441e3449aed18d51a8176322fbac052a8ca861a6cbfb77f4a7f35fbb16375959359c865df3b5ce853585fc561141a3cfa7155d57f066c82734cfdd1b1f7dc169eadcbcf54fc154b16c150b007484898db3d71010683f36c6b62182a04ba7bf7d7d639d6be7142415401607b18fa4515c4ba2426729325401da9dbadc8c32e20fc15931b147d6111595ef72ca047133cacff791442045fc880d917a098d46c78bb7e466aab5f52d4dd9f98650a7e240dfe931385de983ed2568f7c15404b1a06c79e974233ffc82a5a41c56b4de71a6f00ca267287769d18b775788c73fbe894933408f6223c7b4a1ea9215705165914ea18107c64a38c1e66d7132359d6d5fe38b4d47753e0bdedb8d6bc05ef21f55137f736262ed634178ae70d1b2ce 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"事业","slug":"项目管理/3-生活学习/3-综合能力/事业","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E4%BA%8B%E4%B8%9A/"}]},{"title":"学习思考_系统化","date":"2024-02-24T01:56:24.000Z","path":"wk/项目管理/[3]生活学习/[2]教育/学习方法/001.学习思考_系统化/","text":"不要过多的陷入细节. 多从顶层设计开始(系统思维). 坚持做的重要的事情 深度学习模型训练、算法学习、应用场景? 做成方案、表述 讲解的能力 提升。","tags":[{"name":"教育","slug":"教育","permalink":"https://wiki.quartz.ren/tags/%E6%95%99%E8%82%B2/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[2]教育","slug":"项目管理/3-生活学习/2-教育","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/2-%E6%95%99%E8%82%B2/"},{"name":"学习方法","slug":"项目管理/3-生活学习/2-教育/学习方法","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/2-%E6%95%99%E8%82%B2/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"}]},{"title":"2.职侧考试总结","date":"2024-02-24T01:56:24.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/事业/002.职侧考试总结_filter/","text":"6529a249a0af82b27e00ec9fb492a1656491ad31e382611f756d32912920ce22af4095965f76c9a4dfe9578dd5894a1d3dede36190a9fa7b3f1c9faf2b0a063e178964ce412ec690c8bb6952eaca4d596dad612fca9f8fb5dd9db3e29f7403c471c076c563af13908ae8af2dde1a2b8591bbece1648e296f8bbd71f263011d10478666e268ef6b585a1e66dfe5d9b977a5936cd56476cd6d7ee6d7073f7ddccf94f066cc5ebf5d464e9597e03d9a9220e030788094f7cc726e0e091dbaf6dcabe645ec3305271413b20dc906ec02e7a07964df58635791019b2fcdf02363b9ff2fc844509b4eacc3c628141266f936a6141e23b57876ad1a993dff621eca5b22ecabd2ac52b0150f32f4c117857073f83e5e21d338ece945a1368e4e0abe64cad9f7c7aceacf37487e90c2f3fc1cc097d5c094b0417541e6454a4c4e354d754879cc5b3b9fe22127ee69825f61219c9ea08638e23b433fea04b04eb2239df09b 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"事业","slug":"项目管理/3-生活学习/3-综合能力/事业","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E4%BA%8B%E4%B8%9A/"}]},{"title":"3.公考行测与C类的差别","date":"2024-02-24T01:56:24.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/事业/003.公考行测与C类的差别/","text":"6529a249a0af82b27e00ec9fb492a165cd7b472eb2ff883b7cc2ddc06f5cd8c5 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"事业","slug":"项目管理/3-生活学习/3-综合能力/事业","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E4%BA%8B%E4%B8%9A/"}]},{"title":"客户端最新技术","date":"2024-02-18T14:55:57.000Z","path":"wk/平台工具/[3]编程领域/客户端开发/001.客户端最新技术/","text":"最新的客户端技术语言：Java / Kotlin ; Objective-C / Swift 关键词：移动端跨平台、Flutter、C++ 开发(音视频相关) 沟通能力、学习能力、快速响应变化. 开发平台. Gradle、Android性能. Android框架源码. 网络协议、多线程. 分析和解决实际问题的能力和态度. 跨平台（React Native、Flutter） JD要求 了解Android Framework 系统架构、有Android 源码分析经验。 有App性能优化的经验，包括网络、内存、CPU等. 有C++编程经验，可以独立封装JNI接口. 具备扎实的OC和Swift语言基础，有良好的编码习惯和代码风格.","tags":[{"name":"客户端","slug":"客户端","permalink":"https://wiki.quartz.ren/tags/%E5%AE%A2%E6%88%B7%E7%AB%AF/"},{"name":"Android","slug":"Android","permalink":"https://wiki.quartz.ren/tags/Android/"},{"name":"IOS","slug":"IOS","permalink":"https://wiki.quartz.ren/tags/IOS/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[3]编程领域","slug":"平台工具/3-编程领域","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/3-%E7%BC%96%E7%A8%8B%E9%A2%86%E5%9F%9F/"},{"name":"客户端开发","slug":"平台工具/3-编程领域/客户端开发","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/3-%E7%BC%96%E7%A8%8B%E9%A2%86%E5%9F%9F/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91/"}]},{"title":"沟通-重要性","date":"2024-02-08T01:56:24.000Z","path":"wk/项目管理/[1]沟通能力/000.沟通的重要性/","text":"领导眼中工作价值 = 你的工作价值 * 沟通能力.","tags":[{"name":"沟通","slug":"沟通","permalink":"https://wiki.quartz.ren/tags/%E6%B2%9F%E9%80%9A/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[1]沟通能力","slug":"项目管理/1-沟通能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/1-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B/"}]},{"title":"与人","date":"2024-02-08T01:56:24.000Z","path":"wk/项目管理/[1]沟通能力/002.与人/","text":"重要！！！ 与人相处 是非常重要的。 有一定的规律， 需要去探索、细化、研究。 是一个重要的课题。 需要陆续的去积累.","tags":[{"name":"沟通","slug":"沟通","permalink":"https://wiki.quartz.ren/tags/%E6%B2%9F%E9%80%9A/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[1]沟通能力","slug":"项目管理/1-沟通能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/1-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B/"}]},{"title":"指向","date":"2024-02-08T01:56:24.000Z","path":"wk/项目管理/[1]沟通能力/一点管理/001.指向/","text":"6529a249a0af82b27e00ec9fb492a165840d3da62ae429d12f20c4ca1c5c4f530fe46cd35fca6b9731cfa7ed85387c263650906aa3a2937a4eeb3a60abe3392143f5f4435cd7fa555b47b5ac41b136974aa33ec049002eaa3a47338c1b5a5026ec25646e37d2f75667b4a9fc63fc3eda10f409bd58a3863f2389baaf9ca3efd246b8a8a0ac85ae4507aa670ef5cf9552e687a20df00786033881ffce8c386f2bcc60608c9b7a10df21595a9a1fc4e7ccb90543b0da5633dafa3d96c03f737e339fcccacc90ebdc6631da6a596f1dcff629a7d4d593f2b53005b6c10fd29597748079a49e0786092b74a7324798e27dcc7e5bb57d62997a657eaa04e832087c1516a12687678b6869d260066b5f30f232d9da4fd480b02690c7e768b7669536aa6d7ecb5699ecb49e2beb33a4759d02fd26158d6199f45f1f7a07a1e4dc6ff4ce4aac7b187d5e3f8d03b3c7c2eeef8da36b9282bf008253a0c6f9a3e9159c4f558818b8299fde976bcb9b034ce9b3fe7adab6c9abfac0fcd340c90f92b4a1c91155e28b308851ec5af0e82581fb9724885b1f280e56b52459480fcc3c06eea7341e6ba223355ea44d63dd7886356dddf4c96b874c4c7bdbdb69eb35ff0bacb91a401d7ab71b149f72fcf86b546e7b62ec0412720fcb3b9d9745d3d6b89bc7141d58309c7bb6676537a62df37e8e0529c19c7db445debec6d1314edb6a83c9881c074f92f1b9dfd9342940971eabad73ae191e9c02710f29d90c16b93c2cc7961f826bde3624c33a10e0e6ed463bda8b919ce6c59adca5ca7b518e0ecce6d40e69041674ef90124b535235c03e559171e11b68be761fb1ad63b8604e2bda0cc5a113d5ae7e41f0b9d6de597f5d28399ba97428e5a1ad4d5334872e9f52ca90f247c5e9a9cdf0396b2b36da09fa3d3ddf3962398f0b0a78930a312d04b8e711b867386028943521fe9bfd843e15695dc9168f4e737ad668da39a2bc446cf41885080ce6c7cc5f5231b9fea1af05acf101fdac0a8ead55a7bf61d3cc7e0df42ae58e3ccd75a92a3ac59e2fddb3b1ceeb346d1fd833b13bd443051605baf0922407f710258b0ff4ec12ac50385de084c4e9acbfea80f4621de865e88cf51e1bf0cc88fdeb51160fe1f3fe9be1eb919d1acb8d 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"},{"name":"沟通","slug":"沟通","permalink":"https://wiki.quartz.ren/tags/%E6%B2%9F%E9%80%9A/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[1]沟通能力","slug":"项目管理/1-沟通能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/1-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B/"},{"name":"一点管理","slug":"项目管理/1-沟通能力/一点管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/1-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B/%E4%B8%80%E7%82%B9%E7%AE%A1%E7%90%86/"}]},{"title":"3.自我介绍","date":"2024-02-08T01:56:24.000Z","path":"wk/项目管理/[1]沟通能力/面试总结/003.自我介绍/","text":" 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"},{"name":"沟通","slug":"沟通","permalink":"https://wiki.quartz.ren/tags/%E6%B2%9F%E9%80%9A/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[1]沟通能力","slug":"项目管理/1-沟通能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/1-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B/"},{"name":"面试总结","slug":"项目管理/1-沟通能力/面试总结","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/1-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"}]},{"title":"4.面试重点问题","date":"2024-02-08T01:56:24.000Z","path":"wk/项目管理/[1]沟通能力/面试总结/004.面试重点问题/","text":"6529a249a0af82b27e00ec9fb492a165546f617776efcb26151c40d8997e9df3ba841cd8e63f43b41e355b12831afdb8a5d969325649e917e1e050c0b368d9c0daa932d70fd012e7ba8526756d006bb35635f24455ee17615a45b6b4cd70ae4a27222161de833c23964b6f29c6d8e55fe3ecbf1ba0a3ebc4759c30daa38798212e74f033d9bcbe59481751fbfc2ebd9e29c577dcd187d55b005ab5995193fd8ff744bc9c005aff21a669bed88dda9c86419e58ca60eedd2550fda3b537bb3dc7e420dc85d0dd05038618f202fc2d1ae04caae8a1338dc710bf6c2b4e6bfa022d4c2edb0148dd60675811590a6d765c76 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"},{"name":"沟通","slug":"沟通","permalink":"https://wiki.quartz.ren/tags/%E6%B2%9F%E9%80%9A/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[1]沟通能力","slug":"项目管理/1-沟通能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/1-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B/"},{"name":"面试总结","slug":"项目管理/1-沟通能力/面试总结","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/1-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"}]},{"title":"2.面试问题梳理","date":"2024-02-06T14:55:57.000Z","path":"wk/项目管理/[1]沟通能力/面试总结/002.面试问题梳理/","text":" 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"},{"name":"面试","slug":"面试","permalink":"https://wiki.quartz.ren/tags/%E9%9D%A2%E8%AF%95/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[1]沟通能力","slug":"项目管理/1-沟通能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/1-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B/"},{"name":"面试总结","slug":"项目管理/1-沟通能力/面试总结","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/1-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"}]},{"title":"3.架构设计原则总结","date":"2024-02-05T14:55:57.000Z","path":"wk/平台工具/[1]架构设计/05.学习资料及实践总结/003.架构设计原则/","text":"","tags":[{"name":"架构设计","slug":"架构设计","permalink":"https://wiki.quartz.ren/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"05.学习资料及实践总结","slug":"平台工具/1-架构设计/05-学习资料及实践总结","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/05-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%8F%8A%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"}]},{"title":"软件架构设计体系","date":"2024-02-03T14:55:57.000Z","path":"wk/平台工具/[1]架构设计/001.ArchitectureStart/","text":".article-entry table { width: 78%; } 1. 架构概述首先架构从角色(架构师)角度有以下大的分类： 分类 说明 企业架构师 关注整个企业的IT战略和架构，确保各个业务部门的系统能够协调运作，以实现企业的业务目标 解决方案架构师 为特定的业务问题或需求，设计全面的技术解决方案，包括软件、硬件、网络等方面的整合 软件架构师 专注于软件系统的架构设计，包括系统结构、模块划分、接口设计、技术选型等，以确保软件的可扩展性、可维护性和性能 数据架构师 负责设计和管理组织的数据结构，包括数据库、数据仓库、数据治理、数据集成等，以确保数据准确性、完整性和可用性 技术架构师 侧重于技术平台和基础设施的架构设计，例如云计算平台、服务器架构、网络架构等，为应用系统提供可靠的技术支撑 安全架构师 关注系统的安全架构设计，制定安全策略和措施，防范各类安全威胁，保障系统和数据的安全 不同的角色在职责和技能侧重点上会有所不同，但都致力于通过 合理的架构设计来支持业务的发展和技术的有效应用。这些不同的分类也不是完全独立的，有一定的关联性。 比如AI架构，可以视为 特点领域的技术架构，同时也与软件架构密切相关。 我们这里的架构设计 以软件架构、技术架构为主，总结系统的方法和必备技能，构建并完善架构师能力模型。 2. 软件架构师能力模型 这其中最核心的是那个呢? 我认为是专业技能和人际交往。 这些内容很难完全掌握，因此侧重点在专业技能和人际交往。当然其它的方面也是需要有一定的能力。 技术图谱参考:https://gitee.com/qfork/architect-all.下面的各个子目录及文章将围绕这个模型展开系统梳理各个技能细节。 2.1 领域知识对特定领域深入了解 是至关重要的。 要知道它是什么，将是什么，可能是什么，以及为什么。客户经常找到软件架构师，要求向他们展示行业领导者正在做什么以及如何做。领域知识还可以帮助软件架构师说一种商业通用的语言，这反过来帮助他们成为连接管理和开发团队桥梁。 2.1.1 风控2.1.2 搜索2.1.3 其它2.2 人际较往能力展示自己的技能需要的，如倾听、口头和书面沟通、推进、冲突管理、演示、谈判和说服。 2.3 专业技术需要学习软件工程的所有领域，包括软件设计、编码、质量保证、DevOps、性能分析、软件安全、项目管理、软件支持等等。这些技能对于创建满足软件架构“能力”的解决方案至关重要。当与开发团队中的专家交流时，软件架构师能够更好地理解相关信息，因为他们已经具备了这些领域的实践经验。 作为开发团队成员，可以胜任各个领域的日常工作，包括后端、前端和 DevOps。 2.4 项目管理从以下几个方面展开，系统学习架构设计. todo 基础知识：计算机网络、操作系统、数据库、算法与数据结构等. 常用架构模式：分层架构、微服务架构、事件驱动架构等(理解这些模式的优劣势，以及在不同场景下的适用性). 设计原则：高内聚低耦合、单一职责原则、开闭原则等(有助于设计出易于维护和扩展的系统架构). 实践经验总结：学习业界的实践经验和成功案例，阅读相关的书籍、博客和论文，了解其他人在系统设计方面的思路和经验. 持续学习和改进：订阅相关的技术期刊、邮件列表或社交媒体，保持对新技术和趋势的关注，不断学习和改进自己的架构设计能力. 使用设计工具：总结好用的工具(设计工具和建模语言)，帮助更好地理解和表达系统架构设计. 实践.","tags":[{"name":"架构设计","slug":"架构设计","permalink":"https://wiki.quartz.ren/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}]},{"title":"云计算认识","date":"2024-02-03T14:55:57.000Z","path":"wk/平台工具/云计算/000.README/","text":"云计算最初的目标云计算最初的目标是对资源的管理，管理的主要是计算资源、网络资源、存储资源三个方面。 发展历史追溯到20世纪50年代，当时计算机技术和网络技术的发展为云计算的出现奠定了基础。 云计算之前的计算模式是：传统的数据中心和客户端/服务器模式。 这种方式存在硬件和软件资源的浪费、数据安全和隐私保护问题，以及难以实现计算资源的灵活扩展等问题。 随着互联网的发展和大数据处理的需求增加，传统的计算模式已经无法满足需求，因此云计算技术应运而生。 云计算是一种基于互联网的计算模式，它将计算资源集中起来，通过虚拟化技术实现计算资源的灵活扩展和动态调度，从而提高了资源的利用率和灵活性。 优点特性：安全性、灵活性（时间灵活性、空间灵活性）、降低成本、提高资源利用率。 关键技术和应用云计算的发展历程中，出现了许多关键技术和应用。例如：分布式计算、网格计算、效用计算、负载均衡、并行计算、网络存储、热备份冗杂等。 分布式计算：一种将一个大型计算任务分解成若干个小部分，然后在多台计算机上并行处理的技术。（提高计算效率和计算能力，并且可以充分利用计算机资源） 网格计算：分布式计算的一种，它将一个需要大量计算的任务分解成若干个小任务，然后在网格中的多个计算机上进行处理。（强调网络：对计算资源的调度管理，以充分利用空闲的计算资源，提供效率和利用率） 效用计算：一种提供服务的模型，服务提供商提供客户需要的计算资源和基础设施管理，并根据应用所占用的资源情况进行计费，而不是仅仅按照速率进行收费。效用计算可以降低客户的硬件和软件成本，提高资源利用率和管理效率。 负载均衡：一种将计算任务分配到多个处理器或计算机上并行处理的技术。通过负载均衡，可以避免单点故障和性能瓶颈，提高系统的可靠性和性能。 并行计算：一种将一个大型计算任务分解成若干个小任务。 网络存储：一种数据存储方式，它将数据存储在多个硬盘或存储设备上，并通过网络进行访问和管理。网络存储可以提高数据可靠性和可扩展性，并且可以方便地实现数据共享和备份。 热备份冗杂：一种数据备份和冗余技术，用于保障系统的可用性和稳定性。它可以在系统运行的同时进行数据备份和冗余，保证系统持续运行，降低系统故障对业务的影响。 每种技术的应用：用于数据安全、系统稳定性、机器学习、容灾、云计算、分布式存储、大数据处理等 发展比较相比于以前传统的数据中心和客户端/服务器模式，实现了计算资源的集中管理和动态调度，为大数据处理、企业应用、移动应用等领域提供了强大的支持。 云计算分类云服务类型角度、计算原理角度、部署模式角度。 {:width=”600px”}","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"}]},{"title":"1.架构设计学习资料","date":"2024-02-03T14:55:57.000Z","path":"wk/平台工具/[1]架构设计/05.学习资料及实践总结/001.架构设计学习资料/","text":"1. 2024年 系统架构设计师（软考高级）备考资源库。CTO说 / 系统架构设计师 2. 极客时间 - 架构实战案例解析3. 极客时间 - 从0开始学架构极客时间已完结课程限时免费阅读 https://freegeektime.com/posts/100006601/ 3.1 菜鸟学架构 - 从0开始学架构https://learnarchitecture.readthedocs.io/zh-cn/latest/ 4. 架构设计实践五部曲5. 书籍： 企业级业务架构设计方法论与实践从方法论和工程实践 双维度阐述企业级业务架构设计的著作 6. 后端架构师技术图谱https://gitee.com/gavincfm/architect-all","tags":[{"name":"架构设计","slug":"架构设计","permalink":"https://wiki.quartz.ren/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"05.学习资料及实践总结","slug":"平台工具/1-架构设计/05-学习资料及实践总结","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/05-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%8F%8A%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"}]},{"title":"4.架构设计工具总结","date":"2024-02-03T14:55:57.000Z","path":"wk/平台工具/[1]架构设计/05.学习资料及实践总结/004.设计工具总结/","text":"","tags":[{"name":"架构设计","slug":"架构设计","permalink":"https://wiki.quartz.ren/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"05.学习资料及实践总结","slug":"平台工具/1-架构设计/05-学习资料及实践总结","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/05-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%8F%8A%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"}]},{"title":"5.架构设计-能力定义","date":"2024-02-03T14:55:57.000Z","path":"wk/平台工具/[1]架构设计/05.学习资料及实践总结/005.能力定义/","text":"参考一段JD - 解决方案架构师：业务分析、系统分析、架构设计 工作职责：1、负责综合解决方案型项目的业务分析，调研用户使用场景梳理业务流程，输出业务分析报告2、负责复杂业务系统的系统分析，评估产品和平台的匹配度，完成系统分析报告3、负责非标产品的设计与构建，包括方案设计、系统架构设计、技术选型等，确保非标产品落地4、参与项目售前阶段客户汇报、从技术测主导可研、建设方案等撰写，推动项目落单5、参与各类方案的评审，从技术测识别解决方案的风险、难点，提供解决方案和决策依据6、参与行业或区域内的市场分析、业务规划、基线解决方案构建等。 具有丰富的项目经验，熟悉项目流程，能够准确的把控项目，配合销售部门，完成项目落地:具有丰富的商业眼光，在与用户和合作伙伴的沟通中，能够挖掘用户需求，发现新商机:有大型分布式、大数据量、高并发、高负载、高可用系统架构、设计、开发和调优经验， 优秀的需求理解能力、分析能力、问题界定与算法设计、建模解决能力:有很强的判断、决策、计划与执行能力，良好的沟通、协调、组织能力和跨专业技术团队管理能力;有责任感，有创新精神，学习能力强，良好的团队合作精神。 Bank岗位职责： 1.结合应用架构规划，协助开展技术架构选型、技术规划方案设计工作。 2.参与需求分析及编制工作，包括参与项目需求讨论与受理，参与项目技术可行性分析、识别项目需求风险，参与项目需求分析说明书的编制与评审等。 3.牵头总体方案设计工作，包括参与项目总体方案编制与评审，对技术规范符合情况进行把关等；牵头负责详细设计评审工作，包括负责项目细化方案的编制与评审，落实技术规范相关要求等。 4.负责非功能需求的设计工作，考虑性能容量、设备新增、安全、运维、易用性等相关内容。 5.负责应用架构规划并提出技术优化建议，识别和管理应用关联关系，组织完成技术资产积累。+++ 任职要求： 1.熟练掌握分布式架构体系设计及常用架构设计模式，能够熟练完成项目的需求分析、方案总体设计及详细设计等工作，具有分布式系统架构设计和核心模块研发经验优先； 2.精通Java、J2EE、Spring、消息队列、缓存等主流编程语言和技术框架，熟悉企业级PaaS平台，掌握其设计原理，熟悉高并发、高可用系统的设计原理； 3.精通Tomcat、TongWeb、宝兰德等常用中间件的部署和运维； 4.至少掌握一门开放平台常用数据库的设计（包括但不限于DB2、ORACLE、SAS、Teradata、MySQL、GaussDB等），了解其开发、调优等技术； 5.具备云原生、分布式系统等相关技术，对服务设计、GaussDB和MySQL数据库有实操经验。熟悉dubbo、docker、k8s、redis、kafka、nginx、haproxy等工具和框架的原理，并能熟练使用； 6.具备应用设计、开发、测试、运维相关的理论知识及专业技能，熟悉相关技术规范，具备技术架构、技术规范、安全因素、成本投入、技术风险等可行性分析能力； 7.具备良好的沟通表达、团队协作和方案编写能力，工作责任感强，具备一定的抗压能力； 8.了解金融科技研发相关基础知识，熟悉理财基金业务或者金融市场业务、有金融科技从业经验、熟悉金融业务系统架构者优先。","tags":[{"name":"架构设计","slug":"架构设计","permalink":"https://wiki.quartz.ren/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"05.学习资料及实践总结","slug":"平台工具/1-架构设计/05-学习资料及实践总结","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/05-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%8F%8A%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"}]},{"title":"实践_架构设计案例","date":"2024-02-03T14:55:57.000Z","path":"wk/平台工具/[1]架构设计/05.学习资料及实践总结/实践_架构设计案例/","text":"架构设计流程 DDDDDD的聚合模式 DSL 驱动复杂软件开发 …","tags":[{"name":"架构设计","slug":"架构设计","permalink":"https://wiki.quartz.ren/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"05.学习资料及实践总结","slug":"平台工具/1-架构设计/05-学习资料及实践总结","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/05-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%8F%8A%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"}]},{"title":"实践_风控架构篇_01","date":"2024-02-03T14:55:57.000Z","path":"wk/平台工具/[1]架构设计/05.学习资料及实践总结/实践_风控架构_01/","text":"","tags":[{"name":"架构设计","slug":"架构设计","permalink":"https://wiki.quartz.ren/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"05.学习资料及实践总结","slug":"平台工具/1-架构设计/05-学习资料及实践总结","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/05-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%8F%8A%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"}]},{"title":"云计算-产品","date":"2024-02-03T14:55:57.000Z","path":"wk/平台工具/云计算/01.产品技术架构/001.产品/","text":"以阿里云为例，主要分为几个方面： 计算、容器、存储、网络、安全、中间件、数据库、大数据计算、AI、等等。 云计算的产品和解决方案之间的关系可以理解为是一种有机组合。云计算的产品包括计算、存储、网络、安全、人工智能、大数据、物联网等方面，而解决方案则是基于这些产品，通过有效组合和配置，解决系统性问题的一种方法。 具体来说，云计算的产品是实现云计算解决方案的基础组件，解决方案则是将这些基础组件进行有机组合，以满足用户的实际需求。云计算解决方案的构建过程通常需要考虑用户的需求、业务场景、技术环境等多个因素，通过合理的配置和优化，实现云计算资源的共享、效率和节能，提高用户的业务效率和竞争力。 云计算产品和解决方案的提供商可以根据用户需求定制化产品和服务，提供符合用户需求的解决方案。同时，随着技术的不断发展和用户需求的变化，云计算产品和解决方案也需要不断迭代和创新，以满足市场的变化和用户的需求。 总之，云计算的产品和解决方案之间的关系是一种有机组合，通过合理的配置和优化，实现云计算资源的共享、效率和节能，提高用户的业务效率和竞争力。","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"01.产品技术架构","slug":"平台工具/云计算/01-产品技术架构","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/01-%E4%BA%A7%E5%93%81%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"}]},{"title":"云计算-技术和架构概述","date":"2024-02-03T14:55:57.000Z","path":"wk/平台工具/云计算/01.产品技术架构/002.技术和架构/","text":"云计算是一种基于互联网的计算方式，它通过虚拟化技术将硬件资源（如服务器、存储设备和数据库）转化为动态可扩展的虚拟资源，并通过网络提供给用户使用。云计算的技术和架构包括以下几个方面： 云计算技术 虚拟化技术：云计算的核心技术之一。将物理硬件资源虚拟化为多个虚拟资源，实现资源的共享、灵活调度和高效利用。虚拟化技术包括服务器虚拟化、存储虚拟化、网络虚拟化等。 分布式技术：分布式技术是云计算的重要组成部分，它通过将数据和应用程序分布到多个节点上，实现负载均衡和高可用性。分布式技术包括分布式文件系统、分布式数据库等。 容器化技术：容器化技术是一种轻量级的虚拟化技术，它将应用程序及其依赖项打包到一个独立的容器中，实现应用程序的快速部署和管理。容器化技术包括Docker、Kubernetes等。 微服务架构：微服务架构是一种将应用程序拆分成多个小型服务的架构模式，每个服务都运行在独立的进程中，并使用轻量级通信协议进行通信，实现高内聚、低耦合的设计原则。微服务架构包括Spring Cloud、Dubbo等框架。 自动化运维：自动化运维是云计算的重要特征之一，它通过自动化工具和流程来降低运维成本，提高运维效率。自动化运维包括自动化部署、自动化监控、自动化备份等。 云安全技术：安全技术是保障云计算安全的重要手段，它通过数据加密、访问控制、安全审计等手段来保护云端数据和应用程序的安全。云安全技术包括身份认证、访问控制、数据加密等。 虚拟化技术存储虚拟化： 基于存储设备的虚拟化、基于网络的虚拟化存储。","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"01.产品技术架构","slug":"平台工具/云计算/01-产品技术架构","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/01-%E4%BA%A7%E5%93%81%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"}]},{"title":"技术架构思考总结","date":"2024-02-03T14:55:57.000Z","path":"wk/平台工具/云计算/01.产品技术架构/003.技术架构的思考和总结/","text":"","tags":[{"name":"架构","slug":"架构","permalink":"https://wiki.quartz.ren/tags/%E6%9E%B6%E6%9E%84/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"01.产品技术架构","slug":"平台工具/云计算/01-产品技术架构","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/01-%E4%BA%A7%E5%93%81%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"}]},{"title":"云计算解决方案-底层思维","date":"2024-02-03T14:55:57.000Z","path":"wk/平台工具/云计算/02.解决方案/001.底层思维/","text":"一个解决方案的组成：比如 架构、需求、用到的技术、解决的问题、优缺点 等。 领域划分。安全、技术平台、基础设施领域解决方案分析。","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"解决方案","slug":"解决方案","permalink":"https://wiki.quartz.ren/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"02.解决方案","slug":"平台工具/云计算/02-解决方案","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/02-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}]},{"title":"云计算解决方案-5大场景","date":"2024-02-03T14:55:57.000Z","path":"wk/平台工具/云计算/02.解决方案/002.解决方案架构师5大场景/","text":"一、 5大场景1. 生产数字化中国是制造大国，接下来10年，咱们要尽快成为制造强国，顺势而为，吃透制造场景，就拥有了制造业的架构能力。 工业互联网、产业互联网、网物联网 2. 供应链数字化未来像小米这样只搞研发设计，制造OEM化的公司多如牛毛。 谁掌握了无边界组织的精髓。 3. 营销数字化客户管理、品牌互动、精准营销只要是零售、不管是卖手纸、卖手机 全都营销数字化转型。 4. 财务数字化老板 是半个精明的财务能用数字化 帮老板把钱捋顺 5. 经营数字化老板，决策拍脑袋，对错全靠民。 数组 二、架构师的不同、区别总结。包含关系：企业架构 &gt; 解决方案架构 &gt; 技术架构. 1. 技术架构解决的问题：特点系统技术层面的结构性问题。目的：在技术层保证软件的质量（效率、成本、性能-质量、安全-稳定性） 2. 解决方案架构解决的问题：系统性问题，不局限与技术层面.目的：使系统满足客户的需求，包括功能、安全性、合规性、成本等. 在技术架构的基础上。 包括网络安全、需求场景、成本、安全-合规等 3. 企业架构解决的问题：企业中系统本身，系统间的结构性问题目的：通过对系统结构性调整来使企业内的系统能够支撑企业的战略发展需求. (合规性、安全性、成本) - 不同架构和技术的实现，带来的一些问题。 三、架构师需要具备的能力技术层面：网络、存储、 面向市场的解决方案架构师。 8-10年的经验。 三、个人思考总结","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"解决方案","slug":"解决方案","permalink":"https://wiki.quartz.ren/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"02.解决方案","slug":"平台工具/云计算/02-解决方案","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/02-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}]},{"title":"云计算解决方案-售前区别","date":"2024-02-03T14:55:57.000Z","path":"wk/平台工具/云计算/02.解决方案/003.解决方案架构是和售前的区别/","text":"解决方案架构师（SA） SA能力极其复合。横跨售前、售中、售后；也就是具有出方案、拿订单、抓落地的 广谱能力。 而售前的能力往往只聚焦在售前， 对于落地能力（不怎么样） SA 虽然能力具有广谱性，但80%的 SA往往只做出方案 和拿订单的活。 至于抓落地的苦杯活，往往敬而远之。（因为挖坑比填坑赚钱…） 所以时下的SA都是“管挖不管埋”； 至于售前也就是攒攒WORD、堆堆PPT， 做这些垃圾活，可以说毫无存在感。甚至感觉自己啥都不是。 听说过“围标”吗？ SA往往做主标；也就是SA投的标，会中标； 至于售前，往往是陪标的（当托） 售前陪标的使命，就是不中标 基于客户的需求 还有自己的产品去 制作方案。然后向客户传递方案；解决客户的痛点。 （与程序员的区别：看客户的需求、看自己的产品；基于客户的场景、业务流程，帮客户去解决问题） 不是纯产品的架构师，更多的是站在客户的角度。","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"解决方案","slug":"解决方案","permalink":"https://wiki.quartz.ren/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"02.解决方案","slug":"平台工具/云计算/02-解决方案","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/02-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}]},{"title":"云计算解决方案-面试","date":"2024-02-03T14:55:57.000Z","path":"wk/平台工具/云计算/02.解决方案/004.解决方案架构面试/","text":"议题1. 基于XXX(AWS、阿里云)平台的服务设计一个架构 分析：都有哪些可用的服务和产品. 云服务器、容器、弹性伸缩、数据库、….. 对不同分类的产品非常熟悉. 分析客户需求. 给了两周时间学习AWS和准备Presentation的内容.花时间好好看AWS资料，并且不建议缩短时间，让提前两天做好PPT发给HR. 例：”初创公司基于Lamp架构设计的方案，用户有10大痛点，如果迁移到AWS上该如何设计？“ 【Presentation时间是50分钟】 2. 基于你过往的工作当中你认为最好的架构，设计并讲解如何设计的资料亚马逊”AWS解决方案架构师”","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"解决方案","slug":"解决方案","permalink":"https://wiki.quartz.ren/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"02.解决方案","slug":"平台工具/云计算/02-解决方案","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/02-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}]},{"title":"阿里云-Serverless","date":"2024-02-03T14:55:57.000Z","path":"wk/平台工具/云计算/03.阿里云/001.Serverless/","text":"37df3367815823fa6a74ef48ceb506656481592d6be2999baead838b6c9d87386a3b8b78ae531c4f89e542b1e20e3bbf7eed79e75656e689a8c2ef57745a4f2a924d3b7f6951d9f4ae0b1356aa0e5ced92f40ead4ed258e3338ea1e646dfc8e1dd6b93ddfa675b503639cfbca4c0cb97a18b322f4cbb76b1118fc954f976725b56b94ef75683413d513b482c421ebab7982358b346c476156234a8c47b964b04a8c9f84266059dab1d3692177c4d35887f8a50f842d51bddad0febeebfa5d7bffb87fe81e2204ea90e33876210d72dc123d6151483fb163a41e1914deec545c3c1ae91b5e8ce5c61fe91d4b50c75614ed881790c508bbd12aae54fd6b88c1d9963f826208a152060691240d08ba42f24557a4016f462bc98bcfa058e5b692b70ee715627e30cb2642090919f8937d8b04c4e3d2a59745dc52372f650c8f0057a77caead768297055582c783813617494ad3a0fa6104fc0cd2348a4229031b36870d6a6f20479019b103874057d1a4c96c62d4c45ab2f0d9876089480950dc421c63fe98e7499960b7922cf58e0179727984195fa7a06d03bc65d1dd0db0f48336e42986643c37cac4810bdf53fe0ed60414e380fddd1d73a838157f189e6a2757949c520e48de0216be260883cb38fdfa4d96bf7428f18ee5692646eada0388b05b682197f573abfb2c34495e196efd4a3a6065114a6485b8658bc4e595acf34980947a79015fc737734490ba8c6771eb23117bdbf046ec853d9d424074d38083d1ee3ddada057d95bc4a8c6e227fec76c8282466f408ad3acfd26cd6e08befb9fadace98f1ea87b7233f4471c4c2bedfa2aaf3c481a096408429c0fbff02a7d8c13414d9644e3fe6b03f5a052e27a60a5258aff151cbe3325a34a5ecf0387fb967e35f15b17f6339f88459e25879d49776b2903c648e877d36c829e0a81703990bdfd44515ad005cab4fdd8b3ccf72bc1856079c44461211bfa0671a804271f90b7ad9b468b44b9202a643c9da05374c55bcda22f882cea6e42da33ac4911707206a2de6084d5b92b0209f7c0c620d70760b73254eb515c3ddbbb85cc40e55c3fd113932286a0cf2b58e310bb9a0a762ad3aaf1b3c3857835b892c7b65073f0cbab497ba20b2b79a3b3aa9bf2175dfa1632e64c9957793dfb0c4af488dbf3014313c412d7cf4cbb12310e1174cd6cc6cdcecb5efd15215d37354b1b81377788757e69659791e24f4229f19ee21184ee7a6bfe79a05cf5311fa27c80a0f4ee4152912449203d3c8fc354fea82e15c37880e8be0fce406e06228e420df2d33c7532fed480a70b0e9807575140125a431c97c3b20dbd425dd1bd6d7b0d0239c4a4e18f639b1ae099f0d57bc315fca7f46ad24df0ddefb5667853e2bd5c00d25bbb8e30b3cfed44b6ad099094aeb9736db57cb979e3dc27fa53c2516b370499d0ffea6a344e194c0ffec4d4e67dc8ba539cfee89601f810b79644110fef7dddb63971b29e12031646d4698d5d7ea7476f79d8229de386f3a342b9df0919e2a0f4e4691577915e52ecd7b1794752b641424778e371fdccaa9a7b517db1579e6458566ba0638be780202dedf49a6d74b21033b087123a2fec787e62dc0a2b3297d68f84837cf098b726ca5ceeeb30e27669a419386358fc3fdc1935b72fae5c547001125e4ec162d8dfaa31a8967d8f241ff5ad57454d3573e15e04c42cb1f4f2e6d4b7bce138ec8a39f99dc363e9c591904297dc502b9f0ee491b97de602324d9f4a4357a1e803ab2f313e94a716bc2f853bde5cbef3ae99587c3316a2844ccf806ce45c4ee6a341431e07c7d55cdf6e9ef0116e54a0f0e01f202bd695ca935504b3a87d654a64c9f0f27781831b1e3270cee03528423c4eb462a1d9ffd222a3a14a7f15e47b8e418854b1cd8e377c927fd7a28305a9eda37823da0242306afe911f8dd882d83098dc0b77855e22362a804f591930d14a58e2e2f7f239199145732cd6bb47e6f619aa13a00b98a8aef792b77cd22198ba39881ec1ced6fd0ebaf99c3e14b186e6d83f1cba401604a3d7f8b376371f9bcbd6ff0607a0685700b8d5a5ad4ca9076a32209a4e6fd5d4f1351cdb87d9a631644078f5ce62ac71e6c5c15b65b8fea421356c0bfca295d8a2b33e730856ccd76c1977d3e653c8a26024be312d9902fbfb272818575c0f3cc96f04c7ae2e6c8d52cc547f00a7e82904f839d129c9103b232a4562c6d5099089dd0ce2056540ead6a6e1a6de38436129f5af94dd936cf07cbd42b4b6f9055c5fe6fedd3e6fb06f537e27c987789d27661dda3ce318e6e4ab0162b958bbd2b30731c4b8b14bf7839db2a9d3383d1314d39f6526e008ac24688ad01412613d2fdcd75606f07d97d6bfa8126469db5e13d05045231ea89648d3a8ad8980ec091e09f29db7999ea618996d3e1093b75bd9186ea8613d067d7c38a8882a26ef280857009e769135eaed54d98358c5e1f15f72cdca44bb2aa51994596022e6e4eb49bc5dc1e7fec642ae88d8b0e5c95b75f2ac1eaafe3e7f267d434afbc93bef3c52b924508336858fc93edc5ffcee09d3cb7e2df5df0f0135f8502601e080b4b1a33fb8ae0333925e57fb6d493bb2cd04962aed2b25c90f03eae03ded46bccec80d90e1f6793b32207e749457455caa46fe92676aee04b8c15b864405b4860df52e0da058b315eed1018b68d7dd9aa0a9357591db434c5362ab3f864d2c8b5f02d52f16d8e5be9cf6f69fda621dc8ff7802b431af714e0319371a9a02175454ede3b140f881e6c324090e4b21cea917a195e6360323b950b8b614b2af89f36360a26c053a5f3ee56c8550f58abcee96d637fe956d0926813541d89cb37d405144b19795a53302200ccfbcef37996da29f039c79e87da3010ca2f60c5adc8c35f8188c27c1ca18a51d246212629c3829f61ab3bcabdb914a49dbf2e1645b7d549b5049f796aa9d384ab3e083ecbbe66dc836eddef927e5d07ded0b95a8640bb840d4e259fa53de57fd8418da8d375454b135a215e498159c6339f3a42bc5eca603480e1e9cf329f3cb71ae6318a9567c9b2b6011c4993197e1258f68e9c23758d6ffae436f11850d1a0db2fbeea3c2581bc6d4d524505bab4f61fe935e76a8d3a454764fb64141c02d19f5f3cc01d3adcd35ed85ea31ede2214c61f6f72da46b486f4037b899cd95f509d97ef382a3fecdf3031ff950bdc41c72f3528dfbcf629595077f088ad27459279e7fdd96ea6692d13d85375cbb25c7f7d725799707c080661ca542a2257792932825b699c914d713c1dedc1ce7d82a9025e5991d504b37917bb4c1eaaa10a1bdb787351e04ba22a9c8926f78071a58588a460224a2d17f8a886b60cba93ceaa0887d3fbc680ec67600b2956611069fc00b6f425e4104443438a17320c873be67ddf789b479aca8266c3ed7a09df85de664a77686edc92612dba7fa1f1bebf8109fc004cea67739a4764b46c945d9536e1eb11eb1ec1685e8f08efe7d329f29d9ff38c15ecf52add1b38c34fc9f6069c55bfb68e5e4ba436c86005e23ab082090237df2f1ee179b6c7b122908fb9e957dd3f48beba2f28e508209a20cb505b07c48242d241e8f0b61dc436fc51900e95dd97053fb4e8e70c380a52d7b8cfb32c68a27b0c4e2a83368cd807465f8cdf06148d12dba88bede878237a7ee88b53d2455434e56ca655b9b37f6d8aa2a401f7b36b0b41c0f81e525b837674d0fb580bfee52e54b30208c7177bf9c73e8d96056afdba97c6a354eaf784f2ff9a9795dfec2ff9a8686f6edd8fd6c27c05246012d02d6fa17f003bca76072217a42cc38d002f666ea8e49a509e9689735f30df47d4a22c88b19472f587312fdcd6d5272a8a7314d70dce188ab158be7d451d8c43a9b03e4729ccf1aac244d2e57ed878a315bff860f98979f1b3644a4458d48923023e24c4c29295d2ad7be3a5b96abd60472e355104f43757fc0e61823645408f0f42a0cbb2b9a21edd5a3cd38a0bf8842cadf8d0db7049610fe730874b0ee3b4e36b1d1fb33ee33d3589cf716b406d05f430fb6e6f6389917c68d5b6ccdea835b5226ba826c00d085767401be5ffb2d1002e6bcf8b73fe40784807dcfa16ab15c42554ca487090b8bfd19de746f6ec2dcaf005414c213e772c36319fd510fa56715c435292d76392b1d21ce3c9cb4c8647ac4b1dfcfc722722e93fee57cac2e6e4895df611def7e659dc8b1c78143d857f277d07df07bfe62e71a1d0791e9664dc1508eb81d4a22fc0ff11f4920301cca896bbc319e22d21907339e23aadfb572121bf35a5b273ef56ef1caa0e43ec5025cb892f4265f899d8743ed6fa485b7e769fb1c2b2a231d1ce2524612592068b662eac1768bb5062834f9c43b5de74655cdc607e09786c20e8f70235bde8a6d864dad70cbc4d7754a6b2d0af0c55b8e1ed4a9d7edf4d616b35267839371255073dd6d4d065ce2088203b10308ebbfdf898d86998f23da06047a6ab170e0d6a8bc08d899fab50ad8197477cfba2f0e6a968bad5a59e58ccc107b6ab25c1577932db7ff67e26bbdd77be3d543c3688b4951db9afc15d723e5291930c7a476ce568447d23ebdf9b42a987e38e8bc306a714d1d508e6fbce440cf1ea698ad40f33e5d37b83946c2b6100ed6bd9fcc32c4313817a116c4060081fbf767d7a6cad5e47e4f6818ac57e80eec340f2c97d3af2eb5e9a2ab701016c50d07d8f31c422a0aecf3c3f64406c76107b023fd6e16cc73dd1eed33049c010ce7a4e6835f9e623d16febce25dbe1443338eaee37af64e28bbe260ff218870a834d4f38dd69e5e62cef2c45c0dc0a3268800ab12231d2f84ef00d8ab0f6d94cdc8e4e6a38221003936a67a70c4f7d268568028ffdc17825432091f6b75f3a3c0543d932ec5d00277ac90e7b3d6cbdadd211ec3b6aaec48d815816cd1090cf5bd0eead29a7832b687202a16ccc6be84ad119f3d71285af89bc563ea835aca857052e73b5baf030751e5bfb4e85164814bbd0a2690d6ca702a3c25e9250a6dec01089e01fc4332224544e6eba75fb9afd853507a98553b3c3a7cd9b4021186b11b453d22d88615513468e0cf466477a41c34ebb102e91bd2deb193aaad9fbcd0c3fd06944f59eb20583fda5a1548716741e34f543f03844cf00b7cee45db2ca23179002c43f6124a358773afa2a3e96f1fc1df3b34f92848bc2d076009c62f9b88d368e12fc3da3b25800e0eff06f85f10095abe4b2017673e24a5beb28c7d210ba708ac735f 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"Serverless","slug":"Serverless","permalink":"https://wiki.quartz.ren/tags/Serverless/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"03.阿里云","slug":"平台工具/云计算/03-阿里云","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/03-%E9%98%BF%E9%87%8C%E4%BA%91/"}]},{"title":"001.机器识别基本概念.md","date":"2024-01-28T14:55:57.000Z","path":"wk/算法/003.图像识别/001.机器视觉基本概念/","text":"机器视觉（Computer Vision）是一门涉及计算机科学和人工智能的交叉学科，其目标是使计算机系统能够理解和解释视觉信息，模仿人类视觉系统的能力。以下是一些机器视觉的基本概念： 图像： 图像是由像素组成的二维矩阵，每个像素表示图像的一个小元素。机器视觉系统通常以图像作为输入。 图像处理： 图像处理涉及对图像进行预处理、增强和分析的一系列技术。常见的图像处理任务包括滤波、边缘检测、图像变换等。 特征提取： 特征是图像中具有信息量的部分，特征提取是从图像中选择和提取关键信息以用于进一步分析和识别的过程。常见的特征包括边缘、角点、颜色直方图等。 图像识别和分类： 图像识别是将图像分为不同的类别或标签的任务。图像分类是机器学习中的一个重要问题，涉及训练模型以自动识别图像中的对象或场景。 目标检测： 目标检测是在图像中定位并识别多个目标的任务。与图像分类不同，目标检测需要标示目标在图像中的位置。 图像分割： 图像分割是将图像划分为具有语义意义的区域的任务。目标是将图像中的每个像素分配到相应的类别。 三维重建： 三维重建是根据多个视角的二维图像推断出场景的三维结构。这在计算机视觉和计算机图形学中都是重要的问题。 深度学习： 深度学习是一种机器学习方法，通过使用深度神经网络来学习和表示复杂的图像特征。深度学习已经在图像识别、目标检测等任务中取得了显著的成功。 todo: 总结以前同事工作相关的概念. 总结之前的项目，变为自己的项目经历. 最新模型架构用到的一些知识点，补全. yolo等. 找鹏波聊一聊 图像相关的技术. 图像处理基本算法有哪些： 图像处理涉及多种基本算法，这些算法可以用于对图像进行预处理、增强、分析和处理。以下是一些常见的图像处理基本算法： 灰度化（Grayscale Conversion）： 将彩色图像转换为灰度图像，通常通过对RGB通道的加权平均来实现 直方图均衡化（Histogram Equalization）： 通过调整图像的灰度直方图，增强图像的对比度 滤波（Filtering）： 使用不同类型的滤波器进行图像平滑（低通滤波器）或边缘增强（高通滤波器） 去噪（Denoising）、边缘增强（Sharpening）、 模板匹配： Blob分析： 图像缩放（Image Resizing）： 图像旋转（Image Rotation）： 资料：图像处理算法：从基础到先进实践","tags":[{"name":"机器视觉","slug":"机器视觉","permalink":"https://wiki.quartz.ren/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"003.图像识别","slug":"算法/003-图像识别","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"}]},{"title":"2.yolov5详解","date":"2024-01-28T14:55:57.000Z","path":"wk/算法/003.图像识别/002.yolov5详解/","text":"包括模型训练、模型推理、等内容. 主要目的： 了解基于xxx 进行深度学习模型训练的系统支持，包括梯度下降xxx等等概念。 了解模型训练的流程，以及怎么训练出一个好模型。 模型训练数据收集和准备选择数据集：freiburg-groceries（计算机视觉领域的数据集，主要用于目标检测和图像分类任务）。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758import tensorflow as tffrom tensorflow.keras import layers, modelsfrom tensorflow.keras.preprocessing.image import ImageDataGeneratorfrom sklearn.model_selection import train_test_splitfrom sklearn.preprocessing import LabelBinarizerimport osimport numpy as npfrom PIL import Image# Define the path to your datasetdataset_path = &#x27;/kaggle/input/freiburg-groceries/images/OIL/&#x27;# Load and preprocess your datasetimage_paths = [os.path.join(dataset_path, filename) for filename in os.listdir(dataset_path)]images = []labels = []for image_path in image_paths: # Load and resize the image to a common size (e.g., 224x224) image = Image.open(image_path) image = image.resize((224, 224)) image = np.array(image) / 255.0 # Normalize pixel values to [0, 1] images.append(image) # Extract the class label from the image path (assuming the path structure) label = image_path.split(os.path.sep)[-2] # Assuming the label is the second-to-last directory labels.append(label)# Convert labels to one-hot encoded vectorslabel_binarizer = LabelBinarizer()labels = label_binarizer.fit_transform(labels)# Split the dataset into training and testing setsX_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)# Create a simple CNN modelmodel = models.Sequential([ layers.Conv2D(32, (3, 3), activation=&#x27;relu&#x27;, input_shape=(224, 224, 3)), layers.MaxPooling2D((2, 2)), layers.Conv2D(64, (3, 3), activation=&#x27;relu&#x27;), layers.MaxPooling2D((2, 2)), layers.Conv2D(64, (3, 3), activation=&#x27;relu&#x27;), layers.Flatten(), layers.Dense(64, activation=&#x27;relu&#x27;), layers.Dense(len(label_binarizer.classes_), activation=&#x27;softmax&#x27;) # Output layer with the number of classes])# Compile the modelmodel.compile(optimizer=&#x27;adam&#x27;, loss=&#x27;categorical_crossentropy&#x27;, metrics=[&#x27;accuracy&#x27;])# Train the modelmodel.fit(np.array(X_train), np.array(y_train), epochs=10, batch_size=32, validation_split=0.2)# Evaluate the model on the test datatest_loss, test_acc = model.evaluate(np.array(X_test), np.array(y_test))print(f&#x27;Test accuracy: &#123;test_acc&#125;&#x27;)","tags":[{"name":"机器视觉","slug":"机器视觉","permalink":"https://wiki.quartz.ren/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"003.图像识别","slug":"算法/003-图像识别","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"}]},{"title":"1.RCNN","date":"2024-01-28T14:55:57.000Z","path":"wk/算法/003.图像识别/目标检测/002.RCNN/","text":"定义RCNN是一种目标检测框架。首个将 CNN 引入目标检测领域的算法模型. 在特征提取阶段使用CNN（AlexNet）其它阶段使用的还是传统目标检测的方法. 背景最初的 R-CNN 在2013年提出，但速度较慢，因为它需要对每个提议框进行单独的卷积操作。 后续衍生出很多优化版本：Fast R-CNN（2015）、Faster R-CNN（2015）、Mask R-CNN（2017） 架构R-CNN目标检测主要分为四个大的阶段. 1. 产生候选区域 对于输入的图片，使用Selective Search方法（了解即可），选择出2000个候选区域（每个区域大小不一） 2. 特征提取 使用AlexNet对每一个候选区域提取特征，得到2000 * 4096维的特征向量 AlexNet是一个经典的深度卷积神经网络.在2012年的ImageNet 中获得了第一名。 AlexNet有11层：5个卷积层和3个全连接层，3个池化层. TODO：有助于对于滤波器的理解 12注1：在进行特征提取之前，需要先对上一步生成的候选区域进行调整，使其变为227*227，这是因为AlexNet输入是固定的，当然，其实卷积操作的输入可以不固定，全连接层的输入大小才是固定的，这也是后面几个模型会改进的。注2：调整的方法比较暴力，不管输入是多大的图片，直接缩放到227*227 3. 候选区域类别判断 将2000 * 4096维特征向量送入到21个（20个类别+1个背景）SVM分类器中，每一个SVM分类器包含4096个参数，所以可以看成两个矩阵相乘，即 ，这样就得到了每一个候选区域是某个类别的概率值。因为一张图片出现有上千个物品的可能性微乎其微，所以必定有大量的候选区域是重叠的，因此需要去除冗余的候选框。作者在此处使用非极大值抑制（NMS）方法来去除冗余候选框，对于每一个类别中IoU大于给定阈值的候选区域。这样就得到了每一个类别得分最高的一些候选区域。 4. 使用回归器对候选框位置调整 对于上一步经过NMS筛选后的候选区域，其精度必定不够，所以需要进行进一步的调整，因为该部分在Faster RCNN中也有用到，所以具体的细节放在后文 RCNN框架 总结在文章中，作者认为 R-CNN 较之前的算法，能够取得30%的改进是基于以下两点： 使用了CNN来提取候选区域的特征 使用迁移学习，因为目标检测领域的数据相比图像分类任务要少很多，所以使用在图像分类上训练好的模型，经过 fine-tune 可以很好的运用在目标检测上。 可以理解为：R-CNN是个实验品，首个引入 CNN进行目标检测的算法。 主要是因为 性能差，训练繁琐，效果一般. R-CNN的不足 速度慢，因为需要对selective search算法生成2K个候选区域分别提取特征，而又由于候选区域的重叠问题，所以这中间有着大量的重复计算（这也是后面的改进方向）。 训练步骤繁琐，需要先预训练CNN，然后微调CNN，再训练20个SVM，20个回归器，期间还要涉及用NMS去除候选冗余框,（光看着就让人头皮发麻） Fast R-CNNR-CNN的改进：在R-CNN和SPPNet的基础上进行改进 准确率提升：与R-CNN、SPPNet相比，有着更高的准确率 多阶段训练-&gt; 单阶段训练：通过使用多任务损失，将模型训练由多阶段转变为单阶段训练 一次性更新，无需分步：训练时可以一次更新网络的所有层，不再需要分步更新参数 不再需要硬盘来存储CNN提取的特征数据 流程主要分三步： 候选区域生成：使用 Selective Search 方法生成2K个图片候选区域 对整张图片进行特征提取得到相应的特征图（大的改进，参考了SPPNet）；并将上一步生成的候选区域映射到特征图中 使用ROI Pooling将所有的候选区域特征统一缩放到7 * 7大小；然后将这2K个特征向量展平。并连接到全连接层上，得到两个输出结果，一个是K+1类(类别数+背景类)的概率，还有一个是每个类的预测边框。 参考卷积神经网络经典回顾之AlexNet","tags":[{"name":"图像识别","slug":"图像识别","permalink":"https://wiki.quartz.ren/tags/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"003.图像识别","slug":"算法/003-图像识别","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"},{"name":"目标检测","slug":"算法/003-图像识别/目标检测","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"}]},{"title":"算法学习概述","date":"2024-01-27T14:55:57.000Z","path":"wk/算法/算法学习概述/","text":"本部分主要是机器学习领域的算法介绍以及实践总结。深层次的更偏向算法工程和实践吧，毕竟精力有限，没有过多的时间和基础在很多算法原理上。 其中包括以下几部分：传统机器学习算法、深度学习、图像识别、NLP、算法工程， 另外包括一些基础的算法. 本章结构1.机器学习机器学习相关概念、传统机器学习 2.深度学习深度学习算法，及常见的模型架构 3.图像识别深度学习专业领域：图像识别(CV)方向. 4.NLP深度学习专业领域：自然语言处理(NLP)方向. 5.大模型 6.算法工程包括 算法的 基础设施建设、工程优化、特征工程、以及实践总结. 其它内容工作方向数据分析师： 使用Python进行数据清洗、处理、分析和可视化. 机器学习工程师：使用Python和机器学习库如Scikit-Learn进行机器学习模型的开发和优化 深度学习工程师：使用Python和深度学习库如Tensorflow或PyTorch进行深度学习模型的开发和优化. AI工程师：结合机器学习和深度学习，开发复杂的人工智能系统. 数据科学家：结合Python、机器学习、深度学习，从大量数据中提取有价值的信息. 正在做 模型训练相关知识. 深度学习在异常检测场景的应用实践和评估. autoencoder 性能满足, 2.8s 处理2w请求. 但需要分析 它的应用场景，可以解决的问题 再试试lstm。 另外 总结下 这些问题场景 以及 可以选择的算法。 对一些核心概念的理解:梯度下降等. 总结目前实际业务中 用到的算法. 总结一些 探索 新内容的 方法论、思维. 在不同的环境中都可以应用新技术、新内容 解决问题。 学习路径机器学习 阶段一： Python基础 Python的基本语法Python面向对象 阶段二：数据处理与分析 使用NumPy进行数值计算使用Pandas进行数据处理和分析使用Matplotlib和Seaborn进行数据可视化 阶段三：机器学习基础 机器学习基本概念和算法:线性回归、逻辑回归、决策树、随机森林、SVM等.详见：机器学习基本概念和算法使用Scikit-Learn进行机器学习 阶段四：深度学习基础 神经网络和深度学习的基本概念使用Tensorflow或PyTorch进行深度学习 阶段五：人工智能项目实践进行实际的人工智能项目，如图像识别、语音识别、自然语言处理等(实战项目)TensorFlow识别MNIST 资料微软人工智能教育与学习共建社区 机器学习100天。https://github.com/Avik-Jain/","tags":[],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"}]},{"title":"1.微服务架构概述","date":"2024-01-27T14:55:57.000Z","path":"wk/平台工具/[1]架构设计/02.微服务架构/001.微服务架构发展_草稿/","text":"词条：可维护性、可扩展性、可重用性； 复杂性、耦合度；独立开发、部署和升级；灵活、可重用和可扩展、架构方法； 系统复杂度、系统性能、部署和运维、服务依赖、服务管理/治理、系统稳定性和可用性；专注于业务逻辑、底层的基础设施和资源管理 本文主要从三个方面(微服务架构发展史、系统架构设计原则、微服务架构相关技术)介绍微服务架构的相关概念和方法. 1.架构模式的发展历程 单体架构 分布式计算 SOA架构(面向服务)[20世纪90年代] 微服务架构时代 后微服务时代 1.1 单体架构整个应用程序作为一个单元进行开发、部署和运行的架构模式。 主要特点是：一体化、技术单一、紧耦合、部署简单。优点是：开发简单、测试相对容易；缺点：扩展困难、维护复杂、技术升级困难、容错性低。单体架构适用于规模较小、业务逻辑相对简单的应用，当业务发展到一定的规模后，需要向更灵活的架构演进。软件设计经常使用经典的3层模型，即表现层、业务逻辑层和数据访问层。 1.2 分布式计算发展背景： 计算能力的需求增长：网络产生的数据量的增加、 互联网技术的发展：通过互联网，可以将计算任务分配给世界各地的计算机进行处理，从而充分利用了全球范围内的计算资源。这种“蚂蚁搬山”的方式将具有很强的数据处理能力。 现在，分布式计算已经被用于各种领域，如科学研究、数据分析、云计算等。基于云计算的分布式计算、基于大数据的分布式计算。 1.3 SOA架构相比单体架构，更灵活的架构模式是什么样的呢? 面向服务的架构:SOA架构 SOA的架构出现， 提出一种 面向服务的架构模式，将应用程序的不同功能单元独立成服务。 服务之间通过网络通信。SOA的主要目的 是提高 软件系统的灵活性、 可复用性和扩展性。 以更好的应对业务的变化和发展。 强调 服务的组合和重用，而不是紧密耦合的 大型单体应用。主要目标是实现跨平台的、可重用的服务，以支持复杂的企业级应用 SOA粗暴理解：把系统按照实际业务，拆分成刚刚好大小的、合适的、独立部署的模块，每个模块之间相互独立。 而SOAP、REST、RPC就是为了实践这种设计模式而设计的数据通讯方式，其中SOAP通俗理解就是服务间通过http+xml的形式完成数据交换，REST就是http+json的形式，RPC是基于socket的形式。CXF框架就是典型的SOAP. 1.3.1 发展背景(20世纪90年代)源于企业对于提高软件系统灵活性、可扩展性和可维护性的需求。随着企业业务的快速发展和市场竞争的加剧，企业对于软件系统的要求也越来越高。传统的单体架构由于其紧密耦合、低可重用性和低可扩展性等问题，已经无法满足企业的需求。企业需要一种更加灵活、可重用和可扩展的架构方法，以支持其业务的快速变化和技术的不断更新。 SOA提供了一种新的设计和实现大型企业系统的方法。通过将应用划分为松耦合的服务，每个服务执行特定的业务功能，SOA架构使得系统更加灵活、易于扩展和维护。 使得企业可以更加快速地响应市场变化和业务需求，提高了企业的竞争力和市场地位。 1.3.2 特点相较于单体架构：更加灵活、可重用和可扩展的架构方法松耦合的服务系统更加灵活、易于扩展和维护自治性：服务可以独立开发、测试、部署和管理 1.3.3 不足SOA架构的实现和管理复杂度也相对较高 系统复杂度较高：涉及多个服务之间的协作和通信(开发、测试和维护的成本相对较高、增加出错的几率) 性能问题： 服务之间的通信的网络延迟和性能损失 安全性难以保障：需要对数据传输进行加密和安全控制，以保障系统的安全性 部署和运维难度大：涉及多个服务的部署和管理，增加了系统的复杂性和运维成本 服务之间的依赖性：服务之间的依赖关系可能比较复杂，一个服务出现问题或升级，可能会影响其他与之相关的服务。因此，需要仔细设计和管理服务之间的依赖关系，以确保系统的稳定性和可用性。 12345678910111213141516当然服务拆分之后也存在一些问题：性能：服务拆分粒度：管理、开发成本：系统复杂度增加：随着互联网技术也业务的发展， 更细粒度的拆分需求、技术选项的灵活性、敏捷开发和部署、更好的扩展性需求、以及云原生（微服务架构更适合云原生的部署方式，能够更好的利用云的弹性和资源管理能力）、故障隔离性。的需求， 衍生出微服务架构的概念。哪里这里微服务架构的核心是什么呢？？服务的拆分、。。 大拆小。 每个组件模块 可独立的单体应用。 1.4 微服务架构微服务架构是SOA的进一步发展，它推崇将应用拆分成更细粒度的服务。并使用轻量级机制进行通信。开发人员可以更加专注于业务逻辑的实现，同时提高了系统的可扩展性和可维护性。 1.4.1 与SOA架构区别服务粒度、部署方式、通信协议、数据管理(数据库等)、治理和开发和部署方式等方面存在一些差异。 目标：SOA的主要目标是实现跨平台的、可重用的服务，以支持复杂的企业级应用。微服务架构的主要目标是实现灵活、可扩展的系统，通过快速响应业务需求来支持业务创新。 总的来说，SOA架构和微服务架构在规模、粒度、数据管理、部署和扩展、耦合度、技术栈以及通信方式等方面存在明显的区别。这些区别使得它们适用于不同的场景和需求。在选择使用哪种架构时，需要根据具体的业务需求和技术环境进行综合考虑。 微服务架构是SOA的进一步发展，它推崇将应用拆分成更细粒度的服务。并使用轻量级机制进行通信。 具体的区别在于几个方面: 规模和粒度、数据管理、部署和扩展、耦合度、技术栈。 ①规模和粒度方面(微服务的粒度更细，每个服务专注于一个明确定义的功能)，具体的拆分粒度需要结合实际业务场景。 ②数据管理方面：SOA通常使用中心化的数据存储和管理，多个服务可能会共享相同的数据源，而微服务中每个服务通常有自己的数据存储，与其他服务隔离，每个服务负责自己的数据管理。(这一段也有不足的地方：比如 数据在多个系统的共享使用， 需要通过服务，本来可以直接通过存储层获取的。更好的解决办法是，把数据层也作为服务，在微服务中共享和管理，提高共享能力，比如mt的cel)。 ③部署和扩展性方面：微服务架构允许每个微服务独立部署和扩展，可以更灵活地处理负载和维护。而SOA因为粒度的原因可能不是很灵活，小的改动可能影响的范围更大。④耦合度方面，SOA中服务之间的耦合度较高，因为它们可能共享数据模型和接口定义。⑤通信方式：SOA通常使用各种协议进行通信，如SOAP、REST等，微服务使用轻量级的协议，如HTTP/REST或gRPC等。 微服务的目的主要是实现灵活、可扩展的系统，通过快速响应业务需求来支持业务创新。 1.5 后微服务时代在微服务架构成熟之后，业界开始探索更加灵活的架构风格，如无服务器架构。进一步简化了应用程序的开发和部署过程，使得开发人员可以更加专注于业务逻辑的实现，而无需关心底层的基础设施和资源管理。 2. 系统架构设计原则系统架构设计原则？ 我认为最核心的 三个原则：合适、简单、演化 这是架构设计的核心原则思想。 另外的不同的架构模式 也有一些其它的基本原则 包括 高可用、可扩展、可维护性、松耦合、性能优化、安全性、一致性。 微服务架构、分布式系统架构设计、云原生应用开发。 以前作为新手 很多时候会听到你这不行 3. 微服务架构相关技术3.1 服务拆分与设计3.2 服务注册与发现3.3 服务通信3.4 服务稳定性3.5 容器化技术3.6 服务网格3.7 CI/CD(持续集成)4. 微服务架构详细介绍 对微服务架构的理解：微服务架构的目的是 使得开发人员专注业务逻辑实现，无需关系底层的基础设施和资源管理。 需要实现这一目标，要从以下几个方面展开： 理解微服务架构的原理、熟悉微服务架构的内容(有哪些组成)、怎么做，怎么实现、最新的技术方案 4.1 微服务架构原理架构原理是 微服务架构的指导思想，目标是使得开发人员能够更加专注于业务功能的实现，而无需过多关注底层的技术细节和复杂性。那从以下几个方面体现： 服务拆分：将一个大型的单体应用程序拆分成多个小型的服务。每个服务都是一个独立的、可独立部署和扩展的单元，具有明确的业务边界。这种拆分有助于减少系统的复杂性，提高系统的可维护性和可扩展性。 独立部署：每个微服务都可以独立地进行开发、测试和部署。快速迭代和交付新功能 去中心化：微服务架构强调服务的去中心化，即每个服务都是自治的，不依赖于中心化的管理或协调。系统更加灵活和可扩展。 无状态，方便运维。 轻量级通信：微服务之间通过轻量级的通信机制进行交互，如HTTP/REST、gRPC等。这种通信机制使得服务之间的通信更加简单、高效和可靠。 服务自治：服务的注册、发现、负载均衡、容错处理等。这使得服务能够自我管理和自我恢复，提高了系统的稳定性和可用性。 技术异构性：微服务架构允许使用不同的技术栈和编程语言来开发不同的微服务。 高度可伸缩性：微服务架构可以根据需求对每个微服务进行独立的扩展。这允许系统根据业务压力和性能需求进行动态伸缩，以满足不断变化的业务需求。 4.2 微服务架构组成服务治理服务通信服务注册与发现独立部署与扩展服务拆分容器与弹性 4.3 下一代微服务架构(ServiceMesh)服务通信：Service Mesh(服务网格) 。 以轻量级的网络代理的方式与应用程序部署在一起，用于保证服务与服务之间调用的可靠性，这与传统的微服务脚骨有着本质的区别。 这么做的原因主要有： 跨语言服务调用的需要 云原生应用服务治理的需要 4.3.1 什么是Service Mesh一种新型的用于处理服务与服务之间通信的技术， 尤其适用于以云原生应用形式部署的服务。可以说Service Mesh是微服务架构中的一个重要组成部分 Service Mesh是一个专用的基础设施层，用于处理微服务之间的通信。它通过在微服务之间插入一个轻量级的网络代理来提供诸如服务发现、负载均衡、故障恢复、安全性等功能。Service Mesh的主要目标是将这些通信相关的复杂性从应用程序代码中抽象出来，让开发人员可以更加专注于业务功能的实现。 Service Mesh之前：微服务之间的通信和管理主要依赖于一些传统的解决方案和工具。 通过直接的网络调用（如HTTP、RESTful API、gRPC等）实现的。每个微服务都需要处理与其他服务的通信细节，包括服务发现、负载均衡、故障恢复、安全性等。这导致微服务代码中包含了大量的网络通信逻辑，使得代码变得复杂且难以维护。（抽离出基础组件呢?） 为了解决这些问题，一些工具和框架被开发出来：服务注册与发现工具（如Eureka、Consul、ZooKeeper等）用于管理微服务实例的网络地址，并提供服务发现的功能。负载均衡器（如Nginx、HAProxy等）用于将客户端的请求分发到合适的服务实例上。此外，还有一些API网关（如Spring Cloud Gateway、Zuul等）用于处理跨服务的请求路由、安全认证、限流等。 然而：这些工具和框架仍然需要开发人员手动配置和管理，而且它们通常是与微服务代码紧密耦合的。这意味着每当微服务发生变化时，开发人员都需要相应地更新这些配置和管理逻辑。这增加了维护的复杂性，并降低了系统的可靠性和灵活性。 Service Mesh的出现解决了这些问题。它通过在微服务之间插入一个轻量级的网络代理来提供通信和管理功能。这些网络代理形成了一个独立的网络层，负责处理微服务之间的通信细节，如服务发现、负载均衡、故障恢复、安全性等。由于这些通信相关的逻辑被抽象出来，微服务代码可以更加专注于业务功能的实现。同时，Service Mesh提供了对微服务通信的可见性和控制，帮助开发人员更好地理解和管理微服务之间的交互。 因此，可以说Service Mesh是对传统微服务通信和管理方案的改进和扩展。它通过引入一个独立的网络层来简化微服务之间的通信，并提供更加灵活、可靠和安全的通信功能。 4.3.2 ServiceMesh的实现原理 SideCar Control Plane 第一代Service Mesh的代表 Linkerd 基于Twiitter的Fingle， 使用Scala编写，被誉为业界第一个Service Mesh项目，在长期的实际生产环境中获得验证，但由于很多功能被后续框架所取代，发展优先。 Envoy底层基于C++， 性能上优于使用Scala的Linkerd， 它在性能和资源消耗上表现得非常出色，被istio收编之后，专注于数据平面。 这2个开源实现都是以Sidecar为核心， 绝大部分关注点都是如何做好Proxy，并完成一些通用控制面的功能。 但是当你在容器中大量部署Sidecar以后， 如何管理和控制这些Sidecar本身就是一个不小的挑战。 第二代Service Mesh主要改进集中在更强大的控制面功能， 典型代表有Istio和Conduit Service Mesh的出现是由微服务架构推动的，随着服务的拆分， 服务治理面临巨大的挑战。 4.3.3 Service Mesh缺点 增加系统复杂性：在微服务架构中引入了一个额外的层，会增加系统的整体复杂性。开发人员需要了解并管理这个额外的层，这可能需要额外的培训和知识。 额外的资源开销：每个微服务实例都需要一个Sidecar代理，这可能会增加硬件和软件资源的开销。这些额外的资源需求可能会增加部署和运营成本。 运维复杂性：Service Mesh的引入可能会增加运维的复杂性。例如，需要管理和监控Sidecar代理的健康状态，以及确保它们与微服务实例之间的正确配置和交互。 版本管理和升级：由于Service Mesh是一个独立的组件，因此它有自己的版本和升级周期。这可能会与微服务的版本和升级周期产生冲突，需要额外的协调和规划。 安全问题：尽管Service Mesh提供了更高的安全性，但它也可能引入新的安全风险。例如，Sidecar代理可能成为攻击者的目标，因为它们负责处理微服务之间的通信。 调试和故障排查：由于Service Mesh将通信逻辑从应用程序代码中抽象出来，这可能会使调试和故障排查变得更加困难。开发人员可能需要查看多个组件的日志和状态，以确定问题的根本原因。 学习和掌握曲线：对于许多开发人员和运维团队来说，学习和掌握Service Mesh可能需要一些时间。这可能会影响项目的进度和效率。 12345问题与缺陷Service-mesh有一定的价值， 但引入Service-mesh同时也会面临一些挑战，表现在以下两个方面1. 一次调用多了进程间两跳通信（或流量劫持）， 势必对性能有较大影响，目前看吞吐量降低30%左右2. 流程复杂度增加，需要更全面的稳定性建设，同时维护成本也会增加 4.3.4 ServiceMesh落地方案和效果 mt的落地方案和效果 bz的落地方案和效果 4.4 架构模式中重要组成组件化分层通信机制服务治理可扩展性安全性监控和日志记录 4.5 微服务的拆分原则单一职责、服务自治、服务可复用、服务粒度(照业务功能划分)、服务高内聚、低耦合原则、易于测试、服务可扩展原则。","tags":[{"name":"架构设计","slug":"架构设计","permalink":"https://wiki.quartz.ren/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"SOA","slug":"SOA","permalink":"https://wiki.quartz.ren/tags/SOA/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[1]架构设计","slug":"平台工具/1-架构设计","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"02.微服务架构","slug":"平台工具/1-架构设计/02-微服务架构","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"}]},{"title":"1.云原生技术-经验","date":"2024-01-27T14:55:57.000Z","path":"wk/平台工具/云计算/04.基础技术/001.云原生技术/","text":" 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"},{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"解决方案","slug":"解决方案","permalink":"https://wiki.quartz.ren/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"04.基础技术","slug":"平台工具/云计算/04-基础技术","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/04-%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/"}]},{"title":"2.元原生技术介绍","date":"2024-01-27T14:55:57.000Z","path":"wk/平台工具/云计算/04.基础技术/002.云原生相关技术介绍/","text":"云原生是一种软件开发和部署的方法论，旨在更好地利用云计算环境的弹性、可扩展性和容错性。云原生技术包括一系列工具、框架和最佳实践，用于构建和管理在云环境中运行的应用。以下是一些常见的云原生技术： 容器化技术：Docker： 提供了轻量级、可移植的容器化解决方案，使应用程序及其依赖项能够在不同环境中一致运行。Kubernetes： 开源的容器编排和管理平台，用于自动化应用程序的部署、扩展和操作。Kubernetes 提供了弹性、自愈和自动化的特性。 微服务架构：服务拆分： 将应用程序拆分成小型、独立的服务，每个服务专注于一个具体的业务功能。服务通信： 使用轻量级通信协议（如REST或gRPC）实现服务之间的通信。服务发现和注册： 使用服务注册中心（例如Consul、Etcd）进行服务发现和注册。 持续集成和持续交付（CI/CD）：Jenkins、GitLab CI、CircleCI等： 提供持续集成和持续交付的工具，支持自动化构建、测试和部署。ArgoCD： 用于管理和自动化 Kubernetes 中应用程序的持续交付。 自动化运维：Infrastructure as Code（IaC）： 使用工具如Terraform、Ansible等来描述和管理基础设施，实现可重复性和自动化。自动化监控和日志： 使用工具如Prometheus、Grafana、ELK Stack等来监控应用程序性能和收集日志。 服务网格：Istio、Linkerd等： 提供了在微服务架构中管理服务间通信、负载均衡、故障注入、安全性等方面的功能。 云原生数据库：CockroachDB、TiDB： 支持水平扩展的分布式数据库系统，适用于云原生应用的数据库需求。Amazon DynamoDB、Google Cloud Firestore： 托管的 NoSQL 数据库服务，适用于云环境。Serverless 计算： AWS Lambda、Azure Functions、Google Cloud Functions： 无服务器计算平台，允许开发人员在云中运行代码而无需关心基础设施。 云原生安全：微服务安全： 采用零信任模型、身份验证和授权来保护微服务间的通信。容器安全： 使用容器安全工具和最佳实践，确保容器环境的安全性。 混合云和多云管理：KubeVirt、Anthos： 允许将传统虚拟机工作负载集成到 Kubernetes 集群中，实现混合云环境。管理工具如Rancher、Red Hat Advanced Cluster Management等： 用于在多云环境中管理和监控 Kubernetes 集群。这些技术共同构成了云原生生态系统，支持开发人员构建、部署和管理在云环境中运行的应用程序。","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"04.基础技术","slug":"平台工具/云计算/04-基础技术","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/04-%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/"}]},{"title":"3.IAAS","date":"2024-01-27T14:55:57.000Z","path":"wk/平台工具/云计算/04.基础技术/003.IAAS/","text":"职位描述1、负责IaaS相关云服务核心研发、方案设计工作；2、结合业界先进技术，对IAAS现有产品进行改进优化，保障稳定性和用户体验；3、参与专项技术调研，新技术引入等前瞻项目。职位要求1、2年以上云计算领域研发经验，深入了解IaaS服务相关技术原理；2、熟悉IaaS架构，包括OpenStack、CloudStack、AWS、Azure等云计算架构设计；3、扎实的计算机基础知识，掌握常见的数据结构和算法，编码功底强；4、熟练掌握至少一种编程语言，例如Golang, Python, Java等；5、熟悉Linux下，网络、存储，多进程和多线程编程。具备以下条件之一者优先：1、熟悉OpenStack, KVM, 有虚拟化相关开发经验；2、有大规模云计算平台或分布式系统开发经验。 3.良好的Java基础，熟悉JVM原理，熟悉java主流框架，如：Spring boot，Spring Cloud，Spring MVC，mybatis等；4.熟悉常见的数据结构，熟悉常用的设计模式，熟悉常见的通讯协议；5.掌握多线程及高性能的设计与编码及性能调优；有高并发应用开发经验优先；6.熟悉分布式系统的设计和应用，熟悉分布式、缓存、消息等机制；能对分布式常用技术进行合理应用，解决问题；7.对微服务架构相关知识有充分了解；拥有大型互联网分布式系统架构设计经验，对高并发高可用、以及分布式事务具备实际项目经验；8.具备线上系统运维能力，熟悉linux系统 ，熟悉云服务产品，具备独立的问题解决能力；9.具有良好的沟通，团队协作、计划和创新的能力；10.有过云原生开发经验，对Docker，Kubernetes熟悉者优先；","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"04.基础技术","slug":"平台工具/云计算/04-基础技术","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/04-%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/"}]},{"title":"4.弹性计算","date":"2024-01-27T14:55:57.000Z","path":"wk/平台工具/云计算/04.基础技术/004.弹性计算/","text":"","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"04.基础技术","slug":"平台工具/云计算/04-基础技术","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/04-%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/"}]},{"title":"1.政务云","date":"2024-01-27T14:55:57.000Z","path":"wk/平台工具/云计算/政务云/001.政务云介绍/","text":"什么是政务云标准定义：云技术在政府行业的应用。 定义：是指运用云计算技术，统筹使用政府已有的机房、计算、存储、网络、安全等资源，为政府部门提供基础设施、支撑软件、应用系统等综合服务的平台。 政务云： 政务云是一种云计算服务，专门为政府机构和公共部门提供的云服务。政务云通常具有高度安全性和合规性，以满足政府数据处理的特殊需求。政务云可以提供各种基础设施即服务（IaaS）、平台即服务（PaaS）和软件即服务（SaaS）等服务，以支持政府的信息化建设和数字化转型。 信息化建设、转型目的：提高效率、优化决策制定、提升服务质量、加强安全和合规性、促进创新和科技发展、节约资源. 12345政务云可以降低政府信息化成本、提高政府工作效率、促进各部门间的信息共享和业务协同等方面的优势，是政府信息化发展的重要方向之一。政务云可以通过云服务平台的方式提供各种服务，如政务信息资源共享交换平台、电子政务服务平台、公共服务平台等。政务云的应用范围很广，可以涉及到政府办公、公共安全、城市管理、环境保护等各个领域。优势：严格的数据保密、高可用性、高容错性；具有天然防ARP攻击和MAC欺骗，快照备份，数据永久不丢失等特点；资源利用率高；可靠性、易用性、安全性、灵活性、成本控制； 政务云怎么建设以下是政务云建设的一般步骤： 需求分析： 明确政府机构的业务需求、数据规模、安全性要求等。有助于确定政务云的规模和功能。 基础设施规划：根据需求分析的结果，进行政务云基础设施的规划。这包括数据中心建设、服务器、存储设备、网络设备等硬件基础设施的选型和布局。 云平台选择：选择合适的云计算平台，可以是公有云、私有云，或混合云。政务云通常需要考虑数据隐私、安全性和合规性等因素，因此在选择云平台时需要仔细评估其安全性和服务能力。 网络建设： 建设稳定、高速的网络是政务云的关键。确保政务云与各级政府机构、企事业单位的网络连接畅通，提供可靠的服务。 数据安全： 由于政务涉及敏感数据，数据安全是政务云建设的重中之重。采用加密技术、访问控制、身份认证等手段，确保数据在存储和传输过程中的安全性。 服务管理：设计和实施政务云服务的管理体系，包括资源分配、性能监控、故障处理、用户权限管理等。政务云需要提供灵活的服务管理功能，以满足不同部门的需求。 培训和支持： 提供相关人员的培训，使其能够熟练使用政务云服务。同时建立支持和维护机制，确保政务云系统能够稳定运行，并及时响应和解决问题。 合规性和审计：确保政务云建设符合相关法规和合规标准。建立审计机制，对政务云的运行进行定期审查，以确保其合法性和安全性。 迁移和整合：如果政府机构已有一定的信息系统，需要考虑如何将现有系统迁移到政务云上，并确保与政务云平台的整合。 监测和优化：建设完成后，需要进行监测和性能优化，以确保政务云系统的稳定性和效率。 政务云怎么维护、使用、评估政务云的维护、使用和评估是一个持续的过程，需要结合具体的业务需求和技术发展不断进行优化和改进。以下是关于政务云维护、使用和评估的一些建议： 维护：监控和管理： 建立监控系统，对政务云的硬件、网络和服务进行实时监测。及时发现并解决潜在问题，确保政务云的稳定运行。 安全管理： 定期进行安全审查和漏洞扫描，确保政务云系统的安全性。更新安全策略、加密措施，并持续加强用户身份验证和访问控制。 备份和恢复： 定期进行数据备份，并测试数据恢复的可行性。确保在数据丢失或系统故障时能够迅速进行恢复。 性能优化： 定期进行性能评估，优化政务云的资源分配和服务性能。确保政务云能够满足日益增长的需求。 升级和更新： 定期检查并升级政务云平台的软硬件组件，以应对新的技术挑战和提升系统性能。 使用：培训和支持： 提供政务云服务的培训，使使用人员熟悉系统的功能和操作方式。建立及时的技术支持渠道，解答用户的问题和解决技术难题。 合理使用资源： 确保政务云资源的合理分配和使用，避免资源浪费。对于多部门共享的云资源，实施合理的资源隔离和分配机制。 用户权限管理： 建立严格的用户权限管理体系，确保用户只能访问他们需要的信息和服务，降低数据泄露和滥用的风险。 数据治理： 实施有效的数据管理策略，包括数据分类、保密级别划分等。确保政务云上的数据符合相关法规和政策。 灵活扩展： 采用可扩展的架构，以便政务云能够根据需求进行灵活的扩展和缩减。 评估：服务水平协议（SLA）： 定期评估政务云服务提供商是否遵守服务水平协议，以确保政务云提供商履行合同中的承诺。 业务成效评估： 评估政务云对业务效率和服务质量的影响。收集用户反馈，了解系统的优点和改进的空间。 成本效益评估： 定期评估政务云的成本效益。比较使用云服务与传统部署方式的成本，确保政务云的投资带来了实际的经济效益。 合规性和安全评估： 定期进行合规性和安全性评估，确保政务云满足法规和政策要求，并保障系统的安全性。 技术趋势分析： 持续关注新的技术趋势和发展，评估是否有新的技术可以带来更好的性能、安全性和效率。 政务云的维护、使用和评估需要与相关利益相关者密切合作，包括政府机构、IT专业人员、云服务提供商等，以确保政务云系统始终能够适应不断变化的需求和技术环境。 网络规划怎么做，有什么经验？ 网络规划是一项综合性的工作，涉及到网络拓扑、设备选择、带宽规划、安全性、扩展性等多个方面。以下是进行网络规划时需要考虑的一些建议： 需求分析： 确定网络规划的目标和需求。了解组织的业务需求、用户数量、数据流量等信息，以便确定网络设计的基础。 网络拓扑设计： 设计网络拓扑结构，包括局域网（LAN）、广域网（WAN）、子网划分等。选择合适的拓扑结构，考虑组织的业务特点和未来的扩展需求。 设备选择： 根据网络规模和需求选择合适的网络设备，包括交换机、路由器、防火墙等。考虑设备的性能、可靠性、安全性等因素。 IP地址规划： 进行IP地址规划，确保每个设备在网络中都有唯一的标识。考虑IP地址的分配方式、子网划分等因素，以支持未来的扩展。 带宽规划： 根据业务需求和数据流量预测进行带宽规划。确保网络中的带宽能够满足各个业务部门的需求，避免瓶颈出现。 安全性考虑： 强调网络安全性。考虑使用防火墙、入侵检测系统（IDS）、虚拟专用网络（VPN）等技术来保护网络的安全性。进行访问控制和身份验证的规划。 无线网络规划： 如果需要无线网络，进行无线网络规划。确定无线接入点的位置、信道规划、安全性设置等。 网络管理和监控： 设计网络管理和监控系统，确保能够及时发现和解决网络故障。使用网络管理工具和监控系统进行性能监测。 扩展性考虑： 考虑未来的业务扩展，确保网络设计具有良好的扩展性。选择支持易于扩展的设备和技术。 备份和灾难恢复： 设计网络的备份和灾难恢复策略。确保关键数据和系统能够在发生故障或灾难时迅速恢复。 合规性： 确保网络规划符合法规和行业标准，特别是涉及敏感信息的行业，如金融、医疗等。 培训和文档： 对网络管理员和用户提供培训，编写网络文档，确保相关人员了解网络结构和操作方法。 网络规划是一个动态的过程，需要不断调整和优化以适应业务的发展和新的技术趋势。与业务部门、IT团队、安全团队等的紧密协作是成功网络规划的关键。","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"政务云","slug":"平台工具/云计算/政务云","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/%E6%94%BF%E5%8A%A1%E4%BA%91/"}]},{"title":"2.云容灾备份","date":"2024-01-27T14:55:57.000Z","path":"wk/平台工具/云计算/政务云/002.云容灾备份/","text":"云容灾备份云容灾备份是指将企业的关键业务数据和系统镜像备份到云端，以确保在发生灾难性事件时能够快速、可靠地恢复业务。以下是与云容灾备份相关的一些关键技术： 云备份服务： 云服务提供商通常提供专门的云备份服务，允许企业将数据和系统备份到云端。这些服务通常提供自动化的备份计划、增量备份、快速恢复等功能。 数据复制与同步： 利用云中的数据复制和同步技术，可以实现实时或定期将本地数据同步到云端。这有助于保持云中的备份数据与本地数据的一致性。 虚拟机备份： 对虚拟机进行备份是云容灾备份的重要组成部分。云服务商提供的虚拟机备份服务可以将整个虚拟机的状态、配置和数据备份到云端，以便在需要时进行快速恢复。 快照技术： 云服务商通常提供快照技术，可以在瞬间捕获存储卷的状态。这使得在需要时可以快速还原到先前的状态，提供了有效的容灾备份方案。 异地多活： 在多个地理位置部署业务节点，实现异地多活，确保即使在一个地区发生灾难时，其他地区的节点仍能够继续提供服务。 自动化备份策略： 制定自动化的备份策略，包括定期的全量备份和增量备份。自动备份可以减少人为错误，并确保备份过程的规律性。 容灾演练： 定期进行容灾演练，验证备份数据的可用性和恢复过程的有效性。演练有助于发现潜在问题，并提高应对灾难的能力。 安全性与合规性： 在备份和恢复过程中要确保数据的安全性和合规性，采用加密技术、身份验证机制等手段，保护备份数据不被非法访问。 监控与报警： 设置监控和报警系统，实时监测备份状态和存储容量，及时发现潜在问题并采取措施。 云存储服务： 选择可靠的云存储服务作为备份的存储介质，确保数据的可靠性和持久性。 云容灾备份是企业信息化建设中重要的一环，通过使用云服务，企业可以更加灵活、高效地实现业务的容灾和恢复。 容灾演练、 机房演练、异地多活、set化。","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"政务云","slug":"平台工具/云计算/政务云","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/%E6%94%BF%E5%8A%A1%E4%BA%91/"}]},{"title":"5.阿里云_腾讯云","date":"2024-01-27T14:55:57.000Z","path":"wk/平台工具/云计算/政务云/005.阿里云_腾讯云/","text":"产品、技术、架构.","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"政务云","slug":"平台工具/云计算/政务云","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/%E6%94%BF%E5%8A%A1%E4%BA%91/"}]},{"title":"4.公有云_企业私有云","date":"2024-01-27T14:55:57.000Z","path":"wk/平台工具/云计算/政务云/004.公有云_企业私有云/","text":"各种业务场景和模型，深入理解业务需求。 对业务上云方案有较丰富的经验.","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"政务云","slug":"平台工具/云计算/政务云","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/%E6%94%BF%E5%8A%A1%E4%BA%91/"}]},{"title":"10.总结","date":"2024-01-27T14:55:57.000Z","path":"wk/平台工具/云计算/政务云/010.总结/","text":"","tags":[{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"政务云","slug":"平台工具/云计算/政务云","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/%E6%94%BF%E5%8A%A1%E4%BA%91/"}]},{"title":"1.wiki中使用数学公式","date":"2024-01-27T14:55:57.000Z","path":"wk/平台工具/工作相关/WikiMe/001.wiki中使用公式/","text":"参考：https://myblackboxrecorder.com/use-math-in-hexo/ 1. 安装MathJax卸载自带的hexo-math以避免冲突 123npm uninstall hexo-math --savenpm install hexo-renderer-mathjax --save 2. 更新MathJax的CDN链接暂时不更新也可以. 打开/node_modules/hexo-renderer-mathjax/mathjax.html， 修改为： 1&lt;script src=&quot;//cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;&lt;/script&gt; 3. 更换默认渲染引擎Hexo默认的渲染引擎hexo-renderer-marked对MathJax的支持很不好，我们修改为kramed引擎 12npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --sav 4. 更改转义规则编辑：/node_modules/kramed/lib/rules/inline.js 12#escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()#$+\\-.!_&gt;])/,#em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 修改为： 12escape: /^\\\\([`*\\[\\]()# +\\-.!_&gt;])/,em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 5. 验证两种书写方式, 一种居中，一种在靠左边. 123&#123;% raw%&#125; \\[ (f \\ast g)(t) = \\int_&#123;-\\infty&#125;^&#123;\\infty&#125; f(\\tau) \\cdot g(t - \\tau) \\, d\\tau \\] &#123;% endraw %&#125;$ (f \\ast g)(t) = \\int_&#123;-\\infty&#125;^&#123;\\infty&#125; f(\\tau) \\cdot g(t - \\tau) \\, d\\tau $ \\[ (f \\ast g)(t) = \\int_{-\\infty}^{\\infty} f(\\tau) \\cdot g(t - \\tau) \\, d\\tau \\] $ (f \\ast g)(t) = \\int_{-\\infty}^{\\infty} f(\\tau) \\cdot g(t - \\tau) \\, d\\tau $ 6. 公式写法 LaTeX写法","tags":[{"name":"Wiki","slug":"Wiki","permalink":"https://wiki.quartz.ren/tags/Wiki/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"工作相关","slug":"平台工具/工作相关","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/"},{"name":"WikiMe","slug":"平台工具/工作相关/WikiMe","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/WikiMe/"}]},{"title":"1.Yolo","date":"2024-01-27T14:55:57.000Z","path":"wk/算法/003.图像识别/目标检测/003.Yolo/","text":"定义YOLO是一种目标检测模型。(you only look once)只需要浏览一次就可以识别出图中的物体的类别和位置 目标检测：计算机视觉中比较简单的一个任务；用来在一张图篇中找到某些特定的物体。 识别物体的种类、标出物体的位置. 背景因为只需要看一次，YOLO被称为Region-free方法，相比于Region-based方法，YOLO不需要提前找到可能存在目标的Region。 典型的Region-base方法的流程是： 12先通过计算机图形学（或者深度学习）的方法，对图片进行分析，找出若干个可能存在物体的区域。将这些区域裁剪下来，放入一个图片分类器中，由分类器分类。 也被称为单阶段（1-stage）模型 和 两阶段（2-stage）模型. 发展历史YOLO之前的世界: R-CNN什么的. 最初的CNN：通过滑动窗口方式识别一个个物体。( 太慢了，步长越小，处理越慢，浪费时间 ) R-CNN：用滑窗法可能最后得到了几十万个窗口，如果提前扫描一下图片，得到2000个左右的Region，大大节省了时间.管这个叫做Region Proposal，并且提出了一个叫做Selective Search的算法。 但是R-CNN被YOLO打脸了，YOLO说，我更快。 YOLOv1（2016年5月）：第一个YOLO版本、提出一种端到端的目标检测方法、将图像划分为网格、每个网格负责预测多个边界框和对应的类别。「YOLOv1相对较简单，但在实时性能上表现出色」 YOLOv2 / YOLO9000（2016年12月）：改进，使用Anchor Boxes来优化边界框的预测、使用Darknet-19网络结构、YOLO9000扩展了模型的类别，使其能够检测超过9000个类别。 YOLOv3（2018年4月）：重要版本，引入了关键的改进（使用多尺度检测、使用更深的Darknet-53网络结构、使用多层级特征融合）。准确性和速度之间取得了更好的平衡。 YOLOv4（2020年4月）：CSPDarknet53网络结构、YOLOv3的PPM（Path Aggregation Network）、SAM（Spatial Attention Module）。「在目标检测任务中取得了更好的性能」 YOLOv5（2020年6月）：采用轻量级网络结构、新的训练策略「可以在更快的速度下实现高精度目标检测」 特点单次前向传递： YOLO采用单一的神经网络模型，通过一次前向传递即可同时预测图像中所有目标的边界框和类别。 网格划分：将图像划分成网格，并在每个网格上进行目标检测。每个网格负责预测包含在该网格中的目标。 边界框预测： 在每个网格中，通过卷积层预测多个边界框的坐标信息（边界框的左上角和右下角坐标）。 优缺点：优势在于其速度和简洁性；相对于一些两阶段的目标检测算法，可能在检测小目标和处理密集场景时表现稍逊。 目的目标是实现高效而准确的目标检测，尤其在实时应用中取得了显著的成果。 模型架构YOLOv1由Joseph Redmon等人在2016年提出的目标检测算法。 （1）背景 在YOLOv1提出之前，目标检测的实现方法往往较为复杂，需要通过分类的方法来重写回归分支，以实现检测，并且需要复杂的后处理来得到最终的检测结果。这导致检测过程耗时长且复杂。 为了改进这一问题，Joseph Redmon等人提出了YOLOv1，将目标检测任务定义为单个回归问题，直接从输入图像上得到目标的位置和类别，大大简化了检测过程。 此外，Joseph Redmon等人还将YOLOv1设计为一个端到端的算法，使得整个检测过程更加高效和简洁。这种新的目标检测算法在提出后受到了广泛的关注和应用，为计算机视觉领域的发展做出了重要贡献。 Joseph Redmon因提出YOLO系列算法而被称为“YOLO之父”。 不过，由于后期美国军方曾将YOLO智能识别技术用于军事武器开发，Joseph Redmon不希望自己的成果被用在军事上，因此他后来停止了计算机视觉方面的研究和工作。尽管如此，他之前提出的YOLO系列算法仍然在计算机视觉领域发挥着重要作用。 1Joseph Redmon提出YOLOv1时的身份背景，他当时是在华盛顿大学读博士，并在Ali Farhadi教授的指导下进行研究. 因此，他是在学术环境中，具体来说是在华盛顿大学的研究团队中，提出并发表了YOLOv1算法。 （2）模型架构(论文思想) 见论文精读. 算法流程 网络结构 预训练分类网络 训练检测网络 损失函数（L2 Loss） （3）YOLOv1的缺陷 资料论文精读：《You Only Look Once: Unified, Real-Time Object Detection》","tags":[{"name":"图像识别","slug":"图像识别","permalink":"https://wiki.quartz.ren/tags/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"},{"name":"目标检测","slug":"目标检测","permalink":"https://wiki.quartz.ren/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"},{"name":"Yolo","slug":"Yolo","permalink":"https://wiki.quartz.ren/tags/Yolo/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"003.图像识别","slug":"算法/003-图像识别","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"},{"name":"目标检测","slug":"算法/003-图像识别/目标检测","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"}]},{"title":"4.yolo项目总结","date":"2024-01-27T14:55:57.000Z","path":"wk/算法/003.图像识别/目标检测/004.yolo项目总结/","text":"","tags":[{"name":"CV","slug":"CV","permalink":"https://wiki.quartz.ren/tags/CV/"},{"name":"yolo","slug":"yolo","permalink":"https://wiki.quartz.ren/tags/yolo/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"003.图像识别","slug":"算法/003-图像识别","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"},{"name":"目标检测","slug":"算法/003-图像识别/目标检测","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"}]},{"title":"1.关于人事","date":"2024-01-27T14:55:57.000Z","path":"wk/项目管理/[3]生活学习/向上/001.关于人事/","text":"6529a249a0af82b27e00ec9fb492a165dc86b14d54edd9d758a7fdff7b46d0705ceb1eadaffb0725deccbbc1cc2ae1ef9bb5c2098b1e3504295962b02e9f0de8318f1fcbc33f4ee828c1b40ca3db3bbafead1d2fcbdcc19d744f95e9d41e1122b0d2003978dbe85da6b814d5847dd0e523a21803d60c49fd73ad9cea1afd2747b64e9104178b827e964bb347b2cd478fa3040a14b774beec9640bf447bf915ac43621031e76b55c4c8814bf78d5c5b3a2e60fe55106a5af745574ce94474404b682e1b3f4996fff6a3614dbfa3abd3bdee79fa66df37fa52efb1eba8c6ea24ec24cee3458e69e5a285405bc7dd6a6b5864a49db3618808e186fbffd43f0fc41b80c3284645449403b9c3b5ec455edecc92ed1fc759b23bd496c525de5e11b888f10f04d01a3d60540d7ff908f3aa823e17305ea44df0f0d6acf57a89d4e1938ca7236f04fe2434cc250d6906333f0ab2daa21472a7c2818e7f4088de499244660400a668dcf60202958187a9cde81a17cc01827ee7673f3d06b8bee4bbd36d2f021c3ac7205533f057c63787acc62cef74c636c8074435241a06c86e5fc0ac39488e4df0a456bc54ac04ddc34946771f8ad37eddcf8771ebb67985e7395b8c9fd6e276f365080b70e893462b7592ad0ebb8a118e9789ed671aa53f8d2955a42af468d89ede1b3b39f3c8ff5112bf559232e896acf3901f825c8a562217afcdf91a89a8f064627e0d3349e577f1774b8ca3a78df86f6044f00ba9ae8bc517285d137e9b7a0714c5664399994eb1b1bd50f053b8f4fc737a31c2e2037487cf1cc531f92a10982acce4679de356f61b3708882b4d002e2e719ba7cf0f017e54a36f1f2d23b2e950a95b10b950d69a8fd9392db778dd25d75bb9242f19d02575308297b049b28cb09ee71cfdc0db21dda46ca676b66d8955f1a6029093a6c5a1c3f68144a2e942390803e306dc19e5027becd014eb7eacea6d7fbea56902cfbd2d11 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"},{"name":"向上","slug":"向上","permalink":"https://wiki.quartz.ren/tags/%E5%90%91%E4%B8%8A/"},{"name":"关于人事","slug":"关于人事","permalink":"https://wiki.quartz.ren/tags/%E5%85%B3%E4%BA%8E%E4%BA%BA%E4%BA%8B/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"向上","slug":"项目管理/3-生活学习/向上","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%E5%90%91%E4%B8%8A/"}]},{"title":"1.CNN","date":"2024-01-27T14:55:57.000Z","path":"wk/算法/002.深度学习/001.常见算法/001.CNN/","text":"概念介绍卷积卷积一种数学运算，是一种积分变换的数学方法；在两个函数之间产生第三个函数的运算. 定义和公式（1）定义设:f(t),g(t)是R1上的两个可积函数，作积分：$ \\int_{-\\infty}^{\\infty} f(\\tau) \\cdot g(t - \\tau) \\, d\\tau $ 随着t的不同取值，这个积分就定义了一个新函数，称为函数 f 与 g 的卷积，记为: ℎ(t) = (f * g) (t) （2）卷积的公式如下： a. 连续形式(连续时间卷积)： 给定两个函数 f(t) 和 g(t)，它们的卷积 ℎ(t) 定义为：​ $ (f \\ast g)(t) = \\int_{-\\infty}^{\\infty} f(\\tau) \\cdot g(t - \\tau) \\, d\\tau $ 这里的积分表示对变量 $ \\tau $ 的积分。 b. 离线形式(离散时间卷积)：对于离散时间的情况，给定两个序列 f[n] 和 g[n]，它们的卷积 (f∗g)[n] 定义为： $ (f \\ast g)[n] = \\sum_{k=-\\infty}^{\\infty} f[k] \\cdot g[n - k] $ 这里的求和表示对变量 k 的求和。 1234解释：对函数 f ， g的卷积 (f∗g)(n) 的卷积 解释：先对g函数进行翻转，相当于在数轴上把g函数从右边褶到左边去，也就是卷积的“卷”的由来。然后再把g函数平移到n，在这个位置对两个函数的对应点相乘，然后相加，这个过程是卷积的“积”的过程。 以上是教科书上 对于卷积数学运算(一种积分变换) 给出的定义. 那究竟为什么这么设计，这么计算，背后的意义是什么？如果一个公式给不出结合实际的直观的通俗的解释，就觉得少了点什么. 意义以上 从计算的方式上对公式进行了解释，从数学上讲无可挑剔，但进一步追问，为什么要先翻转再平移，这么设计有何用意？ 所以有2个需要解释的问题： 卷积这个名词是怎么解释？“卷”是什么意思？“积”又是什么意思？ 卷积背后的意义是什么，该如何解释？ 所谓两个函数的卷积，本质上就是先将一个函数翻转，然后进行滑动叠加。 卷积的“卷”，指的的函数的翻转，从 g(t) 变成 g(-t) 的这个过程. 卷积的“积”，指的是积分/加权求和. 在连续情况下，叠加指的是对两个函数的乘积求积分，在离散情况下就是加权求和，为简单起见就统一称为叠加。整体看来是这么个过程： 翻转——&gt;滑动——&gt;叠加——&gt;滑动——&gt;叠加——&gt;滑动——&gt;叠加…..多次滑动得到的一系列叠加值，构成了卷积函数。 12345卷积公式表示f和g在一个变量上加权平均，其中g经过翻转和平移后与f相乘，并在整个定义域上积分；在这个积分过程中， g(t-T)表示的是 g在t时刻的局部模式，而f(T)表示f在t时刻的局部贡献。本质意义：提供一种有效的方法 来描述和处理 2个函数（序列、信号）之间的交互效应。卷积的定义和性质，使得它成为一种强大的工具，有助于理解和处理 具有复杂相互作用的系统；卷积的局部感知和权重共享的特性，使得它能够输入信号的局部模式。 举例例1：信号分析 输入信号是 f(t) ，是随时间变化的。 系统响应函数是 g(t) 《比如：随时间指数下降的》。 例2：两个函数的卷积 $ f(t) = e^{-t} $g(t)=u(t) 其中，u(t) 是单位阶跃函数，表示在 t=0 处跃升为1。 123456789101112131415161718192021222324252627282930313233343536373839404142import numpy as npimport matplotlib.pyplot as plt# 定义函数def f(t): return np.exp(-t)def g(t): return np.piecewise(t, [t &lt; 0, t &gt;= 0], [0, 1])# 连续时间范围t = np.linspace(-1, 5, 1000)# 计算函数值ft = f(t)gt = g(t)# 计算卷积结果convolution_result = np.convolve(ft, gt, mode=&#x27;full&#x27;) * (t[1] - t[0]) # 使用 np.convolve 计算卷积# 绘图plt.figure(figsize=(10, 6))plt.subplot(3, 1, 1)plt.plot(t, ft, label=&#x27;$f(t) = e^&#123;-t&#125;$&#x27;)plt.title(&#x27;Function $f(t)$&#x27;)plt.legend()plt.subplot(3, 1, 2)plt.plot(t, gt, label=&#x27;$g(t) = u(t)$&#x27;)plt.title(&#x27;Function $g(t)$ (Unit Step)&#x27;)plt.legend()# 仅绘制有效范围内的卷积结果plt.subplot(3, 1, 3)plt.plot(t, convolution_result[:len(t)], label=&#x27;$f * g$&#x27;)plt.title(&#x27;Convolution Result: $(f * g)(t) = 1 - e^&#123;-t&#125;$&#x27;)plt.legend()plt.tight_layout()plt.show() 图像处理在图像处理中，卷积是一种常用的操作，用于处理图像的特征提取、滤波和边缘检测等任务. 理解图像处理中的卷积可以通过以下几个关键点： 局部特征提取、滤波操作、权重共享、下采样、卷积神经网络（CNN） 图像一般可以表示为矩阵形式。对图像的处理函数（如平滑，或者边缘提取），也可以用一个g矩阵来表示。 我们在处理平面空间的问题，已经是二维函数了 给定图像 I 和卷积核 K，卷积操作的结果图像 I_{\\text{conv}} 的每个像素可以通过以下公式计算： $I_{\\text{conv}}(x, y) = \\sum_{i=0}^{h-1} \\sum_{j=0}^{w-1} I(x - i, y - j) \\cdot K(i, j)$ 其中： $ I_{\\text{conv}}(x, y) $ 是卷积操作后得到的图像的像素值. I(x - i, y - j) 是原始图像的像素值，i 和 j 是卷积核的坐标. K(i,j) 是卷积核的权重. 123这个公式表示，在卷积操作中，卷积核在图像上滑动，每个位置都与图像的局部区域进行加权相乘并求和，得到卷积后的像素值。卷积核的选择和权重决定了卷积操作的具体效果，例如边缘检测、模糊等。需要注意的是，这是一个简化的二维卷积公式。在实际应用中，可能还涉及到通道（颜色通道）的处理，以及不同类型的卷积操作（如反卷积、分离卷积等）。 CNN一种包含卷积操作的 深度神经网络(或者说是一类深度学习神经网络). 专门用于处理和分析具有网格状结构的数据，CNN的设计灵感来自于生物学中对动物视觉系统的理解，通过卷积层和池化层等结构实现对图像特征的提取。 定义和由来CNN的发展历程是深度学习研究的一个关键里程碑. （1）对于CNN的定义： 一种包含卷积操作的 深度神经网络(或者说是一类深度学习神经网络). 因此有几个特点：卷积操作、深度神经网络、 另外，CNN的主要特点包括： 卷积层、池化层、权重共享、多层网络结构、适用于图像处理任务. 核心思想： 通过使用卷积层（Convolutional Layer）和池化层（Pooling Layer）对输入数据进行局部感知和共享权重，从而实现对图像等结构化数据的特征提取和高效处理。 CNN通常包含多个卷积层、池化层和全连接层。 （2）由来Yann LeCun等人于1998年提出的卷积神经网络结构，用于手写数字的识别。卷积层的出现在LeNet-5模型，用于手写数字识别。LeNet-5是一个经典的卷积神经网络.包括 卷积层、池化层和全连接层。 其中卷积层和池化层的引入使其在处理图像数据上具有优势。 深度学习的复兴： 2012年AlexNet的成功标志着深度学习的复兴。随后，研究者们陆续提出了一系列基于CNN的模型，包括VGG、GoogLeNet、ResNet等，这些模型在图像分类、目标检测、语义分割等领域取得了显著的成果。 卷积层（Convolutional Layer）卷积层是CNN的核心组件，通过卷积操作从输入数据中提取局部特征。卷积操作使用卷积核（filter）在输入数据上滑动，计算局部区域的加权和。 池化层（Pooling Layer）池化层用于减小特征图的空间尺寸，降低计算复杂度，并增强模型对平移和旋转的不变性。常见的池化操作包括最大池化和平均池化。 （1）最大池化对于每个池化窗口（通常是2x2或3x3的小区域）中的值，选择其中的最大值作为池化后的值。这个过程可以通过以下公式表示： $ \\text{Max Pooling}(x, i, j) = \\max_{p,q} x_{(i \\times \\text{stride} + p),(j \\times \\text{stride} + q)} $ （2）平均池化对于每个池化窗口中的值，计算其平均值作为池化后的值。 $ \\text{Average Pooling}(x, i, j) = \\frac{1}{\\text{pool_size}} \\sum_{p,q} x_{(i \\times \\text{stride} + p),(j \\times \\text{stride} + q)} $ 激活函数（Activation Function）在卷积层之后，通常会应用激活函数，如ReLU（Rectified Linear Unit），用于引入非线性特性，增强模型的表达能力。 全连接层（Fully Connected Layer）通常会有全连接层用于将高级特征映射到输出类别。在图像分类任务中，全连接层用于输出各个类别的概率分布 除了映射作用，还可以通过全连接引入非线性映射，增加模型的表达能力，使其能够适应更复杂的数据分布。 LeNet-5一种经典的 CNN架构模型，是CNN的重要里程碑。 （1）三层卷积出于对任务的需求、计算资源的考虑。（通过增加卷积层数，模型可以学习更多复杂的特征，但也会增加计算负担。） （2）激活函数每一层都使用了 Sigmoid 激活函数。这是在网络设计初期常用的一种激活函数。 引入非线性性，允许网络学习更复杂的特征；捕捉输入数据的复杂关系。 在当时的研究时期，Sigmoid 激活函数是常用的选择，但在后来的深度学习研究中，ReLU（Rectified Linear Unit）等激活函数逐渐成为更为流行的选择，因为它们在训练中具有更好的性能。 图形处理核心概念上文介绍了CNN(卷积神经网络相关概念和实现)。那CNN实质是一种图像处理算法。 不管是CNN还是其他算法，在图像处理中，都涉及到一些核心概念和操作，如：局部特征提取、滤波操作、权重共享、下采样 下面具体介绍下这些概念。 局部特征提取：从原始数据中提取有意义、具有代表性的信息的过程。比如卷积操作，从原始图像中提取为特征图(卷积的结果)。卷积操作常用于提取图像中的局部特征，例如边缘、纹理等。 滤波操作：通过卷积运算在信号或图像上应用滤波器的过程。滤波的目的是通过去除或增强信号中的特定频率成分，达到平滑、降噪、边缘检测等目的。因此，滤波操作通常涉及卷积操作，可以看作卷积的一种应用。 区别：滤波操作和特征提取在某种程度上有交叉，但它们的重点和目的略有不同。 可以理解为：滤波操作指 123滤波操作目的主要用于对信号或图像进行平滑、降噪、锐化等处理。特征提取目的主要从原始数据中提取具有代表性和有用信息的特征，以便更好地表示数据的本质。滤波操作有时也能起到特征提取的作用，但它们的设计和目标通常更倾向于信号处理的需求。相反，特征提取更注重从数据中提炼有意义的信息，使得后续的任务（如分类、检测）能够更好地利用这些信息。 todo: 滤波操作、卷积操作、特征提取 三者概念的关系和区别. 滤波操作就是卷积操作，通过卷积实现 图像的平滑、降噪、锐化等处理 卷积操作还可以用于特征提取 滤波和特征提取是相关但不完全相同的概念。（相关在于都是通过卷积操作实现、都应用于信号或图像处理、都是属于对数据的局部感知） 只是目的不同： 滤波的目标通常是改变输入数据的频谱特性，实现平滑、去噪等效果；而特征提取的目标是从输入数据中提取有用的信息，例如图像中的纹理、形状等。 其他相关概念：填充、步长、通道数 （1）填充（ Padding ）指在输入数据的边缘添加一定数量的像素，使得输出数据的尺寸能够与输入数据相匹配。也就是在矩阵的边界上填充一些值，以增加矩阵的大小，通常用 0 或者复制边界像素来进行填充。（2）步长（Stride）是指卷积核在每一次卷积操作中滑动的距离。步长的大小可以影响输出数据的大小，也可以影响特征提取能力和计算复杂度。当步长增大时，输出数据的尺寸会减小，特征提取能力会变弱，但计算速度会加快。（3）通道数（Channel）也称为深度或特征图数量，是指卷积神经网络中每一层输出的特征图数量。通道数的大小直接影响了卷积神经网络的特征提取能力和计算复杂度。通过增加通道数，可以增强卷积神经网络的特征提取能力，但也会增加计算复杂度。 多通道卷积. 总结 学习的过程：系统架构，涉及的概念，每个概念的目的、关系。 这是一个学习的过程. 其中相关概念的目的，可以通过追溯历史、重要里程碑去发现. 还可以通过一些工具辅助加深理解，比如python实现具体的计算逻辑，展示具体的数学计算图形. 资料：如何通俗易懂地解释卷积卷积神经网络经典回顾之LeNet-5","tags":[{"name":"深度学习","slug":"深度学习","permalink":"https://wiki.quartz.ren/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"CNN","slug":"CNN","permalink":"https://wiki.quartz.ren/tags/CNN/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"002.深度学习","slug":"算法/002-深度学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/002-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"001.常见算法","slug":"算法/002-深度学习/001-常见算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/002-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/001-%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/"}]},{"title":"2.Transformer","date":"2024-01-27T14:55:57.000Z","path":"wk/算法/002.深度学习/001.常见算法/002.Transformer/","text":"0. 概览作为当下最先进的深度学习架构之一，Transformer 被广泛应用于自然语言处理领域。它不单替代了以前流行的循环神经网络(recurrent neural network，RNN)和长短期记忆(long short-term memory，LSTM)网络，并且以它为基础衍生出了诸如 BERT、 GPT-3、T5 等知名架构。 本文主要深入总结Transformer的实现细节及工作原理，具体内容包括： Transformer 简介 理解编码器 理解解码器 整合编码器和解码器 训练Transformer 1. Transformer 简介1.1 Transformer背景RNN和LSTM已经广泛应用于时序任务，比如文本预测、机器翻译、文章生成等。然而，它们面临的一大问题就是如何记录长期依赖。&nbsp;&nbsp;&nbsp;tips.常见的时序任务：时间序列预测、机器翻译、语音识别、音乐/文本生成、视频分析与处理等等 123451.RNN具有记忆能力，能够通过循环连接在时间步上传递信息，捕捉到先前时间步的信息。可以处理不同长度的输入序列。但是存在梯度消失和梯度爆炸问题、长期依赖性建模困难(由于梯度消失的问题，RNN难以有效地捕捉到长期依赖关系，即较早时间步的信息在后续时间步的影响衰减过快。) 2.LSTM具有长期依赖性，通过门控机制（遗忘门、输入门、输出门）有效地解决了梯度消失和长期依赖性的问题，能够更好地捕捉长期序列依赖关系。但其计算复杂度高、参数调整难度高(需要对其门控机制的参数进行精细调整,以获得最佳的性能) 为了解决这个问题，一个名为 Transformer 的新架构应运而生。从那以后，Transformer被应用到多个自然语言处理方向，到目前为止还未有新的架构能够将其替代。可以说，它的出现是自然语言处理领域的突破，并为新的革命性架构(BERT、GPT-3、T5 等)打下了理论基础。 1.2 Transformer定义Transformer是一种用于自然语言处理(NLP)和其他序列到序列任务(sequence-to-sequence)的深度学习模型架构。&nbsp;&nbsp;&nbsp;tips.能够将一个输入序列(比如一段文本)转换为另一个输出序列，例如翻译后的文本、生成的新文本等。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NLP中很多问题都可以被抽象为序列到序列的学习问题，比如机器翻译，文本摘要生成，问答系统。Transformer 完全依赖于注意力机制，并摒弃了循环。它使用的是一种特殊的注意力机制，称为自注意力(self-attention)Transformer 是如何工作的呢？我们通过一个文本翻译实例来了解。Transformer 由 编码器和解码器两部分组成。 首先向编码器输入一句话(原句)，让其学习这句话 的特征 再将特征作为输入传输给解码器。 最后，此特征会通过解码器生成输出句(目标句)。 这个方法看起来简单，但是如何实现的呢？编码器和解码器是如何 将英文(原句)转换为法文(目标句)的呢？内部又是怎样工作的呢?下面按照数据处理的顺序，依次介绍下 编码器和解码器的细节。 1.3 Transformer应用场景 自然语言处理(NLP) 机器翻译：最初Transformer就是应用于机器翻译任务. 文本生成：例如生成文章、对话等。 语言建模：预测下一个单词或字符 计算机视觉(CV) 图像分类：利用Transformer强大的特征提取能力对图像进行分类 目标检测：可作为目标检测模型的骨干网络。 语义分割：例如Pyramid Vision Transformer(PVT)被用于处理高分辨率图像的语义分割任务 语音识别与合成：结合声学模型和语言模型，实现高质量的语音识别和语音合成。 2. 编码器Transformer 中的编码器不止一个，而是由一组 N 个编码器串联而成。一个编码器 的输出作为下一个编码器的输入。&nbsp;&nbsp;&nbsp;需要注意的是，在 Transformer 原论文“Attention Is All You Need”中，作者使用 了 N = 6，也就是说，一共有 6 个编码器叠加在一起。 先来看看编码器的内部结构: 每一个编码器的构造都是相同的，并且包含两个部分：多头注意力层、前馈网络层。这两部分是如何工作的呢？ 我们先看看什么是自注意力机制。 2.1 自注意力机制1. 背景引入看一个例子：A dog ate the food because it was hungry(一只狗吃了食物，因为它很饿)。 例句中的代词 it(它) 可以指代 dog(狗)或者 food(食物)。 我们自然而然地认为 it 指代的是 dog，而不是 food。但计算机改如何决定呢(指代消解)？这时，自注意力机制有助于解决这个问题。 2. 自注意力机制了解模型首先计算 单词A 的特征值，其次计算 dog的特征值，以此类推。 当计算每个词的特征值时，模型都需要 遍历每个词与句子中其他词的关系。模型可以通过词与词之间的关系来更好地理解当 前词的意思。 比如，当计算 it 的特征值时，模型会将 it 与句子中的其他词一一关联，以便更好 地理解它的意思。 it 的特征值由它本身与句子中其他词的关系计算所得。通过关系，模型可以明确知道原句中 it 所指代的是 dog 而不是 food，这是因为 it 与 dog 的 关系更紧密，关系连线相较于其他词也更粗。 初步了解了什么是自注意力机制之后，我么具体看是怎么实现的 3. 实现原理这个关系是怎么实现的呢？？ 简单起见，假设输入句(原句)为 I am good(我很好)。 首先，我们将每 个词转化为其对应的词嵌入向量。（需要注意的是，嵌入只是词的特征向量，这个特征 向量也是需要通过训练获得的。） 这样原句( I am good )就可以用一个矩阵 X(输入矩阵或嵌入矩阵)来表示.(矩阵结构是什么样子呢?)矩阵 X 的维度为[句子的长度×词嵌入向量维度] (重点)通过矩阵 X，我们再创建三个新的矩阵：查询(query)矩阵 Q、键(key) 矩阵 K，以及值(value)矩阵 V。 (why 三个矩阵， 作用是？) 这三个矩阵在自注意力机制中的存在是为了实现不同的功能和计算步骤，从而使得模型能够有效地学习输入序列中不同位置之间的关系和依赖。 查询矩阵（Query Matrix）：通过输入序列的线性变换得到的矩阵。用来计算注意力权重。每个查询向量对应于输入序列中的一个位置或单词，通过与键矩阵进行点积运算来计算与所有位置或单词之间的关联度（注意力分数）。 键矩阵（Key Matrix）：键矩阵也是通过输入序列的线性变换得到的矩阵，用来计算注意力权重。每个键向量同样对应于输入序列中的一个位置或单词，通过与查询矩阵进行点积运算来计算注意力分数。 值矩阵（Value Matrix）：值矩阵同样是通过输入序列的线性变换得到的矩阵，包含了每个位置或单词的信息。值矩阵的每一行对应于输入序列中的一个位置或单词，注意力机制将根据查询和键的相似度来加权平均值矩阵的行，以生成自注意力输出。 总结就是：自注意力机制通过查询矩阵和键矩阵之间的点积来计算每对位置或单词之间的相似度，然后通过 softmax 函数将这些相似度转换为注意力权重。这些注意力权重用来加权值矩阵的行，生成最终的自注意力输出，这样可以同时考虑输入序列中不同位置或单词之间的依赖关系，从而实现更有效的特征提取和建模。 4. 理解自注意力机制4.1 第一步:计算查询矩阵 $Q$ 与键矩阵 $K^T$ 的点积 自注意力机制首先要计算查询矩阵 $Q$ 与键矩阵 $K^T$ 的点积，但为何需要计算查询矩阵与键矩阵的点积呢? $Q \\cdot K^T$ 到底是什么意思?下面，我们将通过细看$Q \\cdot K^T$ 的结果来理解以上问题。 通过计 算两个向量的点积可以知道它们之间的相似度。 $Q \\cdot K^T$ 矩阵的第一行 表示原句子 第一个单词….因此，通过计算查询向量( $q_1$ )和键向量( $k_1$ 、 $k_2$ 、 $k_3$ )的点积，可以了解单词 I 与句子中的所有单词的相似度。 我们了解到，I 这个词与自己的关系比与 am 和 good 这两个词的关系更紧密，因为点积值$q_1 \\cdot k_1$ 大于$q_1 \\cdot k_2$ 和$q_1 \\cdot k_3$。 4.2 第二步:将$Q \\cdot K^T$ 矩阵除以键向量维度的平方根目的主要是获得稳定的梯度. 4.3 第三步:使用 softmax 函数对其进行归一化处理目前所得的相似度分数尚未被归一化，应用 softmax 函数将使数值分布在 0 到 1 的范围内，且每一 行的所有数之和等于 1。为什么要归一化呢？？ 将得到的最终矩阵称为分数矩阵。通过这些分数，我们可以了解句子中的每 个词与所有词的相关程度。 $\\text{Attention}(Q, K) = \\text{softmax} \\left( \\frac{Q \\cdot K^T}{\\sqrt{d_k}} \\right) =$ X = \\begin{bmatrix} 0.90 0.07 0.03 \\\\ \\text{emb}(\\text{am}) \\\\ \\text{emb}(\\text{good}) \\end{bmatrix}4.4 第四步:通过将分数矩阵与值矩阵$V$相乘，计算出注意力矩阵$Z$至此，我们计算了查询矩阵与键矩阵的点积，得到了分数，然后用 softmax 函数将分数归一化。自注意力机制的最后一步是计算注意力矩阵$Z$。 注意力矩阵包含句子中每个单词的注意力值。它可以通过将分数矩阵 $\\text{softmax} \\left( \\frac{Q \\cdot K^T}{\\sqrt{d_k}} \\right) $ 乘以值矩阵$V$得出 5. 计算流程图 2.2 多头注意力层顾名思义，多头注意力是指我们可以使用多个注意力头，而不是只用一个。 2.3 通过位置编码来学习位置2.4 前馈网络层2.5 叠加和归一组件3. 解码器3.1 带掩码的多头注意力层3.2 多头注意力层","tags":[{"name":"深度学习","slug":"深度学习","permalink":"https://wiki.quartz.ren/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"Transformer","slug":"Transformer","permalink":"https://wiki.quartz.ren/tags/Transformer/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"002.深度学习","slug":"算法/002-深度学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/002-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"001.常见算法","slug":"算法/002-深度学习/001-常见算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/002-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/001-%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/"}]},{"title":"3.xgboost","date":"2024-01-27T14:55:57.000Z","path":"wk/算法/002.深度学习/001.常见算法/003.xgboost/","text":"123456789101112131415161718192021222324252627&lt;dependency&gt; &lt;groupId&gt;ml.dmlc&lt;/groupId&gt; &lt;artifactId&gt;xgboost4j_2.12&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;com.typesafe.akka&lt;/groupId&gt; &lt;artifactId&gt;akka-actor_2.11&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;artifactId&gt;scala-library&lt;/artifactId&gt; &lt;groupId&gt;org.scala-lang&lt;/groupId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;artifactId&gt;scala-compiler&lt;/artifactId&gt; &lt;groupId&gt;org.scala-lang&lt;/groupId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;artifactId&gt;asm&lt;/artifactId&gt; &lt;groupId&gt;org.ow2.asm&lt;/groupId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;artifactId&gt;objenesis&lt;/artifactId&gt; &lt;groupId&gt;org.objenesis&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; 12345678910111213141516171819202122232425262728private Booster model = null;// loadmodel = XGBoost.loadModel(rerankProperties.getModelPath());// calScoreprivate float[][] calScore(float[] featureValues, int size, int featureTotalDim) throws XGBoostError &#123; DMatrix mat = new DMatrix(featureValues, size, featureTotalDim); if (!rerankProperties.isRankOff() &amp;&amp; model == null) &#123; load(); &#125; return model.predict(mat);&#125;// predictint samples = recalls.size();float[] features = new float[samples * dimSize];for (int i = 0; i &lt; samples; i++) &#123; String id = recalls.get(i).getId(); String uid = recalls.get(i).getAId(); Feature feature = features.get(jobId); CFeature cFeature = cFeatures.get(uid); float[] b = ModelFeature.transform(searchReq, queryFeature, aFeature, bFeature, cFeature, dimSize); System.arraycopy(b, 0, features, i * dimSize, b.length);&#125;float[][] result = calScore(features, samples, dimSize); 模式流、模式、Guardian Baize of Bot-flow Detection FlowSentryZ 流量哨兵白泽(Baize)","tags":[{"name":"TML","slug":"TML","permalink":"https://wiki.quartz.ren/tags/TML/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"002.深度学习","slug":"算法/002-深度学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/002-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"001.常见算法","slug":"算法/002-深度学习/001-常见算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/002-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/001-%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/"}]},{"title":"0.总体介绍","date":"2024-01-27T14:55:57.000Z","path":"wk/平台工具/云计算/05.解决方案_技能/安全方向/000.总体介绍/","text":"6529a249a0af82b27e00ec9fb492a16513da690957109528e75819360eb42e1c301abab8fcea48329d05a6ef471faf5e17cc8cdc2e8e6098592878b7b0878f9359c50495a4b8375dfdc003e271e503b53ca47f0c4191b8a2088d389ef9d9541956f6e852099f1b3f59e283ce067e01289b5319a54b480fab8e0b34bc01f38f6613c7264d8270ed2dcd8a70e973bd5e1dd6ebc7022f600642c65eac04ad62864475b1d1c574cccc28c3c0e66c14cc8e9f9d1d1892173ae1f793c66f4a4418f82b4394957389a573b2ae474ad553106b6d60ff069f21e33982cd77238e2c64df9275a329f63e431384a244639e4b7d6df91e91b62d004917a10f87a53877beb51155dddc99858fab3fa0d16409dcd3991e518bed252aa86857017b5f6f6324685975e79d2bb304597a8a3bd9940b4ea4b005d84080b6fe7270c9b268ca596b87bbd8499187befb063c84d63f81d46b374f2e2caf80a145841ef437050fd2b5c10df030df2cc3b8e917514b4ce00802620ee8672fc1c0c9813b92ee4ec4854fa9529d81295ff52a9740862e6496918695fc68d821e6b6e9e3ecdd7376da8441ca69a66bc89faec1bef6fea8b979eb3961cc12c00e323625d36b263a255de234478e31b5ce0dedac759c8a0063106330a468a46403aedf6e55647cbc9d5cb3a43a19d5506f1a4722dfc6fe47eac9ed3dde865009117802e726e43997e4392e494148b2d570e6fe57e1d48ba0a1ecc7a4c5d67ea9a1d32c5449f303e289da4b2ce53008c05bce5ea1241062d5fa96fedfff5cf7f508aa770a956057de00d6b1c9e37b1492ae325c6d3c9f1b20c5355c8acdc25eab95e261dc5ecac349a7454a0e7b96adfd42200ce4e954521593c32896ba9a1de7224db7495fedc42f999ee0cac454d371fa813d0bc0ebd463f1ad48b14b8987c8eaed6111b5513f63155df4a50fc211ac0eb4f3fb9e5d917844e8e633979b4221f3245e78e78dd6be63d6687a86d25a235b8b33bb12700019390ef0d6545b2bda9c4e5c6dca6ca543aaf0575103d1fe2dedd3cdb0387fd7c5ee88e44dceec0984da785748e6d1b345dc93604a9c84850d4d16e58e458f55a80c509bd1e293dd295752c2f703d268a576e8137a4f32fbea041cc4a4f5dce90bcc43a427969ccbc44e6ced5d4262320272f4555f1113e7d291bc83cff68f223b8f99251f7636bfcc4352e46844a9380b055235113ca62552cc0b7e5095c4a3fcd3ffae3a3d4b36f4766706dd2e1e1d99b2f27e14c10904730d4b86d2bde860215b98f58f81fca5bc538814b73cb81ebedd3b8adba3944de0e23c11c282e4e36703ab7963899c1a1834decea4f06c4e7b9b72e933a37ef9db6f2c1dcb65277911f0f5b3cc0b704222385dba1bc11d57790acb02a04154109b37c04c6bae88583dc122a5ef5c41067e53e49af3d745e183a370855bf52695511ed102a3cbd253f4d4bc7e2f9bee4530f0e315074c44e5444975ed2fd2494ad9341e8d48ffe172b2f3487bea983f754381a8b99ea6bf55228c322101fc35c6d5bb69eaa4618579e6c7f4a687a996c817be87657604e109b2eef2f03314092504be7be466d86e5314744cad7d6a9ddde0a198557d0ee1d7e99e6b12c623f1513440d556e6ba580c1fbc17a5cfe1e3f7a2efa397a86acdb2d729aa3fb51961940c8b416f37927af1df5086319b2f94946cc64900f5f6230364e4ecbfa26ffd76247cd927d9f8b4fd9d6fe8fa5bab9f3bdec95cf343865caa1bd11c609bafd383054b7afde6fa334ca57ab812d3e2c10ef8c20b127a51507d08a1d66ce0abdaab049608165f2003cfd8f531634869e2b5f9a35c825138bc57db255342b94a6683676393f6b2a67b26f184eb982af84530ed24b46a7f4ed05af8eb6b1807a9309f049687aeba3104fdb83607cf816fd6137748d155fb12da2b71de693ed93fd86761bc13ec456dfe61435b5974264b10a929c6593226f9b15475b14bd4cbe18b78741e8f3a66866ae84e3cb194eb468fb0a39d27eb6f31ecca2c3c4d212c55d1088009cb32498440502b7634396ee8670853d5182648f22683eac7ecc3464d863a2c6c018eb4e79cab04add778a704ef9abf439886cd573c70030f48a8d9f3c0da8ce5fadb90af27c0e07d000f0adbe51ee8bd68d9e8df615a8b7933d161d43fbe11697ec23f1c59e101895d3f18f267221145c5fc2c82c2f3fc90629dc145a487d8fd89c1ca12cc9a9d0b481d83e97ea256685afff8faeb6c8c6ff14a97e835 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"},{"name":"云计算","slug":"云计算","permalink":"https://wiki.quartz.ren/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"解决方案","slug":"解决方案","permalink":"https://wiki.quartz.ren/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"云计算","slug":"平台工具/云计算","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"05.解决方案_技能","slug":"平台工具/云计算/05-解决方案-技能","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/05-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%8A%80%E8%83%BD/"},{"name":"安全方向","slug":"平台工具/云计算/05-解决方案-技能/安全方向","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%BA%91%E8%AE%A1%E7%AE%97/05-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%8A%80%E8%83%BD/%E5%AE%89%E5%85%A8%E6%96%B9%E5%90%91/"}]},{"title":"0.基金股票","date":"2023-03-09T04:55:57.000Z","path":"wk/项目管理/[3]生活学习/[5]投资/001.基金股票/","text":"6529a249a0af82b27e00ec9fb492a165b9e5611a926b8b592eb1228cf6519e33e5d9989bdfe8cc6e517bd46ec735d719742cea8579d87d28c5e410c3632746e8d64f0bc1d2d62176f195ff1e5a01c12cde6937b77455fd615eda4e50c8ea67228f02b7bdc7e96619671153400c63404b545f2b7e1fd11fdbe5d316e4d447a0eba45414ea42c7aa6ac872f565ee12c3ab66b5c8e31504907f99bb2fe03cb5158aa35ec9f39dd0b0d30b16a1e6327004c9dd5b1f4ec3388d7b57ba8c24ed495e2503a4443329f12418ef69d74b5a43577dc661d0aa97320e8b6206f0e02dba711dc230ce9dc91c47f0df5849eeecb5e929cbce101551c0b6219a66cb31f7ac574d68a11535663c89fbb6532b8190f1a5b352fa75383c0460165228ba42efc28b8fdd0c54e4c207500bed17fb8e0fe09fbfdbcd8102d71ff6ae7ce0df08fea17805a3a6dfa3a6fc9868383fa04a0b04469d345ea4448f3831f124b0c28e9f4fd1e3b85c752b8b7942d52b200c8b95ce73001b6b0a8216e0c730c933d9321785c0aac8c0d73bb99d47e6b37d96cf6096d5648306de4bc37a2ead5add211fbf19b71a46c5a984ba1c55e6a50dd20e375293df6d1423bd29d42aeec5289b60962b8f30aa871012203e941f5b8ce8962b4470fc856370d0f1841d76f023e8aa034427baa738ce9ed5eee3428d1b29eb78d32c011b5c324cea169386a7eae71ed98a9e2a31ff236397fee50778f38a49d0ea3f1919fc78d9ed1239aec7732a40f9e24757d5224662a507688ec6eb973ac331f78d58ccfff6de830cffef3e6c10ab1eac6b8c3f01286cfbbde35d573e4f5bcd283ca9674feaf0d37674ea7739bc0adc6b5f9a1e6b155a640afb05223534274aeb22f6dd59361f0d9adbd358c7f26309ffe553433cbcc1cc74c9b3cb5699afb5c9251d12528e5ce1b523949533bc2934ce1fc6d763fc6f17d3a85365b2630b737a7198546ec087fad5ca31034cf3a6665c52c9993b0a397e2b768f3e097b5e8bd12de09f5625357f3f1a4bc370e78ef2e1e9001d8ba89243d9ae9c9df75f8e6162a381b88cd33ea2799688c268418bfbc8432dbb0b63892794818e2db1603b70cb93d1b81ec3fef3489f5d05e4b2f272c6fbc7948c39d77bc226bcd5302b1f24c69d0331f1d7bcb99b3076075847340752fadc986cc2da757fed6f1bdb1736e8fad578db30371878b0a4ef2964f23afe7150b98525bd339f14b99c03da8caf0f6290f45a43f2a9a5708145cce8a122f0624b0b75f2eec68f1d785decd00c953dc65ad83142a80e5bca1429bcdeb6c6a21ece8c2403cf95c5381afe8e8083e512715677a5a93745799f743037f2f5653b0a20fe77a3d842fe1e5a84b005f8ca80971c5d972d672b2b73755499913f26f8010fbbb1b70c5b87f7095acb7c4378ed2dac79f2afa4b2698dfcd56bccfa28eee0986548f19458ca712632565a733d2f46d7ca501629aed68d949f8cf2e4090a7b73b1a98b1a418221449ea632a81fafb6eba0d59813cef961f38da9da1a257369a762150018830376203ca67c17f969062d8b8b90ca7a091393b39edb9361ab6a9ca6220443772835af045fda3b190d7f291cb9f8b5909282a06e9ead485bc463f0b1f6ec4d9d9b7607a753c4c57ea557bd4a754b1fcc4dd654ce45bac9197bd6a4fb5e310f03ded141546c01f6b45df19ca023ae85d609f820470d33327201e1373f4ed80fa58393a2c028532c9378eada1c8581ff5eeaedefbdc5eab40f9e287a97fc48d9953b4a80f3d0c778c4b8bd199a801714d1c5027e61258f7e6729be0f8ba568f64b3d4920dd726115bb7f5c5bb237ad1464d0922a3f4d4d1a5fe308378977dbb1cf4080f4c82f12268bd1b868b07dd4fa445f6821c7d508d338f44b343dfb0ab147745e38590a399ba9385e4728b17d993e578cb1ce256a6715c484d94b6ee56103ce35da5d605079b4b308af976b9913919651cba0748de71738d6852b60f861fa935589b677406dc25e44f3b85f18a7e480db1f0e90131f765549c2e10912c203c1ca3db0bb8a1a48753e3bab9008986ef203016dbf1da3752ed632c350c133499047c422095a0caf3e863012339e9e65cdb4a57e288b188b21aee574c8a8450d2fdb825785a4a4294fc902747a3373bc6c9c524029d17140d83aa71bf1a1b5cd5c784bcdc4b73014f3777ecec4e1d911501154d22103660c620570277b928bfbebc0cf6aaa1fa9cfd9dbc12feba9e385dc8099f2494c33b5f993eacf21bfb373fd5e703e3a5a24935a4b9efcb617e4809abbea4baabe5104364763407c2a2adb08054cce8553104e80cf32221107db92f8dd86e91479e3182817aafc1ecf6902be3f601e15ef97bcd6113ca1e3e2928e5f70ebe5211e001743cbfb3c8cc7083e79e7127f579c8d7d0709d00bf86823cefec9e34403847e221cab25d06d26361b981239ad773483c5f4cf9407ff81af94ccc8bbb09979cabe6dc7a32360f4282e7bc4bf36723b41baae371c16158251a94c525ff04effc6483a7556743bad8b19b51d2f5583b3232358086e8ecf3cd909c12660f541eb27c4f92f3067be3e674a4d1303311016a64c4950fdd8bad3e22d786411e0dc807e90661b0f8b3a8050fe86ca795867ada8749f5fae3e7c19fadbe0a467a500ac9bcebfa0116458cad93b1b47d4488c39c9faa893dbfa87b28c6ed44dd0a47b4811273d0b6719e59c6ec8c6c5fc4bf525fe460370c3a26f0aafb27ecb38ac4948914d337161fe5af6d82e28f0f06e9b76526bcbdc378d9772fc9e9a1ce90bfc66983cc723615efcea24c92ea441a04967c15d667dcc7824be35436ed5edf41e17881e68f16e8c79af6acf23afbf250eb99722dcb118da31d3b05333ae3c8edc5769db7c5f62d391da356503f882df23a41c870e54ddc61cf41384a7d4075945cb7e7e913a8e6150611fd05c144ec3b87ed91c3275d3813c3114716ec9ddf8433c713df674e076263e722a4e2b3e4e20b015999d71b0f981aa72a2c78bf1c104137f3ed9c1a1a2ecfd4ecf80c1901774788e58c44421c97b14b5d017816a25d21fb4efcdf74b5292150fcff1312d01c0c38a749f66d4a97dce8992a92f38e7b00fb94dae1da5958136153450dcab71ee769be634eb101c914ed50e8d97ebf052994e85bc322a52d8bb05cf85b1ad88fc88109e8929b0f3d8c770ad2c39c723e2a383a6c11d33ad8c205087f8d116279cb2bef3e8eec8be8f115c07cb40efde4e10448aafe319ed95b615b1f947a3e7cd7e904e1f58f40a7e8ed2dd0091b56640fa19772735f1748e4adc0b3a8d90cac9f88b5502e29dac7cfb5f4058b70d5fe2343fb81d856524b10deb634865a4a4799ad2e93ed7e850f0f00b3790317a66cf0e1a75aebd77be5e82af1c5493e1d94ec31b73b3bc9b7f5af9e53054bd1272d3e77f9a59a7da5ba8eb3f376586bce51c08ef904adf9fe199df47f94d710dd3b7e40df0c65ac9 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[5]投资","slug":"项目管理/3-生活学习/5-投资","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/5-%E6%8A%95%E8%B5%84/"}]},{"title":"3.言语_行文结构总结","date":"2023-03-09T04:55:57.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/言语总结/003.言语_行文结构总结/","text":"6529a249a0af82b27e00ec9fb492a165cdeff919c1e3b0b703e0a95a87175d9e719b5f1fc7c8341e556205f13a1064f5752e0abb2fddca36b240386ff300fe5d2c8d5b68948fad359e01d7494a5580cd92f2ce06dd9d6eb1cea2abd4f713ffdee928fc63a190120b1c3235b3360a0b173e8edb650f4ec23b481dc537ad38a89fc4f615404ad68a66b22f0433dfd057a770a06d97cfec872cc55b3d16534a0ebf6c0dcdb5bcde67565fa83fe8906b053000d9397b80cc0c0e5873285b42e6ff2a0978bdae835489be4920abf1beff42892d0d65508b2431a240f06539e0e52f6aefebc7bd05904cb7ad169a27f6d458558a4ecc3f7250ce749991f666e053bf97077c7ba082f1c9b1b5205f5201a62dfd7592bfab47a7a348377d2c87e038df5d5faa137229af87ee1764cc747f4ac3a3dbfc5e4af9f5ec29e6c4b76b3ad4a55ba183684769dc271b4f54709f4176299452c7178e4adcd880a00e7e8d6c72f070036ff8d865fe14f4e616b602c0107f5299af6bc7e8cfc5607d278512eba36095e780a197e6eeb4d7c381a3b38403ff33327a5cf7b63b1c043e5482ac8803753723133302387c8246665a2725d35ad09644affcbf89b4a06601bfb3d5386eaee39882b6567d6a7f022932a42aea10dbdd6c8e445176fae34cc04180e575a93a2cf52386daaa6e679a30b2d009b993c5aebe7d66d3cbd2ddf497f25ae0bb8b1e5ffce3dc3522063f4f3932d903336fc4ee93fbeec907ae82aaf2fad97f5f68cfc1587d26648b6c9245ada4241682fa31f04164c7cbc34cd8a8c289de5b25da9d4a349ac02c0849efa8565f89050a097a14808a153f6770e5933d2e3627ac14eea589c781d91f027b418e1f53856f9954170dda5606b04f3db790be75c33ba70ca976fb0125ac4b9a4fdd76380a441957be1daf1386e8a204db7ec748f455463970ce543bddfa4b3e8ad4f19b7b6cd3e1cba30acca9ba3f0d9d960c308ca5eb5a663f1dad2757b6321a3494a3c637e41af87dc71ed673f7aef0232696931e0ce438ae062a830b2243887f1f1e5e7bf70a3cecbff9db7e74fea70a91418b223edeb3277d3dbbc4af19967b405f9ba0fb461e430a779d27aad41d72afc05f8721e9f8d1d516307d69362930b74c172c92ed319fe6de35510d0c5c2f8f4f40624da596377cc069d97264aae0fc79f2c0313011448af4ae6a558a2d738de2236f8f18974c75181f158ff390f25bd4bcbff695d3104e18e0b10d4ee3aba46ff49a6a8233d018c7cdf04f825ae120b2f8e96de9ebc331414a5b1fb4bb1bcf53cbc3be21f7800575f7ec82a05c6f5c7caee157a742acc539b6e817ad67f08b5eee213c6f173aacd58cd114e86b86c19d1404f447a06a788012c793ba3e8bc1aad15efe058868dda485dd08e6799564c7b1a7a86c2dd3267c3e905d46f2484dbfa4410136e0b1b938767a7a6af0165596ab96745b4b62a71a0177047cc27afb36d7ad99946c6969e1bac54659ec4e9dbe76b6bf682c0062b28f07c1c311ed341ee9c602afe02068a9e7b5ca3023e17197551bccb9b7496afb4d80ee41b9068e311510f5abe81c38946a6e5484d1955e03cdaf8f6456677ba2345764b8ee00ccbb02a490e54f14d277a3a9edb1730e3a82b3a090561cd8e0e2d52c22300c8d152cc3d2c8177d31d8ee3fa9bcffdc988a68778e27c2fdd17c2076e10a2f1cfed32e827f366411115e621c516ce68960bb955780dddaf6e8e831b13c270e49345a5419ffc50bd49e949627288b3852d92587ee40f5128345495db9c27f6ddbaf9d170abd297df91dd18346bedafbeb7cd99133f8fc560573ce543ee8f7ca2b1375de2690628c3f0c36873b60c445ea88d891d725575e69cc7e2d808a5e1682fc98cfea6ee3593087cef3e6fd4994849857c66598cdf890f3843c171a3b97fd30a93229fbd5c331fc473d8f57715aa56fd94c7c41f6d0c6576b188994f5b321b85c9b13cfa02b6887b97495968107f6eaf29d3e733513c9295ea2f5d977a6ed9e6009ebc6ae762033a89f2aeb8069af21543805df3a6954e41d2c01decf47c64c851365b9a681e283d9b32093e2b94c42ad1f830df1e5adee78a503bd89a11e9e5c9dfa0e6a26ffd7511ba6a4c146f09efc30e072ad2a45082819641101a4caef4034e75a5c3a8b58c6ec346a6d7837539c416dd030131cb0786f177f7ac8b91a09f16a3679e8b60a8237289c53046d14f0e6637a6c1476c4e2cb858d98f9d527f98285325b184d52ec87efbe2439cf9a8c876f9714418aea7e0c188b821dbe5fcf9e9a0e7de4621c414bb0607a32f665a96f761722ef45c309b41da44f340ebd46044a5f8bc46e64ab74c47014811a01357cbdb6fa0ea11a290bc123486a917f6dbc3766296bac7bbeda24e6c99d82fe4be4a838dfdb2caec754a333a7d3cdf262cfb158c6f9fb1940dc7bb6f309e5ee60bc654fb29d533c491b109f654301ab26826164e4de60f842833c3179ae1c1d0a9d8e390a68070ac61195e68b611ef4b09a37cc6aa008083f4abe40a922bfb65879bd3496dc7f80394a50e873c40d37f0c3ae5c1b422377aed70ffa44f55f74d1dc2e668b891d048804dcfe4b3cbbb3856a49770570229deb69d3159caa133ddfe08d974718c1b9221d41a99ef9a809eee0bab27ced9a45eaf54adeb0ec7c282133ffadba5d67622e5517454cb8c47efd50ea24afbec6e38fc81b9521f76ec3887b8be04f6155a3c9c833a6c2b55e72078792c83b78b7b126b3226c0b3cccdaa8cc601b522cb2363230d8f159db12d2e1810a86d5d54ce623c7278836a5586b4411338f0a97ae531abf252b10ea56b76456022bd4b5c8a287466595942d007444ca014dbc23cdbf232b7c16800bfeea179efafc95a9e5e24f989a88935178dc4a8b16736d89efcdd556065067a22e191012d862054d8a23a26ff3f8bf6c1791cfb171d0e2141cc57793abf719d59f6369f0264c483e5f8fec807cf28070a7fd9c9220dc4385c1f40ae5da0824bd0df02ac7dc8783457d48f8f4edfd1670933c7addb5f3ff2042bb6e85d16a727fa13af93ed64b517c380e5d6b28b30c92cc3c931fadc3028aecbf4d7180f90a5bcf7c355a9d9a12e960934279c14a67c66d8ce22a882f72db69cd9ef958c92624bd1a813d85dd63015d7c0826aa58e04eabb309720c073d071ff146e7ee232b88fe74ab6b45baeca69422580cbb19e1d7e6a570aa7e34fa9dfcf354634bacec0ea266bd3aac34472158f2e3025946a76cda57c1f1d1c6f854546fda71dd0c39638a525e216f4d05b8edff2eeeca3793e909fc2ff959147d68725fa969d6bbf10e96e469e1ccf1f7f9d4fbc249cb6c0c7fefea651bd14a2950f3a959ee8e39ba8e69f32bb1a6b7666baccdfbefcaf5ec602e295ad4a308e021e08329cc0cf5e331f2faa38d70d013e379e8845af617c99c3257e52042f5b07346bfb9dcda2f01acf40ea5637e763166826bb0bec76a35084b92cf1b2e69e9b05e75a7eb86bd586a480d54e311d14d31368f8741cd19b83feb646490bf8526fffce95fcc0af35d0f40d0945940094f0c7a64c2caf79b9bbf10c6e2289078eb248c91e18403fa7d8d465b750abe56e609d461e7ceccd0c9e5bfc0b63829b8c64cfc0b2f04de3e6958cb5f7e98adf6dcafe57e4bce87b05eff5e4240aaa596ba4ee53f3b2e4cf7a3978bb5d0629586a7fada70945c382ba194fb091c5a7f32461491efd7d4c5c49780bd462bd1f2ce93c97c465c394bc4e9b914206802df78d582ff6332c57951ab5a84a116c0fa9f0dedb468ce2da405bd71c8c6fdb76784760472cc5e98d07fd13f1d35b5b2f3db5e479eb1877b4cd531a2d69dc598249752fb66f9a15066bf31b8a3aaeb9596de14f763b382ab66041b5d3a0e40549699c7c4a6f0b76b7d4ed99b1523e2a5d1b25f432cdf154ecacc06fad84c75f42feb18f6355b2937ccfa08849b43189d0cf1ea9057c6bdfb81e4a1ec7ec60653cf09cf80989550470104a19993a4e1ad3cab5cc94e72b5bc8239ff9db5a9461f629798608bdfb5cf0e288e37ecfa2a41904de0c4d97321c801a853f67ba79d1c75c6962a71d8c9dd8500da8218d20dec202303552b4c3744e1968be1c38f56dd7f850862160046d368f6c298259155742a380d066242312a00824a7020d3194d6fbc402caea32c8c583a5fe3dfd1d0828d9d4b0b6d7024fdcb8c91d42d7ddcd5a6211a39132253fbc98d1e287c19186921131cdcd1c1f14191ec09dbfc7b4f2b28fbf3914ee1f7db4a7621d7131bb508167a223584c77eba07ee375904124f607215663a618d5ee348c610c97ba236b554b9149242b63618899c6ff112341f526b43bbc3c9af4f934487f2ffeb348514c45c3e01be962bd9cf058672e792bdb57077725c1cf2a1a788c0cde4f6777fc7adf0bc4d380bec297e206f90699a90c7e464820de892e011b7f828292c9158fb38cb28b7b0b9b405a5376a11042b131c6ff60f819710f25b0a5e1bbd92ede9f112655241316da5b4582895d04f9bf7968019329751472f0681f58c07cfae8759d0e466c85beff8b22a5c103f06aa00e1241b0f08b04939aa49dd4cdeb4512f9cc295f6810d28fb06b9f6afb3b9a053aaf68d5d54d9ec3a36a6c259537599c9695e2fcd1d1621d67768febc9bc4c85bd7953cdad0a92c861647d2338cf9149c53716eed1a9b96250b2c6431fb61099586bdbac54ab6fc665cabaa797ccb67e58c7ce51f0a8c215cfc640dc7f2a54d12dedc4bf8624bb07d3e7c27f50a0d3fc02603ff8fcfe3bf331079a8973b3fbc7398f867a5cf74865d45fb6e398a202540ca642d70b1967951f06082fde7f444fc8f45cdefdbff90213ffe63b245ea1c58ac27f42775eeaccdeb4436fad85ec2898b9b0c0d08c02763d685f54867d13c9cb66a818a16dbadc4a74b82b176d78b7f8c8f972e6594bf202e04f6ef1f16911dc66470477080159534d48fc61d31faf3f4ed28c8fa12cf19792d65d52beadcb571f95cc36fc6276e0173f4a93d5f373ddfbaf4a6ffc814f8e49533083bf95dc5843b8802ac920698fe23dbc077b4a32253d6945497a95bffd086e19f085865d30fdad21248523d3960ddd513abba24286fd57afb01c0534db74fae1d5ea4c1e8c62f72b4b449960651c84dd1dd5fb774f13e877837d10c022ff465b1d92620908e12d2a1c2d1ec8d4e24885ddfabb4081333acace56034fe4d006f49e911a81711b95ae681bb84d25e89063c30ecbd08ea95f073469d1c60d182bfcf250f91a07a39e377a45d59e062e24bc1d2dfee26eea7214b52e4d96278282830ff5a0d2cac3d8a823bf63137ffe114ee81af87c3e7bae88222149c8f706768da6cad3be10974a16af19249d3972f311697efe064170705019b6dacf596c0a6362030ff4f99b43fe3990c322ea89eafbb3e1924865168ea82bb49ddea3eff4d73e3f86e735777979d13ff8f9a928ef2f606cb558c07cf48b1edcb46bacdce1e99cefafef45f128191c76bc13e83761ae7ecc3456b1f05cb886fe890ea6bf442b7cc14cc2f29e36820cc45804cdd17424c78b8ea18d79bc2c1cbd251c15b2edb67c50fdf0f7dcd77036261809ca6d35344c4e48e0c9d36b4911214 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"言语总结","slug":"项目管理/3-生活学习/3-综合能力/言语总结","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E8%A8%80%E8%AF%AD%E6%80%BB%E7%BB%93/"}]},{"title":"4.言语_词辨析总结","date":"2023-03-09T04:55:57.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/言语总结/004.言语_词辨析总结/","text":"6529a249a0af82b27e00ec9fb492a165cdeff919c1e3b0b703e0a95a87175d9e56749a2df6126507e4ddc09ab89e695a4fc107839754528d0f6ba161bc1ce5ba6ea32b5c456cc083590f107e1fd6193b580ab7964192a151c3bd45fc1f9a71e07f3056e8bfd917e65d9ad6fce74acc2414008f3b5a2eb7004502ad1c0cd2150dd38139a4f6beefa77917b75e2b6eb9093ff681927c5299ee741fd2d1f0ee369c8b67a147a130bdd04231783b17aaee2b625fe7a855b5d6c1595fdb0642ca46bd37fea4fb99afc44c7ba5eb037d5ffcd07fc040d7583f4f899d0416136087007c307ec308715dcd2a32148a223ac36bb2ed379803f6becd1a548a8931fdf42b975896e53d910908a1ecdd9c6d341f6212e94c26ca2d29b870140245e1c894a644583f9b077fa0c13db5564c47469fc4f208da857233a0a9c44754f141570968830fb8589506510f08f35fafe27087b64a50c35af1bbba1c26ea3beed713d199407db7b05db16026b97f9f3c4ed880aca1dea7ab0b2f338f199fe14b6baed5f9d27633e88235f89b45e884b59876310ae3e402ebab26b1543cf21d36f1a79a97c489a81942fe8409bde02835facf03b4f6b1b3a0c91df478e8e20716c947734eacfa5320f6dfa5837b0121e430da89d23d8072869d38cc4c2600e2d09a34dfebc275af6c6d27b50ac74e82aff288e63a6bee6097117857572f8b0b838893ad2f80f47b0f8b5fe67b2f2e6d86198d28cab2c4dd4bc8b03fbbf83cc662d63eaca81aff8263401a22dc44303bf2c0fba5296b7871f4a199c0bf7e6f9cfbf909753b6fac54444536c261a291662780d9c16571f025e70446b0ec6773589b7697157ea19e2a242b047b45de71977cda839909397b4222a3a6422d892c9d5d6289b024a39ac275899d00f108eda3c8196ba5ce11241c2ccddbd91928b960d795b8143509a08d590da4519c3ca9be625953d18d7dfc970803b199ec4f8721e34cd8151f85526068267d2ea06eae35eb0f505a9c7397ecb30cca304122ed455dda9209d63dfce692fecb99ccba716a42788bb7a979e5bc10a058e11a8320453e0bcbff6a736304581e7e24bd9f2a9c7deeabaafc1c0c3c3fa21ebdb5b0c73b311b9ae1ec746cb272156968898779673fddb23b07d2 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"言语总结","slug":"项目管理/3-生活学习/3-综合能力/言语总结","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E8%A8%80%E8%AF%AD%E6%80%BB%E7%BB%93/"}]},{"title":"5.言语_错题总结","date":"2023-03-09T04:55:57.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/言语总结/005.言语_错题总结/","text":"6529a249a0af82b27e00ec9fb492a165fd19ce0374c4737d6a82f684835b1fbe43e62a603e9d79526fdff73588c82a91d2daa194b9511bc4524bc222dc040d9d 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"言语总结","slug":"项目管理/3-生活学习/3-综合能力/言语总结","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E8%A8%80%E8%AF%AD%E6%80%BB%E7%BB%93/"}]},{"title":"2.言语_逻辑填空_解题思路","date":"2023-03-02T04:55:57.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/言语总结/002.言语_逻辑填空_解题思路/","text":" 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"言语总结","slug":"项目管理/3-生活学习/3-综合能力/言语总结","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E8%A8%80%E8%AF%AD%E6%80%BB%E7%BB%93/"}]},{"title":"综合能力","date":"2023-03-02T03:55:57.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/Readme/","text":"逻辑思维能力、语言表达能力、阅读理解能力、分析和解决问题的能力、组织协调能力。以及知识储备：对政治、经济、法律、文化、科技等方面的知识有一定的了解和掌握。在社会工作中也同样非常有用。","tags":[],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"}]},{"title":"1.事业单位C类考点_职测","date":"2023-03-02T03:55:57.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/事业/001.事业单位C类考点_职测/","text":" 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"事业","slug":"项目管理/3-生活学习/3-综合能力/事业","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E4%BA%8B%E4%B8%9A/"}]},{"title":"6.事业单位C类考点_综应","date":"2023-03-02T03:55:57.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/事业/006.C类考点_综应/","text":"6529a249a0af82b27e00ec9fb492a16509e0ab54fed1a1b181f77886475504de9377e2db4d786faf7883665f010b31c5e2bb70e46d5e702c652e22d071f44d811fe93bb9dc97dc34910db3792f7afcd953007418591c67ab2ed49f99229edab8edaff614c2a2ae530d711c4b5cd5d3138925cb759d29d7089558e0788d82fb1d22913591f9f908f1be452d771ae97dcb356f0d0698f95ba8030b7eb197279597fb73b2bbb7cfa971f2b7456845c0e73c3da2dfbdb17a0ebd9f9a164054ebad08b6907bc1f3a24fbcf6dfe05403f55a248e21c6e4773ba83f762fa6edcba9de7c1e6c153c5831c00ffd832cc147def019d10610173432a384773075a5ee7238a894d8a46c254bbce6ab9d84483bead01d2a155a76b661b684d8438c3a8cf524953e651714a83bad34ba38af0072a3f4e435829f2b8dd2e6ee603c82874272cf91185de94b05c26cb09d2bc1e1e61cd966372f219ce216afd08dcbb4a5adb3a0ec8d1f3249b9976ae62cc329ff51602852e8968dd65b7dc66148479c200c11d15ca5427ac55e3650bbd248800ce645055faadcf2977c4f437ba0d8f318689c88762c853fe82c16141c09b8db10d7c213b2b5b7179bc7727d763ec4c8e5615aeb108682b164ba069935879217f295490bef4003fd4e93c66e7cbde9edf8d43e720bfb3aeb5b80ab20d940e0f34fb4bc01d642f007b5bca16a766b75e7c2839706ee02434a270909a670841b7182bfaea853d039935d01596585521e0d113e14b083b61c757d0649ab30de688bda576831c8bfa019df8506c814ae95547323da38f02d4b62d6526b25647bb087cc2952f79c3b6eec5a676aae70817869e0d73743abec17ea98edebeedfdb0a585ad83cf51e2bab0e4d837da963f4444da7b1b6a81b419ea6d1e73f29dba12caec09e4d568d2e3641e8914ec39bcab441a9c1d04dd85295a23a15348fe8194fb1d6494d9b6324cc1cb5c5ff97b2da443687586e059709a7fc3a6ee3722216e8c908dc0e00da47d109671ecc979357430c3f5487d14dbeafbd5d611750107750820ac5b9ae194fca12648696ca11bae79e193477b8f94a91fcf3ce90d0d349d8c0402abdd3bb2461ad3436268d2c64d2e13682f275626ee1dfeb15992a601352e1a7b95d2fabcb4722c87862c168880a3318aea34c5c025df6b705545aa060139b5c904626952500455c572f11a76e3b55bc10c78c50f01fedebebcfa57f6f055ca4cf505fb2cbd7a0f24c01dc81ca2a48b4d337c7ccf27c8d84931f63508a9a4ecdce9ae136ca308e5e35c6ab5c2980f0f72472e3e932cc85b80f2d8ebe5d9eb93b9963dc25259fa3dcc4c0a06332bf920f497a75c132da86de5b591fe078c23b98ebd9121b3c4f585c4b0eb2a7277f73f2c9d03a54b672dbb7f4b4efc61215a45fca7dc9bb32e1eade5618a62514b5ed0e1ae5c816730ad040ea89f4a3420b335ba08c2a02b4f0692fa047c5c2387b2c1c31ca4e03d6191911990d00db3799f157a04cde4c461451619078defda4645054f441cb09e8dc25f40f9d95ddd8eb8ec4503cbdb12e68ba493d1701ce909321b3868b7f08fc86f45338cc7a086b957c658f39960cb1e897bcfa9868bf065345fe3a760621eb752024862d0e116d0f2f68bc761c1cd28fcbb654e3c95a25820b59b21d2e747dd5c18cb200caf41681624b42222e922e0b55d1438819bfb9ab159405e8149122b018ee325ef4cdf16657713101615cc55d6671e65f715c4985f7c7d1583a9f2deddccdd7b36dc04813199653eb67b8b4401adcfec1f87b9b074d756d3af7bfc1b7ab61adc72a9ad76859504e77ae113ff588e5f4515263eca6ea08062674661edd0927d9fa168d587ceb0b56dbf7bc651bdf1090b920ceec7a0b2cb670dd502c2975c273a147e2dfff3a7d598bf1bd6927978880067c202c8e50e35734c61fc5e9133aca7f7eefbd1ab8fefe60e0646b67b9c83b7fe05cc11921a545c564fc82b9d07197708dbd40b5ddad3c7d7d2799dc993dd7180f4ef6e6bec2d28df3f2e6e45b131c4c0408f56423fe544e4f1562f1b09660a17f0b3480b088bbd1ca2530e4f46a3479b43bf595e4010a634d8ec564b02db6bb90e00601a330e4411cd9fe368e8b9b923aaf90741f6279118f1c7258b2b31f501b22791c12c21ebbf1a9461db76fa85eb6e58405003132892dc4cba8efdc5153684e4078d9e8da55cfde3db8f4a3d9789174d3eea91843ab5da92b0d96913c58a05848ef78805ff224932e11414abbe2b520cfbfc3186a5365e39011db2dcb9d38c39e2d26af905372594dad9200b615cb344af5faab1cbce5ef 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"事业","slug":"项目管理/3-生活学习/3-综合能力/事业","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E4%BA%8B%E4%B8%9A/"}]},{"title":"1.言语_中心理解_解题思路","date":"2023-03-02T03:55:57.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/言语总结/001.言语_中心理解_解题思路/","text":" 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"言语总结","slug":"项目管理/3-生活学习/3-综合能力/言语总结","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E8%A8%80%E8%AF%AD%E6%80%BB%E7%BB%93/"}]},{"title":"5.词语积累","date":"2023-03-02T03:55:57.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/积累/005.词语积累/","text":"6529a249a0af82b27e00ec9fb492a165b377d79a208f9893f69e44a02771dbd536f64df708db89e46f8d5636fd2b79e03fd05d5906d5e8cff73f6a7121d4382a7d70b39115a0a6edd0d2291cb955aea2fd930e5cab2561ea0a7a1afc4409b52d03b8e5e690d52ab3e3e80a6c26cfe1941a7cdee70deac280c6aeaa14377723bb6d499662908d96e9154b36e1e431a9c17a20ebcfc49e2ed19615667d5efa18b7fb56f7ab212eba1c6b40e039ee59635667d8e32655dd91d3aaac4d61d65eda9b9edcbb25ef8c28d5d7dcf4c06052e596ef03d7bbd27b0a5562d5608df7f235d8668009c3b56aeb8dc842bb750e464efff07cdd9e155f4f19a8d49b3ea57ce7800e38597aed0efc90490d8afc3625f37fe00da4382e0cbd4b09e66f6b2da5fb7353f3bad92b8d59c2b3dbfba373c1ff04d58ace8e4160834732b740083e2c189e7f7e14f295a3468981044cfed7d95cc2f856bbaaa0706e3be095f3355360887cbaea009a76f3182fd068a89721b66dfe64d99e95e7ac310dea1f743a153967beed8a1cff18cca09a2ce7798f35b9dd8d363bc722b7ceb1bd909480146f92f449e99b830abc98f509236a8e6854088777ae4d76efa27bd919046164b71a107616fe58c1a334f2d24cb28e5f6c4ba8b895e1ce7fcc848dee3fa26cd1a586072fd856b2ec57ac8d11734fc84ef082ab1511a8d8bdeecd5575bf6a889e9b47b3fbe463a96600067d2e27d8dc8e26669d9cbdc6f7908a9f7e3acfc94ea11db63bf3b40db0ef1269c408f76b17da15cfbd344cbab78ce1b6c719d3c15a85d3b5a80a2dfcdee43ace03e37293a87999e77f2a097aea4ca0099957a9ed3268821e684bdb51332b70abdb665a643bbf2118267cd9eb8c7d77909bc7da00f1427dcec502c07124b018f403f54eeeb9bf83afebb92894fb6d563ce0ca568f0afe72f06e2f7138c7bcb67382d002de0f3869bee7a256795deb53851ed2aaa92f48d29e0d35eb671e41f4a868a1968a9145a65ed76f356f52615c7fa76424faa5ccf1d7bb390d6e212ea87e3bf359ba108f8bc723ebd10f099ba804c9fca4ea33b6689ab7a489859b8b6e98587f2b773c260a25e73952ffc24102039ca647fadc416f9a0927c510c27a892af9adc7ea8e3806347e5db9b7628ac6b92bf1556529e453a1a07325243349d7e3104adc19cc4b1d7743ede8557c3571a21565920af575f0ece42ff50e8c53206449af7c6674cbe5abb06acf90f310093ae1351d47d1a4eba78ae4987fc5d3685694f29a2de82fb0fdf520844e644e54cc9a7c32b1b82af33f41a62beffd7d5a3df7a9a05a25f0e61d8bde6e013cb706485aba645df0dbd81e7a57b5f6fb5b06d2511eb6aee393a2727ae54019d3581fe1d407ef45e4a2b1ed1dceecf21883cb49fb023f4c866a9663de406d5f54cadd0c19d3ab1f46363350733e1f3b229a9bac7ed11800bc50c424bfb3c2cd4a16d9888dd4fee2cd61b3345e1b00db262c15ef0a3dcfcfde7120355fb1ef4942cd71665d9685da2b2695b107e2a996cd4aa94bb39be637ff9275c653622d79decbb36892c2cf2c204f8058492f9b35af9e07dadb6fe68f3f011b18402230a48030637259edc5843b14fbe134d8667c58635a9ab11a14f3072dd386e7bd445c3be5d214cc5e95f9bcb4118d6af31730ae0b476196cbf8015211e62d7c05f45c0af8f9261100459dfa3b07f6224547c427a368831ba966e81982164e5d4990cb4b2ea845d06d9338169292e5863339adb811322b76886376462c84180ff031e9eab40b35ead112cb841d8c86e1148fc23ce9847afbb57fc01c1eacd2e8359cda6c088a23c82a40ff9e25253df9fb2e2a5117a42d319735f46a6c69db715e5568f1850c650a0f9006669cc93169c7a06ce6edc996048b6701d459ad9d6ff292daa50951c23e751e015c70ad963f89b51bdd850e048f4710bbae79afdd808cab78191884d36f391d13f16310e247bc5ce10570fbe2ce5f8c8e1d1d387f800fb6433c1c4c2383822468e5e4af8f22058f 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"积累","slug":"项目管理/3-生活学习/3-综合能力/积累","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E7%A7%AF%E7%B4%AF/"}]},{"title":"4.错题本","date":"2023-03-02T03:55:57.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/错题本/004.错题本/","text":"6529a249a0af82b27e00ec9fb492a165cdeff919c1e3b0b703e0a95a87175d9e8be99ee67e94413e8cf3deafc8747880e219c6bda918be17030f643ed297e8ffadb3f5b80c6741713ad76d9d714ac95dc51a934644ccbc52822990e5d0217f77efb7eef244d33dfe0a749ce2fac970983297546db5eafa441b8f15d5589e4bd87a3befa42bb781c7cf197c60a8df64d1c001ea7838c71ec8d7c8c06a2c6dde249a8327ab9d18c90fdee3d02e86ef50d8db3d3ed7f6843fd651b3781ca30644beac58ae5bd17b581ec40b82949c4070e96dafe6f81f2ac610a378325727e89cbadaefb886c0e2fd27ad9ccedf97f6a2e24b0d39dcb333c0d97ead96a83cece978c9a175902e6fcf2ab5709c809ca41549e7fd66e77fa80f4dcbc2d0aafe239e2355118a6bdf9c3d326e637c6991699a83e60857c69fd4ccedeaf6de245bc1936a71b36b44b1d6c33b2afab2797c66ab099ade26608a42b3be9465fb7a1e9fbd6194688edb8b409bccb47a149d55045476590aaa2b9ea85d10619cbc488cb89ec50103144a4b04fb63b21f0252a8f560676d5298f672a421f283e731d6b763c600658f289cd3e5444bca4ed77e0cdd1faf8c6cf7ea99762e3041a770e1551603eb36bddaf34f072a96c33fda0f978937210cec4d01dbdd08f70df53f119ffcfb62b1f64c83d56b46d3d3b506329aba3a359f7bff8c953a63f00a6f717fe0ddf92c62a99572e13a8c8bd27dfa44beba648ed4185580d70910aa13942ae55d28f174f43142c15519e0a525972c4172247b1b85fa6032f36d27cf54ed32ef0c7171854c96b82445e0f08c597f21fd1964215dc77293350cdcc05992b08d6df90fbf1d4f8811daedff14ec7c6261583da1772bd2f058c8469cc5c13d2ab4257dadba44902239df3e9b7868a4db53c53f13b39ce7854919d3a8ed13c648056439a40a71bde5155cc1209e711e5ad8d5a5b07ac921cb1a295a5b5908f7bb99a55c87e220eef79993a5c596206f3d22a7486395d34c2a348ebedad233a79a093295cadbb81fa89bdb44aad33a88ce00d78bdfe9e59d80a2348cd85d513de16464b12f42631ba58ee405cb4c55746d47fbca0a9e668e835c83c718d0257205e84383dc714331f8dc4f9b446b8cc7e0d7479f1ddb1d551b9e74e2d004957a5025c3366f56630578e2481fe23851c260ad6b9baa1f01e4a504e92db987173aad37aba32a41716b3c8f553bae7c6e7d833defe1e1f47cde87d6522ec11a264a7002ab7dff1a4e6552f93557c4c32f6d9943f9479d7969 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"错题本","slug":"项目管理/3-生活学习/3-综合能力/错题本","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E9%94%99%E9%A2%98%E6%9C%AC/"}]},{"title":"0.言语-考点总结及解题思路","date":"2023-03-01T03:55:57.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/言语总结/000.言语_考点总结/","text":"6529a249a0af82b27e00ec9fb492a1656382ba86a67dc680c402f1e6611a2121ac9641feb4f229125dfb40ca07777e06c179fe7ce4b3ce2fca3c240db50aaee988f59edb1195fed7a4f0b767a6efbef5f71451bcb9537f55acec26c1b267b6ba097ccc9bb0d135c4812da65ada526a3952f6d57c27d6355860a07747a0ff52101df7dce55c07e3581315da46de4792e5d07731132d3fa71f31312265f7f82b1ee5a3e2294d7239272dd6e27a6b0b9300aea5bcfcfc36cb51f4cbae48b4a8e18c1fb5a178c7d9bcdd819bb8e81035c3b9a52620c4c8775c59a9f42ee0b59b25cdc8281f6350919e739b1306c374f20812f838dcc305c0438b9709a7ba9a6a20f7c23eb0f3a1181cc62544b653db0d5bcd4d62a96488f21abe7a74c828247fac597f91c2cd8cb41132c54acb7190d18f1b384101985ee3c13c94d10d2eaadb268c21d4383f221792d7acdb48411e1d64571035e275775a65488ccaea203128c61011a45f54785ba8386ef00627af0f47d6c922a42d70b68789b5ffb9a2117a21ebc5bf689da13c1eb288f99863c363bf8180ff011cda05365fdc16a7dab24e1eb7a2a51dcd081a77a30cce4d95e8c7b0b38d9ebb97780464ab8b7345f349b20a4a1648e60d88202d610495b3b4e61acbbf0b7c5d0c41183c5a570ccb938234c46cbfd824df5ebbad04ad57c944875121f4326769dc478fcb9e1837dca663b17e573da542c84d09b8de8d2693c5def9ac4402492c9ca8e5da172e63d48849033f745800928ad07cffa6f46515dfb72de19022361219d37975a94e0231daddaa6515306749b58ae51df1a0148bb653be08f670419a59faa765e1153ca31527fb5405ae089b2d1b338fefe52e2013539122220248132b7bff7e6aff31c30972940ce29e3695fd6c828759bb56d82014a28a2f4a21af622f905a1801fb85e29c38db0ce047016ef94e8d22d8d6b4a531c9b22b7d7d4ccdb57d11a87cbed6cfc9ef38c2a06e3eba4f0f3f93707fa3378c40c29665ec629e763cb9ce5b60e676f661b4fa5577ab6742bbe1e68491df18a87a9ae0f0e0e3992d696c9550407429b977834fdbf5a343fd75cca2da7e963fa0c5a0209aba01f17921c4b41cc8c588d2005d93e9684606d10a8edb528275babfcaec6f8bf7bd9ec94e3a34efa8febdc3af961bd309b7a065b4f46755cc9b3bced822635f2bdc0a131d7e643eb48aa17a2442287adcdad4d68e59bd73c84869e9eb42433642d174c0693faad401d025a45a5c32a8e6fcbe2f2a3b31e5ec0ea9bbd4b0e2cf50aceace27fb2216c3d89b8322017978babe06a2153df7068bd9863f64c4719c6c674c4b3eb1c22e7d277bc1883b10a277513fd7aa6dd02be210c745a1aaeb78d268f2dc6e8c8771f9a6c7cb484855faf469f5c8538b67d7d528ce4ad15844ed1c39f9482a4a0ebb6860f8ef95ec79cf3d7ccd05f0a419d7c2c7dfab153428d5e73ae973b03a60fa79106f562a35c7db2855ba1e790dffeeb8e3b477ee590b50700225beb6c05fde54bd8120f965587b552858ec0d1b2a4c18f83ca6a70262bab639d16e29d45cd4383470ad10abe0bac8309cbb4b16bb6fc430947a23376e19674afd238e77e8a043d8327eacd2c1d4d73812f02e4d144216e409a7392c8a21d43c9702c6347a98e365725bfaee5b337826831365a1905de48e29feb28c3e37ccd9e7c267edb9a66e5387bc99349214f620958ad85c02d191221811b0a9d93f9539a1a204c491430e214c7147b1c886b889d756df03ec4ff5fa3a905e95fd6039fec5a2d898ca30ff4a69ede35876d09512e7909cc0de0d193ee6ce6ecec536c73fdc2ccff2eb60e4f1d35a5e54c456ee0dde99a0b73e0ece07f70d97287c7569e4a0fcc90f2e283f4d97a657636ab866f4c40f4709537d9c5eb1e0ddb816594fb7ebfb6f8588543985ba9edbb7b8a1efe668ee86ba030b91288a26aa987144c84e5df92326311e89ff160c5e9b198f1a934f1b6eec6c5bfd9bf322ff57ac91ba56d6839b14c314b7a745675f885668cc2c944fbfb57b2f360fddacded76b5db9c4aa0d8c3b266b5b492842651593107999369c6acb7ac465e5e9818f0104d65a77f76e1949afcabf92ed0c7ecf793d908f5003bc8a311b46d4f01e05d034 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"言语总结","slug":"项目管理/3-生活学习/3-综合能力/言语总结","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E8%A8%80%E8%AF%AD%E6%80%BB%E7%BB%93/"}]},{"title":"0.基本概念和计算方法","date":"2023-03-01T03:55:57.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/资料分析总结/001.基本概念和计算方法/","text":" 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"资料分析总结","slug":"项目管理/3-生活学习/3-综合能力/资料分析总结","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/"}]},{"title":"","date":"2023-01-13T16:09:21.918Z","path":"wk/算法/基础算法/字符串匹配/002.字符集概念与认识/","text":"UnicodeUnicode仅仅只是一个字符集,规定了符合对应的二进制代码，至于这个二进制代码如何存储则没有任何规定。 它的想法很简单，就是为每个字符规定一个用来表示该字符的数字，仅此而已。 1. Unicode编码规范Unicode编码标准，可表示目前全世界所有语言的所有字符。同时兼容ASCII编码。 UCS 只是规定如何编码，并没有规定如何传输、保存这个编码。例如“汉”字的 UCS 编码是 6C49，我可以用 4 个ascii 数字来传输、保存这个编码；也可以用 utf-8 编码 3 个连续的字节 E6 B1 89 来表示它。关键在于通信双方都要认可。UTF-8、UTF-7、UTF-16 都是被广泛接受的方案。UTF 是 “UCS Transformation Format” 的缩写。 UCS2 2的16次方 65535. UCS4 2. utf-8问题： 计算机不知道 是 2 个字节表示的是一个字符，还是1个字节表示一个字符. 3. java中string 占用几个字节string采用灵活的 方式存储. 一个英文字符占1个字节, 而中文字符根据编码的不同所占字节数也不同。在UTF-8编码下，一个中文字符占3个字节；而使用GBK编码时一个中文字符占2个字节。","tags":[],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"基础算法","slug":"算法/基础算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"},{"name":"字符串匹配","slug":"算法/基础算法/字符串匹配","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"}]},{"title":"","date":"2023-01-13T16:09:21.917Z","path":"wk/算法/基础算法/字符串匹配/001.相关概念/","text":"算法 BF算法: brute force 暴力匹配算法。 O(mn) RK算法: (Rabin-Karp算法:人名命名) 引入hash算法. 群举 对 主串的所有子串. 与模式串做比较. 重点在于hash算法的优化. 难点：需要设计一个 可以应对各种类型字符串的hash算法. BM算法(boyer-moore): 性能是KMP的 3-4倍. 121. 日常开发中 可能很多BF的使用场景. 因为 日常开发中的 主串、模式串 都很短； 并且匹配上就终止. 所以大部分场景 执行效率高很多》2. Kiss设计原则. 朴素匹配 算法思想简单、实现简单、不容易出错. 串主串、 模式串 BM 算法 坏字符规则. 好后缀规则. BM算法核心思想是，利用模式串本身的特点，在模式串中某个字符与主串不能匹配的时候，将模式串往后多滑动几位，以此来减少不必要的字符比较，提高匹配的效率。BM算法构建的规则有两类，坏字符规则和好后缀规则。好后缀规则可以独立于坏字符规则使用。因为坏字符规则的实现比较耗内存，为了节省内存，我们可以只用好后缀规则来实现BM算法。 KISS（Keep it Simple and Stupid）设计原则。 解决问题方面 组织的培训、团队技能能力的沉淀有提升的地方 代码的质量把控，上线一个策略需要的支持, 什么流程比较合理. 其实是需要有人可以把控的. 比如 产品那边上线识别模型, 做策略. 有些不知道找谁. 模型怎么调度、需要谁支持. 怎么支持.","tags":[],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"基础算法","slug":"算法/基础算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"},{"name":"字符串匹配","slug":"算法/基础算法/字符串匹配","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"}]},{"title":"","date":"2022-12-22T04:59:22.397Z","path":"wk/平台工具/中间件_组件/规则引擎/规则引擎比较/","text":"Drools 一款老牌的java规则引擎框架. 十几年前. (十几年后还依旧保持着开源和更新:难得) LiteFlow 功能和特性也非常棒 很适合用在高复杂度的核心业务上。 同时又能保持业务的灵活性. 比较一下 2款框架, 都适合用在什么样的场景，有什么异同点，以及在相同的场景下表现力如何。 一、规则引擎的 作用和目的. 解决易变逻辑和业务耦合的问题。 规则驱动逻辑。 【随时热变更】 12相比较： 流程引擎(实现了将多个业务参与者之间按照某种预定义的规则进行流转，通常需要涉及到***角色信息***)简单来说就是，流程引擎主要解决业务在不同角色之间的流转问题，如请假流程，审批流程，往往要经过多个角色。规则驱动角色流转。 二、Drools、LiteFlow 异同点.都是优秀的开源框架,能把业务中的逻辑给剥离出来. 拥有自己表达式语法。 123451. Drools强调逻辑的片段规则化(可以 把核心易变部分写成一个规则文件)。 等同于原先写在java里的代码现在搬迁到了规则文件。规则文件里的代码全都是可以热变更的。2. 而LiteFlow是基于组件式的思想设计的。更强调组件的规则化，覆盖范围是整个业务，编排的最小单位是组件，规则文件用来串联组件间的流转。- 同时LiteFlow也支持片段式的代码规则化，因为LiteFlow也支持业务逻辑的脚本化。规则支持热变更。 三、评判一个规则引擎是否合格的主要因素有：123456789101. 有没有灵活的规则表达式来支持2. 规则和Java之间能否非常方便的联动3. API调用是否方便，和各种场景系统的集成如何4. 侵入性耦合比较5. 规则的学习成本，是否容易上手.6. 规则表达式是否有语言插件7. 规则能否和业务松耦合，存储于其他地方.8. 规则的变更能否实时改变逻辑9. 是否有界面形态来支持非技术人员的使用10. 框架的性能表现 四、规则表达式Drools的规则表达式为Java量身定制的基于Charles Forgy的RETE算法的规则引擎的实现。 五、 其他问题 面向的用户是谁？ 专业技术人员？ 运营人员？ 产品人员？ 风控产品、风控策略？. 规则引擎深度对比，LiteFlow vs Drools！","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"规则引擎","slug":"平台工具/中间件-组件/规则引擎","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/"}]},{"title":"","date":"2022-11-16T15:46:26.817Z","path":"wk/算法/基础算法/状态机/002.状态机匹配字符串/","text":"匹配实现. 匹配过程就是根据输入遍历图的过程, 这里DFA和NFA用了同样的代码, 但实际上因为DFA的特性是不会产生回溯的, 所以DFA可以换成非递归的形式 edge边、棱 作不及物动词时意为“缓缓移动；侧着移动”","tags":[],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"基础算法","slug":"算法/基础算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"},{"name":"状态机","slug":"算法/基础算法/状态机","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E7%8A%B6%E6%80%81%E6%9C%BA/"}]},{"title":"fasttext分类工具","date":"2022-11-14T14:55:57.000Z","path":"wk/算法/004.NLP/分类-fasttext/001.fasttext分类工具/","text":"训练12fasttext supervised -wordNgrams 2 -minn 3 -maxn 6 -dim 100 -input %s -output %o例：fasttext supervised -wordNgrams 3 -minn 3 -maxn 6 -dim 100 -input train_data -output contact_model 测试1fasttext test contact_model.bin test.data 数据格式12345# 训练数据我们 加个QQ , 方便 联系 __label__contact# 测试数据__label__contact 能 交换 一下 好友 吗","tags":[{"name":"NLP","slug":"NLP","permalink":"https://wiki.quartz.ren/tags/NLP/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"004.NLP","slug":"算法/004-NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/"},{"name":"分类-fasttext","slug":"算法/004-NLP/分类-fasttext","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/%E5%88%86%E7%B1%BB-fasttext/"}]},{"title":"有限状态机","date":"2022-07-29T14:55:57.000Z","path":"wk/算法/基础算法/状态机/001.有限状态机/","text":"有限状态及(FA). DFA NFA DFA/NFA区别与转换 DFA化简 DFA/NFA区别与转换DFA 是NFA的一个特例. DFA与NFA的区别在于，NFA的状态转换过程中可以有空串 所以NFA的不确定表现我们可以概括为： 多值映射 带空转移 因此在很多时候，我们都需要将NFA转换为DFA。 语言转化为正规表达式RE RE转化为NFA NFA的确定化&amp;DFA的最小化（状态转换图 状态转移矩阵）","tags":[{"name":"FA","slug":"FA","permalink":"https://wiki.quartz.ren/tags/FA/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"基础算法","slug":"算法/基础算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"},{"name":"状态机","slug":"算法/基础算法/状态机","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E7%8A%B6%E6%80%81%E6%9C%BA/"}]},{"title":"","date":"2022-05-07T16:07:33.185Z","path":"wk/平台工具/中间件_组件/组件安装配置/hotJar/","text":"title: hotjartoc: truetags: [组件安装配置] date: 2019-02-24 09:56:24hotjar官网功能简介 网页热图、鼠标轨迹记录、转换漏斗(识别访问者离开)、表单分析、反馈调查、收集反馈、问卷、招聘测试等注册 由于该网站使用的谷歌Recaptcha验证被墙，导致无法弹出验证码注册，因此需翻墙注册… 免费在线翻墙浏览器 UZER.ME云应用 ，注册登录后打开火狐浏览器即可 注册成功后以后就不需翻墙了安装使用 添加输入你要使用的站点地址 将安装代码复制至你的html页面中后，访问一下你安装好的页面，然后点击 I have installed the tracking code 按钮，接下来就可以自定义使用各功能的(某些需付费解除限制) 下面以添加使用Incoming反馈为例，按照步骤设置反馈的位置、颜色、语言、提示等即可，很简单的，不认识英文的去先把四级过了，最后记得点击激活 Active 保存即可","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"组件安装配置","slug":"平台工具/中间件-组件/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}]},{"title":"","date":"2022-05-07T16:07:33.181Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/rocksdb源码学习/002.Java版本支持/","text":"主要是源码java目录下的文件。 Cross-building 交叉编译。 java目录下的README.1make jclean clean rocksdbjavastaticreleasedocker 即可编译java版本使用rocksdb的jar.","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"},{"name":"rocksdb源码学习","slug":"平台工具/2-计算机基础/编程语言/C/rocksdb源码学习","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/rocksdb%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"}]},{"title":"","date":"2022-05-07T16:07:33.181Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/rocksdb源码学习/003.相关依赖/","text":"根目录下的 Makefile包含了很多第三方依赖库. 需要下载安装. 由于每次编译rocksdb 都需要执行安装。 所以统一安装好之后，不用重复安装。 bzip2http://www.bzip.org/downloads.html https://github.com/philr/bzip2-windows/releases zlib下载:https://github.com/madler/zlib/releases 安装 1234./configuremakemake checksudo make install 在make install这一步，由于要把zlib安装到/usr/local/lib 路径下，所以可能需要root 权限。安装成功后，可以在/usr/local/lib下找到 libz.a。 libz.a是一个静态库，为了使用zlib的接口，我们必须在连接我们的程序时，libz.a链接进来。只需在 链接命令后加-lz /usr/llocal/lib/libz.a 即可。 举个例子， 我们有一个使用zlib库的应用程序, 源文件只有一个：zpipe.c， 里面调用了zlib的接口，这时执行以下命令编译既可： 12gcc -o zpipe.o -c zpipe.cgcc -o zpipe zpipe.o -lz /usr/local/lib/libz.a snappy下载: https://github.com/google/snappy/releases 安装 12mkdir buildcd build &amp;&amp; cmake ../ &amp;&amp; make 使用cmake编译。 和zlib的编译方式有些不同。 make","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"},{"name":"rocksdb源码学习","slug":"平台工具/2-计算机基础/编程语言/C/rocksdb源码学习","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/rocksdb%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"}]},{"title":"","date":"2022-05-07T16:07:33.179Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/编译器/编译器了解/","text":"和java中的maven, 一样 c.c ++ 使用 make cmake 进行编译. maven 中的 plugins 类似 make中的 Makefile文件。 其中定义了一些可执行的 编译操作(类似install, package.) 比如rocksdb中的编译： 12345make jclean clean rocksdbjava 或者make jclean clean rocksdbjavastatic 在Makefile中定义了一些 具体的编译执行逻辑。 比如rocksdbjava 是用来 TODO, 执行流程是TODO 再比如 rocksdbjavastatic 是用来 TODO , 执行流程是 TODO.","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"},{"name":"编译器","slug":"平台工具/2-计算机基础/编程语言/C/编译器","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/%E7%BC%96%E8%AF%91%E5%99%A8/"}]},{"title":"","date":"2022-05-07T16:07:33.174Z","path":"wk/平台工具/[2]计算机基础/编程语言/Java/锁/","text":"史上最全 Java 中各种锁的介绍","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Java","slug":"平台工具/2-计算机基础/编程语言/Java","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"}]},{"title":"","date":"2022-05-07T16:07:33.158Z","path":"wk/算法/001.机器学习/NLP/NLP系列/002.BERT/","text":"背景自google在2018年10月底公布BERT在11项nlp任务中的卓越表现后. BERT（Bidirectional Encoder Representation from Transformers)就成为NLP领域大火、整个ML界略有耳闻的模型. 词向量模型— 这里主要横向比较一下word2vec，ELMo，BERT这三个模型，着眼在模型亮点与差别处。 传统意义上来讲，词向量模型是一个工具，可以把真实世界抽象存在的文字转换成可以进行数学公式操作的向量，而对这些向量的操作，才是NLP真正要做的任务。 因而某种意义上，NLP任务分成两部分，预训练产生词向量，对词向量操作（下游具体NLP任务）。 从word2vec到ELMo到BERT，做的其实主要是把下游具体NLP任务的活逐渐移到预训练产生词向量上。下面是一个大体概括，具体解释后面会写到。。","tags":[],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"NLP","slug":"算法/001-机器学习/NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NLP/"},{"name":"NLP系列","slug":"算法/001-机器学习/NLP/NLP系列","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NLP/NLP%E7%B3%BB%E5%88%97/"}]},{"title":"","date":"2022-05-07T16:07:33.149Z","path":"wk/项目管理/软件工程/Linux/Linux系统状态/","text":"内存使用linux free 命令下free/available区别","tags":[],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"软件工程","slug":"项目管理/软件工程","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"Linux","slug":"项目管理/软件工程/Linux","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/Linux/"}]},{"title":"","date":"2022-05-07T16:07:33.148Z","path":"wk/项目管理/软件工程/Linux/Linux网络命令/","text":"查看端口被哪个进程使用linux如何查看端口被哪个进程占用？","tags":[],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"软件工程","slug":"项目管理/软件工程","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"Linux","slug":"项目管理/软件工程/Linux","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/Linux/"}]},{"title":"","date":"2022-05-07T16:07:33.146Z","path":"wk/项目管理/软件工程/Linux/内存/002.JAVA进程占用内存查看/","text":"使用ps查看JAVA进程使用的内存和虚拟内存( Linux内存管理 )$ ps -p ${pid} -o rss,vszRSS VSZ7152568 17485844 linux top命令VIRT,RES,SHR,DATA的含义","tags":[],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"软件工程","slug":"项目管理/软件工程","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"Linux","slug":"项目管理/软件工程/Linux","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/Linux/"},{"name":"内存","slug":"项目管理/软件工程/Linux/内存","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/Linux/%E5%86%85%E5%AD%98/"}]},{"title":"","date":"2022-05-07T16:07:33.071Z","path":"wk/算法/001.机器学习/NLP/NLP系列/001.NLP基础任务/","text":"","tags":[],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"NLP","slug":"算法/001-机器学习/NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NLP/"},{"name":"NLP系列","slug":"算法/001-机器学习/NLP/NLP系列","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NLP/NLP%E7%B3%BB%E5%88%97/"}]},{"title":"","date":"2022-05-07T16:07:33.069Z","path":"wk/算法/004.NLP/003.知识图谱/学习结构/001.学习目录/","text":"001.学习目录.md 入门 什么是知识图谱 发展历程 有什么用 知识图谱构建","tags":[],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"004.NLP","slug":"算法/004-NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/"},{"name":"003.知识图谱","slug":"算法/004-NLP/003-知识图谱","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/003-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"},{"name":"学习结构","slug":"算法/004-NLP/003-知识图谱/学习结构","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/003-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E5%AD%A6%E4%B9%A0%E7%BB%93%E6%9E%84/"}]},{"title":"","date":"2022-05-07T16:07:33.069Z","path":"wk/算法/004.NLP/003.知识图谱/学习结构/002.什么是知识图谱/","text":"002.什么是知识图谱.md 知识图谱学习笔记 通俗易懂解释知识图谱 数据挖掘.","tags":[],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"004.NLP","slug":"算法/004-NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/"},{"name":"003.知识图谱","slug":"算法/004-NLP/003-知识图谱","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/003-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"},{"name":"学习结构","slug":"算法/004-NLP/003-知识图谱/学习结构","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/003-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E5%AD%A6%E4%B9%A0%E7%BB%93%E6%9E%84/"}]},{"title":"","date":"2022-05-07T16:07:33.062Z","path":"wk/平台工具/[2]计算机基础/编程语言/Python/http请求/get/","text":"","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"平台工具/2-计算机基础/编程语言/Python","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"},{"name":"http请求","slug":"平台工具/2-计算机基础/编程语言/Python/http请求","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/http%E8%AF%B7%E6%B1%82/"}]},{"title":"","date":"2022-05-07T16:07:33.062Z","path":"wk/平台工具/[2]计算机基础/编程语言/Python/pandas/001.README/","text":"","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"平台工具/2-计算机基础/编程语言/Python","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"},{"name":"pandas","slug":"平台工具/2-计算机基础/编程语言/Python/pandas","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/pandas/"}]},{"title":"","date":"2022-05-07T16:07:33.057Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/5.初始化内存分配/","text":"","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"}]},{"title":"","date":"2022-05-07T16:07:33.051Z","path":"wk/平台工具/中间件_组件/Elasticsearch/002.Es插件安装/","text":"","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Elasticsearch","slug":"平台工具/中间件-组件/Elasticsearch","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Elasticsearch/"}]},{"title":"","date":"2022-05-07T16:07:33.046Z","path":"wk/平台工具/MicroService/技术框架/RPC/thrift/thrift安装/","text":"thrift安装.md ubunut18(Dep)安装太麻烦,容器出错. copy build后的可执行文件 到/usr/local/bin/ 目录下即可. 可执行文件： 12345678910# 准备工作sudo apt-get install automake bison flex g++ git libboost-all-dev libevent-dev libssl-dev libtool make pkg-config# 下载[thrift](https://www.apache.org/dyn/closer.cgi?path=/thrift/0.11.0/thrift-0.11.0.tar.gz)# 安装./configure &amp;&amp; makemake install","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"RPC","slug":"平台工具/MicroService/技术框架/RPC","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/"},{"name":"thrift","slug":"平台工具/MicroService/技术框架/RPC/thrift","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/thrift/"}]},{"title":"OCR概述和认识","date":"2022-03-13T14:55:57.000Z","path":"wk/算法/003.图像识别/OCR/000.OCR概述和认识/","text":"什么是OCR文字识别, 计算机视觉重要方向之一. 自然场景文字识别: STR 文档场景文字识别: DAR 行业应用： 卡证票据信息抽取录入, 工厂自动化、政府工作医院等、在线教育. OCR面临的难点和挑战 - 文字表现多样性1.自然场景的文字表现变化很大 透视变换 尺度太小 文字弯曲 背景干扰 字体多变 都中语言 拍摄模糊 光照不足2. 文档场景的文字密集，需要结构化输出 表格 手写 褶皱 盖章 3. 垂类众多，数据不足 OCR商业方案很难解决OCR垂类场景的所有问题 需要一个OCR套件，打通落地过程中每个环境，包括 数据生产、算法选型和训练,以及模型预测部署. 药品铝塑日期识别、蒙语识别、标牌编号识别 4. 预测效率要求高 在cpu上可以运行，节约资源 在端侧运行，安全和方便部署 效率和效果的折中. 模型大小、推理速度 因此： 一个OCR的工具库是很有必要的。","tags":[{"name":"OCR","slug":"OCR","permalink":"https://wiki.quartz.ren/tags/OCR/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"003.图像识别","slug":"算法/003-图像识别","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"},{"name":"OCR","slug":"算法/003-图像识别/OCR","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/OCR/"}]},{"title":"","date":"2022-03-10T14:52:53.536Z","path":"wk/数据/数据存储/003.文档/","text":"文档HBase官方文档","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据存储","slug":"数据/数据存储","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"}]},{"title":"图可视化","date":"2022-03-09T15:55:57.000Z","path":"wk/算法/004.NLP/003.知识图谱/存储/nebula/003.图可视化/","text":"图可视化","tags":[{"name":"Graph","slug":"Graph","permalink":"https://wiki.quartz.ren/tags/Graph/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"004.NLP","slug":"算法/004-NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/"},{"name":"003.知识图谱","slug":"算法/004-NLP/003-知识图谱","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/003-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"},{"name":"存储","slug":"算法/004-NLP/003-知识图谱/存储","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/003-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E5%AD%98%E5%82%A8/"},{"name":"nebula","slug":"算法/004-NLP/003-知识图谱/存储/nebula","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/003-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E5%AD%98%E5%82%A8/nebula/"}]},{"title":"003.Netty线程模型","date":"2022-03-08T17:13:34.000Z","path":"wk/平台工具/MicroService/技术框架/Netty/003.Netty线程模型/","text":"背景1. Java线程模型演进单线程、多线程、线程池. 2. Reactor模型无论是c++还是Java、nodejs 编写的网络框架, 大多数都是基于Reactor模型进行设计和开发. Reactor模式基于事件驱动，特别适合处理海量的 IO事件. (1) Reactor单线程模型.由于reactor模式是 异步非阻塞IO, 所有的IO操作都不会导致阻塞. 理论上: 一个线程可以处理所有 IO相关的操作. 从架构层面看，一个 NIO线程 确实可以完成其承担的职责. 问题： 一个NIO线程同时处理成百上前的链路，性能上无法支撑。 瓶颈在于 海量消息的编码、解码、读取和发送（即便是NIO线程CPU负载100%）. NIO线程负载过重之后，处理速度变慢，导致大量客户端连接超时。重发，更加重了NIO线程的负载，最终会导致大量消息积压和处理超时； 可靠性问题： 一旦NIO线程意外跑飞，或者进入死循环，系统通信模块直接不可用，直接故障。 (2) Reactor多线程模型一组NIO线程处理IO操作【NIO操作指的是什么? read\\write?】. 一个专门的NIO线程-Acceptor线程用于监听服务端，接受客户端的TCP连接请求 网络IO操作 - （读、写 等） 由一个NIO线程池负责【线程池可采用标准的JDK线程池实现，包含 一个任务队列和N个可用的线程， 这些NIO线程负责 消息的读取、解码、编码、发送】 一个NIO线程可以同时处理N条链路，但是1个链路只对应1个NIO线程，防止并发操作问题. 重点： 大多数场景下， 此模型可以满足性能要求。 但是，极个别特殊场景， 一个Acceptor（NIO）线程 负责监听和处理所有的客户端连接可能存在性能问题。 例如： 并发百万客户端连接，或者服务端需要对客户端进行安全认证， 单独一个Acceptor线程 可能存在性能不足问题。 这时候，引入新的方式：Reactor 主从多线程模型。 Acceptor 接收到客户端 TCP 连接请求处理完成后（可能包含接入认证等），将新创建的 SocketChannel 注册到 IO 线程池（sub reactor 线程池）的某个 IO 线程上，由它负责 SocketChannel 的读写和编解码工作。Acceptor 线程池仅仅只用于客户端的登陆、握手和安全认证，一旦链路建立成功，就将链路注册到后端 subReactor 线程池的 IO 线程上，由 IO 线程负责后续的 IO 操作。 解决了 1 个服务端监听线程无法有效处理所有客户端连接的性能不足问题。 12345它的工作流程总结如下：从主线程池中随机选择一个 Reactor 线程作为 Acceptor 线程，用于绑定监听端口，接收客户端连接；Acceptor 线程接收客户端连接请求之后创建新的 SocketChannel，将其注册到主线程池的其它 Reactor 线程上，由其负责接入认证、IP 黑白名单过滤、握手等操作；步骤 2 完成之后，业务层的链路正式建立，将 SocketChannel 从主线程池的 Reactor 线程的多路复用器上摘除，重新注册到 Sub 线程池的线程上，用于处理 I/O 的读写操作。 Netty 线程模型bossGroup 线程组实际就是 Acceptor 线程池，负责处理客户端的 TCP 连接请求，如果系统只有一个服务端端口需要监听，则建议 bossGroup 线程组线程数设置为 1。 workerGroup 是真正负责 I/O 读写操作的线程组，通过 ServerBootstrap 的 group 方法进行设置，用于后续的 Channel 绑定。 IO操作有哪些。 OP_READ OP_WRITE OP_CONNECT OP_ACCEPT Reactor是针对这些 事件 分发到不同的线程来进行处理. 问题： 作为服务端 Acceptor 线程，负责处理客户端的请求接入 boss线程和work线程的代码是一致的。 怎么区分？ 是走的逻辑不同？？ NioEventLoop设计原理 串行化设计避免线程竞争：串行执行Handler链. 定时任务与时间轮算法 聚焦而不是膨胀：只负责提供和管理NIO线程 1. 串行化设计避免线程竞争2. 定时任务与时间轮算法Netty中，很多功能依赖定时任务，比较典型的有2种： 客户端连接超时控制； 链路空闲检测 常见的设计理念是在 NioEventLoop中聚合JDK的 定时任务线程池 ScheduledExecutorService. 从性能角度看不是最优：原因： 线程上下文切换，打破了串行化设计理念 存在多线程并发问题. 定时Task和IO线程NioEventLoop可能同时访问并修改一份数据 Jdk的sc..本身存在性能优化空间. 最早面临上述问题的是操作系统和协议栈，例如 TCP 协议栈，其可靠传输依赖超时重传机制，因此每个通过 TCP 传输的 packet 都需要一个 timer 来调度 timeout 事件。这类超时可能是海量的，如果为每个超时都创建一个定时器，从性能和资源消耗角度看都是不合理的。 时间轮算法调度： 根据 George Varghese 和 Tony Lauck 1996 年的论文《Hashed and Hierarchical Timing Wheels: data structures to efficiently implement a timer facility》提出了一种定时轮的方式来管理和维护大量的 timer 调度。Netty 的定时任务调度就是基于时间轮算法调度，下面我们一起来看下 Netty 的实现。 Netty 系列之 Netty 线程模型","tags":[{"name":"Netty","slug":"Netty","permalink":"https://wiki.quartz.ren/tags/Netty/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/Netty/"}]},{"title":"003.Netty线程模型和其他WebServer的比较","date":"2022-03-08T17:13:34.000Z","path":"wk/平台工具/MicroService/技术框架/Netty/004.Netty线程模型和其他WebServer的比较/","text":"大家都知晓的是 Netty比其他Server相对性能好，可定制化高. 那具体区别在哪里。 详细探讨下,上一篇详细讲了Netty的线程模型. 一、Netty线程模型.一个boss线程、32(核数2倍)个work线程. 下面看看其他WebSever的线程模型. 二、webmvc常见的 spring-webmvc. (用于 后端API、graphqlServer) 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;&lt;/dependency&gt; 1. tomcat线程NioEndpoint组件. Tomcat的NioEndpoint实现了I/O多路复用模型。 创建一个Selector, 在其上注册 事件，等待感兴趣的事件发生. 发生后（比如可读），就创建一个新的线程从Channel读数据. NioEndpoint包含LimitLatch、Acceptor、Poller、SocketProcessor和Executor共5个组件。 LimitLatch连接控制器，控制最大连接数，NIO模式下默认8192. AcceptorAcceptor实现了Runnable接口，因此可以跑在单独线程里，在死循环里调用accept接受新连接，一旦有新连接请求到达，accept方法返回一个Channel对象，接着把Channel对象交给Poller去处理. Poller本质上是一个Selector,跑在单独线程里。 Poller在内部维护一个Channel数组，它在一个死循环里不断检测Channel的数据就绪状态，一旦有Channel可读，就生成一个SocketProcessor任务对象扔给Executor去处理。 Tomcat的高并发设计NioEndpoint完成的三件事： 接受连接、检测IO事件和处理请求，关键是把这三件事情分布定制线程数处理： 专门的线程组去跑Acceptor，并且Acceptor的个数可以配置 专门的线程组去跑Poller，Poller的个数也可以配置 具体任务的执行也由专门的线程池来处理，也可以配置线程池的大小 Tomcat线程模型—全网最清晰的讲解 2. 实际线程情况下面是实际的线程情况： Catalina-utility(2个)[TIMED_WAITING][ at sun.misc.Unsafe.park(Native Method)]container-0(1个)[TIMED_WAITING][at java.lang.Thread.sleep(Native Method)]Live Reload Server(1)[RUNNABLE][at java.net.PlainSocketImpl.socketAccept(Native Method)]http-nio-8869-BlockPoller(1)[RUNNABLE][at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)]http-nio-8869-ClientPoller(1)[RUNNABLE][at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)]http-nio-8869-Acceptor(1)[RUNNABLE][at sun.nio.ch.ServerSocketChannelImpl.accept0(Native Method)]http-nio-8869-exec-213(10)[WAITING][at sun.misc.Unsafe.park(Native Method)] 解释： 3. tomcat线程和netty线程对比【重点】三、webflux1234&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webflux&lt;/artifactId&gt;&lt;/dependency&gt; 四、dubbo五、thrift","tags":[{"name":"Netty","slug":"Netty","permalink":"https://wiki.quartz.ren/tags/Netty/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/Netty/"}]},{"title":"","date":"2022-01-14T18:29:46.819Z","path":"wk/数据/数据处理/组件安装配置/数据qa环境搭建/001.Hive环境搭建/","text":"","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"组件安装配置","slug":"数据/数据处理/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"数据qa环境搭建","slug":"数据/数据处理/组件安装配置/数据qa环境搭建","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/%E6%95%B0%E6%8D%AEqa%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]},{"title":"","date":"2022-01-14T18:29:46.819Z","path":"wk/数据/数据处理/组件安装配置/Hadoop组件安装/6.sqoop安装配置/","text":"下载 https://sqoop.apache.org/ nearby mirror hive -e “load data local inpath ‘id_all.txt’ overwrite into table nlp.temporary_id”; hive -e “load data local inpath ‘/data1/nlp/liukuo/jd_data/jd_34levelcity/title’ into table nlp_dev.jd_title_0” CREATE TABLE nlp.test_dbs ( DB_ID bigint, DESC string , DB_LOCATION_URI string, NAME string , OWNER_NAME string , OWNER_TYPE string) ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\\t’ LINES TERMINATED BY ‘\\n’ STORED AS TEXTFILE hive -e “load data local inpath ‘/home/zhangquanquan/hive_dbs_table_data.txt’ into table nlp.test_dbs”","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"组件安装配置","slug":"数据/数据处理/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"Hadoop组件安装","slug":"数据/数据处理/组件安装配置/Hadoop组件安装","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/Hadoop%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85/"}]},{"title":"","date":"2022-01-14T18:29:46.819Z","path":"wk/数据/数据处理/组件安装配置/数据qa环境搭建/002.Hive-DDL记录/","text":"12345678CREATE EXTERNAL TABLE `nlp.ods_strategy_stats`( `content` string COMMENT &#x27;日志内容&#x27;)COMMENT &#x27;topic boss.nlp4.safe.strategy_stats 导入的hive表&#x27;PARTITIONED BY ( `ds` string, `hour` string)LOCATION &#x27;hdfs://dap/basicdata/kafka/boss/nlp4/safe/strategy_stats&#x27;) 1234567891011ALTER TABLE ods_strategy_stats ADD COLUMNS (uid STRING COMMENT &#x27;用户ID&#x27;);ALTER TABLE ods_strategy_stats ADD COLUMNS (bg STRING COMMENT &#x27;身份&#x27;);ALTER TABLE ods_strategy_stats ADD COLUMNS (us STRING COMMENT &#x27;用户来源&#x27;);ALTER TABLE ods_strategy_stats ADD COLUMNS (traceId STRING COMMENT &#x27;轨迹ID&#x27;);ALTER TABLE ods_strategy_stats ADD COLUMNS (sid STRING COMMENT &#x27;策略ID&#x27;);ALTER TABLE ods_strategy_stats ADD COLUMNS (rid STRING COMMENT &#x27;规则ID&#x27;);ALTER TABLE ods_strategy_stats ADD COLUMNS (sinkAction STRING COMMENT &#x27;处置动作&#x27;);ALTER TABLE ods_strategy_stats ADD COLUMNS (sinkResult STRING COMMENT &#x27;处置是否成功&#x27;);ALTER TABLE ods_strategy_stats ADD COLUMNS (action STRING COMMENT &#x27;原始动作&#x27;);","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"组件安装配置","slug":"数据/数据处理/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"数据qa环境搭建","slug":"数据/数据处理/组件安装配置/数据qa环境搭建","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/%E6%95%B0%E6%8D%AEqa%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]},{"title":"","date":"2022-01-14T18:29:46.819Z","path":"wk/数据/数据处理/组件安装配置/常用命令整理/001.hdfs常见命令/","text":"","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"组件安装配置","slug":"数据/数据处理/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"常用命令整理","slug":"数据/数据处理/组件安装配置/常用命令整理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"}]},{"title":"","date":"2022-01-14T18:29:46.817Z","path":"wk/数据/数据处理/Flink/flink整理/3.FlinkApi/","text":"DataStream启动很多算子。和其它教程，建议看官网的教程学习一下。然后总结下。 Apache Flink Documentation","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"Flink","slug":"数据/数据处理/Flink","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/"},{"name":"flink整理","slug":"数据/数据处理/Flink/flink整理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/flink%E6%95%B4%E7%90%86/"}]},{"title":"","date":"2022-01-14T18:29:46.817Z","path":"wk/数据/数据处理/Flink/flink整理/5.智能异常检测平台/","text":"如何基于Flink+TensorFlow打造实时智能异常检测平台目的：监控体系，用于提前发现问题降低损失","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"Flink","slug":"数据/数据处理/Flink","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/"},{"name":"flink整理","slug":"数据/数据处理/Flink/flink整理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/flink%E6%95%B4%E7%90%86/"}]},{"title":"","date":"2022-01-14T18:29:46.817Z","path":"wk/数据/数据处理/Flink/flink整理/4.Flink概念/","text":"无限数据源,有限数据源 DataStream EventTime 与 Watermark 123当我们说“统计过去一小时内点击量”，这里的“一小时”是指什么呢？ 在 Flink 中它可以是指 ProcessingTime ，也可以是 EventTime，由用户决定。- ProcessingTime：事件被处理的时间。也就是由机器的系统时间来决定。- EventTime：事件发生的时间。一般就是数据本身携带的时间。 一般需要基于业务的EventTime 来处理 1234// 1. 告诉 Flink 我们现在按照 EventTime 模式进行处理，Flink 默认使用 ProcessingTime 处理，所以我们要显式设置下env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);// 2. 第二件事情是指定如何获得业务时间，以及生成 Watermark。 1Watermark 是用来追踪业务事件的概念，可以理解成 EventTime 世界中的时钟，用来指示当前处理到什么时刻的数据了。由于我们的数据源的数据已经经过整理，没有乱序，即事件的时间戳是单调递增的，所以可以将每条数据的业务时间就当做 Watermark。这里我们用 AscendingTimestampExtractor 来实现时间戳的抽取和 Watermark 的生成。 文件来模拟真实数据源,本地验证 Flink 应用程序正确性的常用方式 Flink 零基础实战教程：如何计算实时热门商品 5分钟滑动一次，查看指定动作（开聊，发消息）最多的用户，推出来。【important】 设置一个阈值，可以调整，比如3分钟开聊最多的。 然后过滤。过滤正常的用户。 状态特征。 实时特征的存储。 安全的一个方向。","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"Flink","slug":"数据/数据处理/Flink","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/"},{"name":"flink整理","slug":"数据/数据处理/Flink/flink整理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/flink%E6%95%B4%E7%90%86/"}]},{"title":"","date":"2022-01-14T18:29:46.816Z","path":"wk/数据/数据处理/Flink/flink技术点/窗口触发器与Evictors/","text":"title: 3.窗口触发器date: 2020-03-20 11:55:57banner:tags: categories:窗口触发器与Evictors 需要指定Time Notion. Apache Flink：使用EventTime与WaterMark进行流数据处理 Flink学习资料:Flink 灵魂两百问，这谁顶得住？ 状态编程由于同样引入了时间，我们可以想到，最简单的方法其实与之前的热门统计类似，只需要按照用户ID分流，然后遇到登录失败的事件时将其保存在ListState中，然后设置一个定时器，2秒后触发。定时器触发时检查状态中的登录失败事件个数，如果大于等于2，那么就输出报警信息。 CEP 定义匹配模式 在数据流中匹配出定义好的模式 Flink 灵魂两百问，这谁顶得住？ 1小时内一个ip下的用户数 一分钟内一个ip下的用户数","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"Flink","slug":"数据/数据处理/Flink","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/"},{"name":"flink技术点","slug":"数据/数据处理/Flink/flink技术点","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/flink%E6%8A%80%E6%9C%AF%E7%82%B9/"}]},{"title":"","date":"2022-01-14T18:29:46.816Z","path":"wk/数据/数据处理/Flink/flink整理/1.Fink介绍/","text":"Flink的一些特性stream and batch processing, sophisticated state management, event-time processing semantics, and exactly-once consistency guarantees for state。流和批处理、复杂的状态管理、事件时间处理语义，以及对状态的一次一致性保证 can be deployed on various resource providers such as YARN, Apache Mesos, and Kubernetes but also as stand-alone cluster on bare-metal hardware. Configured for high availability, Flink does not have a single point of failure可以部署在各种资源提供者(如纱线、Apache Mesos和Kubernetes)上，也可以作为裸机硬件上的独立集群。配置为高可用性，Flink没有单点故障 Flink has been proven to scale to thousands of cores and terabytes of application state, delivers high throughput and low latency, and powers some of the world’s most demanding stream processing applications.Flink已经被证明可以扩展到数千个内核和tb级的应用程序状态，提供高吞吐量和低延迟，并支持世界上一些要求最高的流处理应用程序。 Use Cases 常见应用程序类型 Event-driven Applications Data Analytics Applications Data Pipeline Applications Tutorial 一.事件驱动的应用程序 反欺诈 异常行为检测 业务流程监控 二.数据分析应用程序三.数据管道应用程序","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"Flink","slug":"数据/数据处理/Flink","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/"},{"name":"flink整理","slug":"数据/数据处理/Flink/flink整理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/flink%E6%95%B4%E7%90%86/"}]},{"title":"","date":"2022-01-14T18:29:46.816Z","path":"wk/数据/数据处理/Flink/flink整理/2.Flink学习资料/","text":"Tutorials Windows flink learning blog flink-tensorflow 不错的blog:微服务\\实时特征系统 美团技术团队:流计算框架 Flink 与 Storm 的性能对比 Service Mesh：下一代微服务 http://servicemesh.cn/ Istio知识图谱 v0.1 发布及社区图书孵化","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"Flink","slug":"数据/数据处理/Flink","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/"},{"name":"flink整理","slug":"数据/数据处理/Flink/flink整理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/flink%E6%95%B4%E7%90%86/"}]},{"title":"","date":"2022-01-14T18:29:46.814Z","path":"wk/数据/数据处理/DataStore/Mysql/Mysql常用sql/","text":"12345678select element_info,GROUP_CONCAT(`user_id`) as user_list,bg,user_source,user_count,type_id,date8,model_id,freezed_status,add_time,admin_name,update_time From ( select bg.element_info,bd.user_id,bd.bg,bd.user_source,bd.add_time, bg.user_count,bg.type_id,bg.date8,bg.model_id,bg.freezed_status,bg.admin_name,bg.update_time from badgang_detail as bd left join badgang as bg on bd.count_id = bg.id ) as a group by element_info limit 10 ;select element_info,GROUP_CONCAT(`user_id`) as user_list,bg,user_source,user_count,type_id,date8,model_id,freezed_status,add_time,admin_name,update_time From ( select bg.element_info,bd.user_id,bd.bg,bd.user_source,bd.add_time, bg.user_count,bg.type_id,bg.date8,bg.model_id,bg.freezed_status,bg.admin_name,bg.update_time from badgang_detail as bd left join badgang as bg on bd.count_id = bg.id ) as a group by element_info 1310754318@qq.com","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Mysql","slug":"数据/数据处理/DataStore/Mysql","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Mysql/"}]},{"title":"","date":"2022-01-14T18:29:46.812Z","path":"wk/数据/数据处理/DataStore/Kafka/kafkaListener/listener/","text":"Spring-Kafka（八）—— KafkaListener定时启动（禁止自启动","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Kafka","slug":"数据/数据处理/DataStore/Kafka","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Kafka/"},{"name":"kafkaListener","slug":"数据/数据处理/DataStore/Kafka/kafkaListener","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Kafka/kafkaListener/"}]},{"title":"向量点乘与叉乘的概念及几何意义","date":"2022-01-12T15:55:57.000Z","path":"wk/算法/001.机器学习/002.数学知识/线性代数/向量点乘与叉乘的概念及几何意义/","text":"向量点乘与叉乘的概念及几何意义 点乘的结果是点积，又称数量积或标量积 代数角度： a.b = x1x2 + y1y2 + z1z2 几何角度：点积 是两个向量的长度 与它们夹角余弦的积. 代表 a 早b 方向上的投影 与 b 的长度的乘积. 反映了两个向量的相似度, 结果越大越相似. 基于点积可以判断这两个向量是否是同一方向，是否正交垂直，具体对应关系为： 点积大于0, 则方向相同, 夹角在 0 ~ 90. 点积等于0, 则正交, 相互垂直 点击小于0, 则方向基本相反, 夹角在90到180之间. 点乘代数定义 推导几何定义：（常用来求向量夹角）","tags":[{"name":"向量","slug":"向量","permalink":"https://wiki.quartz.ren/tags/%E5%90%91%E9%87%8F/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"002.数学知识","slug":"算法/001-机器学习/002-数学知识","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"},{"name":"线性代数","slug":"算法/001-机器学习/002-数学知识/线性代数","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/002-%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"}]},{"title":"2.Jupyterlab开发环境搭建","date":"2021-10-28T14:55:57.000Z","path":"wk/算法/001.机器学习/001.工作环境搭建/002.jupyterlab开发环境搭建/","text":"https://www.cnblogs.com/realwuxiong/p/14139194.html jupyterlab开发环境搭建(支持gpu)目标： 创建一个 jupyterlab. 包含以下环境 支持gpu环境. jupyterlab 支持python java语言. 1. pip安装jupterlab123456# 1. 安装/更新pip install --upgrade jupyterlab \\-i https://mirrors.aliyun.com/pypi/simple/# 2. 查看版本pip show jupyterlab 2. jupyterlab 启动12345# 先调到python环境（python3.7;tensorflow2.11）（或者选择 ml2.7;tensorflow 1.4.0）conda activate ml3.7# 启动(重要)cd /mnt/d/jupyter/quanoc &amp;&amp; nohup jupyter-lab --ip 0.0.0.0 --no-browser --allow-root &gt; jp_nohup.out 2&gt;&amp;1 &amp; python版本管理见：通过conda管理多个python版本 tensorflow 对应的cuda版本 3. 使用脚本管理jupyter-lab脚本名称：start_jupyter.sh1234567891011121314#!/bin/bash# Define the command to start Jupyterstart_jupyter() &#123; nohup jupyter-lab --ip 0.0.0.0 --no-browser --allow-root --notebook-dir=/home/quanoc &gt; jp_nohup.out 2&gt;&amp;1 &amp; &#125;# Check if Jupyter process is runningif pgrep jupyter &gt; /dev/null; then echo &quot;Jupyter is already running.&quot;else echo &quot;Starting Jupyter...&quot; start_jupyterfi 其它(废弃)搭建 notebook123mkdir -p /mnt/d/jupyter/quanocmkdir -p /mnt/d/jupyter/quanoc/.jupyterchmod 777 -R /mnt/d/jupyter/quanoc","tags":[{"name":"jupyter","slug":"jupyter","permalink":"https://wiki.quartz.ren/tags/jupyter/"},{"name":"开发工具","slug":"开发工具","permalink":"https://wiki.quartz.ren/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"001.工作环境搭建","slug":"算法/001-机器学习/001-工作环境搭建","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/001-%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]},{"title":"001.tensorflow学习.md","date":"2021-10-28T14:55:57.000Z","path":"wk/算法/001.机器学习/003.框架工具/001.tensorflow认识/","text":"1 Tensorflow介绍1.1 什么是TensorflowTensorFlow是一个开源的机器学习框架。 提供了一个强大的工具集，用于构建和训练各种机器学习模型，包括神经网络。 TensorFlow的核心是计算图（Computational Graph）和张量（Tensor）的概念，它允许用户在高度灵活和可扩展的环境中定义和运行各种机器学习任务。 1.2 Tensorflow版本选择 TensorFlow 1.x: 这是TensorFlow的早起版本， 具有广泛的应用和成熟的生态系统。 与2.x有一些语法和概念上的差异!. TensorFlow 2.x: 当前的主要版本，有重大的改进和更新TODO。 具有更简介的API、更好的性能和更易于使用的特点。 兼容了Keras，使得模型构建更加方便。 1.3 Tensorflow与LLM在LLM中，PyTorch和TensorFlow这两个深度学习框架起着至关重要的作用。 它们为构建、训练和部署LLM提供了必要的工具和基础设施。 提供了高级的API和工具，使得人们能够更容易的构建复杂的神经网络结构，如Transformer，这是LLM的核心组成部分。 自动微分功能也大大简化了梯度计算和反向传播的过程 分布式训练： LLM通常需要大量的计算资源。通过分布式训练，可以将模型的训练任务分配到多个GPU和TPU上，从而加快训练速度。 Tensorflow认识tensorflow官网：轻松创建机器学习模型 借助 TensorFlow，初学者和专家可以轻松创建适用于桌面、移动、网络和云端环境的机器学习模型。请参阅以下几部分，了解如何开始使用。 关键词：TensorFlow 基础知识、创建机器学习项目、TensorFlow.js 、部署现有模型、移动设备和边缘设备、针对生产 移动设备和边缘设备：使用 TensorFlow Lite 在 Android、iOS、Edge TPU 和 Raspberry Pi 等移动设备和嵌入式设备上进行推断针对生产：使用 TFX 部署可用于生产环境的机器学习流水线，以用于训练和推断。 主要特点和功能（1）计算图TensorFlow使用计算图来描述机器学习模型。计算图是一种图形表示，其中节点表示操作，边表示操作之间的数据流。这种图形模型使得 TensorFlow 能够高效地优化计算，分布式执行，以及方便地在不同平台上运行。 （2）张量张量的概念是由 Google Brain 团队在开发 TensorFlow 框架时引入的术语”张量”最早由德国数学家奥古斯特·费迪南德·莫比乌斯（August Ferdinand Möbius）在19世纪中期引入 然而，在机器学习和深度学习的上下文中，张量的概念经常被引用，它在这里更多地是指多维数组或矩阵的概念。 张量是 TensorFlow 中的核心数据结构，它是多维数组，类似于 NumPy 中的数组。张量在计算图中流动，传递数据和梯度。 张量是一种广义的矩阵，它可以是零阶（标量）、一阶（向量）、二阶（矩阵）等。在深度学习框架中，例如 TensorFlow 和 PyTorch 中，张量是基本的数据结构，用于表示和处理多维数据。 具体到 TensorFlow，张量的概念是由 Google Brain 团队在开发 TensorFlow 框架时引入的。TensorFlow的名字中的 “Tensor” 指的就是这个多维数组的概念。TensorFlow的计算图模型使用张量作为数据的基本单位，计算图中的节点执行操作，边表示张量之间的流动关系。 在线性代数中，术语 “向量” 通常指一维数组，即一个包含有序数值的集合。在这个上下文中，”向量” 与 “一维数组” 的概念是等价 然而，在机器学习和深度学习的上下文中，术语 “向量” 的使用可以更为广泛，不仅指一维数组，还可能指包含多个元素的任何数组，即多维数组。在这个语境下，一维数组被视为一种特殊情况，即长度为 1 的向量。 一维数组（一维向量）、二维数组（二维向量）、多维数组（多维向量）。 在深度学习中，尤其是使用框架如 TensorFlow 或 PyTorch 时，通常将这些多维数组统称为 “张量”。因此，术语 “向量” 在这个上下文中可能包括一维、二维，乃至更高维度的数组。 （3）灵活性TensorFlow提供了灵活性，允许用户在不同的层次上构建模型，从高级的 Keras API 到低级的 TensorFlow 操作 (4) 自动求导TensorFlow提供了自动求导的功能，简化了梯度计算的过程，这对于训练神经网络是至关重要的。 （5）跨平台支持TensorFlow支持在多种硬件和平台上运行，包括 CPU、GPU 和 TPU（Tensor Processing Unit）等。 （6）大型社区和生态系统 Tensorflow模型训练训练步骤主要分为以下几步：（以自定义训练: 演示为例） 数据集（导入） 模型构建（使用 Keras自定义创建神经网络模型：1个输入层、2个隐藏层和1个输出层） 训练模型（损失和梯度函数、优化器、学习率、随机梯度下降-SGD等 todo） 评估模型的有效性 模型使用 TensorBoard呈现进度. 相关概念损失和梯度函数、优化器、学习率、随机梯度下降-SGD TensorBoard、模型评估 todo：用tensorflow将 https://www.kaggle.com/code/novatensor/digit-rec/edit 重写. PyTorch 和 TensorFlow的主要区别在于：1. PyTorch 使用动态计算图，运行时构建，更加灵活；2. PyTorch 的 API 设计更加直观和简洁.. 资料TensorFlow 模型建立与训练google.tensorflow教程 Keras和Tensorflow：Keras 提供了一个简单易用的接口，适合快速原型设计和实验，而 TensorFlow 则更适合对模型进行定制和优化，以满足特定需求。由于 TensorFlow 集成了 Keras，因此在许多情况下，两者可以结合使用，根据需要灵活地切换。 Docekr镜像相关(使用)tensorflow/tensorflow:latest-gpu命令行模型调试1nvidia-docker run -it tensorflow/tensorflow:latest-gpu tensorflow:latest-gpu-jupyter可用于开发.12345678nvidia-docker run -it -p 8888:8888 tensorflow/tensorflow:latest-gpu-jupyternvidia-docker run --name vk-jupyter -e JUPYTER_ENABLE_LAB=yes --restart=always -d -p 8888:8888 -v /mnt/d/jupyter/quanoc:/home/quanoc tensorflow/tensorflow:latest-gpunvidia-docker run --name vk-jupyter -e JUPYTER_ENABLE_LAB=yes -d -p 8888:8888 -v /mnt/d/jupyter/quanoc:/home/quanoc tensorflow/tensorflow:latest-gpu 面试视角解释tensorflow 定义 用途 核心概念 原理：张量、计算图的定义 和 实现 特性：自动求导、等 实践：使用方式、常用的python类、 怎么工程化？ 拓展：构建形式(桌面、移动端、网络与云端) 模型加速与压缩 思维导图 Tensorflow学习","tags":[{"name":"ML","slug":"ML","permalink":"https://wiki.quartz.ren/tags/ML/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"003.框架工具","slug":"算法/001-机器学习/003-框架工具","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/003-%E6%A1%86%E6%9E%B6%E5%B7%A5%E5%85%B7/"}]},{"title":"2.CUDA相关概念介绍","date":"2021-10-28T14:55:57.000Z","path":"wk/算法/006.算法工程/Infra/002.CUDA相关概念介绍(待完善)/","text":"37df3367815823fa6a74ef48ceb506651b530cc10cc2698c2e8859f8dc34f1703343aeebef6ad62fa25757bb31249f60dbabf0027e0f17ea80604f8640eae52f3c282faa63d8ed58e45be63eef5f6039f91aebea80187f0b62f05c6c14b58b0b5ae34e6693af2fc77ab50cae45d720cabc30989b17c28629af9711728bd730e5da45b4727781cb442fa3bf58d1baf45727dac63d41792db2eb3c2f671f9e7db1c7de7359a54a9734c8d32d72dcf4c4200b6e243e093a259f2cb794097d8b68e3dab5633c5ececb41d3327f90023793832b865884fc4469a77f6ed96e9ba219f58cd22b85c971b4f08bf781d7a822a27e9470b72313b94263ac99755cb0cb9925c1eab1a49bda9969ca50a393825a1de7a4458d2e470da07cea590240ae52aa71896a712beb38fc6e64da4f08ea69cc768a387765b42b9bb2df1dae5d5832f29ceea1f2206aeab34009870e2d65ed4727e6ea7d2c3432d731d40509dc3c7d6ced0b38e30d2af3bc58ceea604c32c6eabbd8aee35e96422ead9daf86d36bf71e583b3083c287a18b3ae522d6f015e8994c0e8e116e1be298a287b60be4efd0ae65fa4ba92e2277327735d3406aae35b61a6950a2096d55a7dda19e9cc780fd0de70f819525b9cb0d576b29c594768988318a0b5b23a1295848be766348e913817715e5e5b63e8fb19be828dc52d438eb7132115df155c48c3436059cfc7ff88753a3fe41ae729f40bc5525af4c1c07d48420f5ba7aa8c13ab166a32f60bad50bc62813c1ded0f733a5fa513d62d59b71baa708d1fc3a6721a425c54eaebe3974d4eeb5fc40e74dd849d8d1792c26f2c8dc11c87786abee9f695f6c333d4e09741930aac2d1623c6c83c167d32c3b17942bdc7343c470d888e852bdf5fe5794650615d71da6739a6aeaf5d3deab517a61007dbacd2297603580d9130cbc1239cc33bff063644340c08a17bbf190acb99d2f650521223368eb5433a5d6b4f62710637b1cda18ad4d8a498863b10f23dffec13b76841b3e88c2e502f6b151ff4e7d185f8cba6bdff3dc4f47f20f32a270aa643fff27409164a0a3cd893be1f14900f8551b20d2c0a85923455872886361d848bb256c424421da0468e8dc5bab90b96049f85347d7214568dfbe6ff56574a5b36a88bd03aa671d9dcb8df5540c68656717e8f683d1b52eb17729e0d892217a86d3f4fc480f9d538a3458a541581c29160289fc60741afda0a07aef1d3c9c6135042f0188a78cd26d3ed85798bb05b4298316413fe4b7ea22701719d64fc1128fe23afffad4813655864152a66c3abbd536184d8ba9d591b48dea553f0e361c4ccf2239458346ab1caa952a05b12ff96c560d2a047154884c0f492f968fbc340cc6c547b5f05754923cb619d641ebd6ed961b9c3d257d9a5cbaf07b0b2eda4a7a485219f0ce4744bfcf7ece61ca87cc3c87a9305413cadc0df26be9fa048c0a7c32e70b343335533d26e6d0df1207355eff6b07ca6d04f1b54eac1e11877f98ac37252580c645cfd97026d97538e941c0b2e77a3116517d237134d62d1b2dcee1eeec96e468fb3cad3f692675eb51a5ebd900f28d92b3181238efb74532c73f7bb2e07b58371cafe26134d1977ce5ab8d4d48f2f29cdf383dcebc2080e43a30a0b8f2b9c8f36aaacf5531db1172e5919c9cf9b23e0bf28e0bb85f273eb106f7889b8b736c209a8a70839b74d27b3bc3a2f1eae6f8e0fba7d6bc928b8f2886e3fc31d845f493c959f281d3b3a66709780eea1f414d9ff6777899acf4f81119b8979abea2904bed6ff65a9736bbf01d40fdd3fc13e91fc3210621eea6572eb68d184ccc48dd7c77fe976f77bb0f6e631d3e566b8a02c6de4e35e1a068a6de6c05a4a94bae8f92a1ad322f860d12e7953ec708e3dea3380d7d99e3f280d22ea0774b7197b89ede7c1c636cc4dba311545b6f1c6a615871431627634591b9e5c0dad696c5c4e802a9c780541f8238f0c436cd803ec9ba9751a6950fea51b99c57cad90246025f1ce36723482a21ab9e2966c0e6b82dfdafc563ebb41d6a83093dddca6a9a82d9fb96a1cf79dd71c5ab0199050134ff76594198f0ec9706cb94aac7dfa6ca9be9813e2f0848e44bfce7fe150f77dacf8ad9c3039bae352d47f1e5fccd87949da66581ab854490a3d6cef4b4671732b5cf817ef9d8f15d6872a80d69b4015270949a4188d05098fab293aba3410d30e60e649845f328aab365ccd429ba8d53b238d1fd62025816a20a00f9e457646c0af9eb0174df9984675bdafcdf63d3231d380bd2224a4dea4ffc8c304e2bd9e176f122b5e795567753b5bfb7150d101b4a5f3921216b8db181b58dcbb089888bb397c39c2102811da971b7733e9baaf5c8576895d3748414a14b4a1884164444a5fe9d9b83b58deac20dd8c9ac3fbac120301757617ae0b10e3b0a205e8925ad0f14dd0e618dd2b99a3c3a09ad5d0bb5bdcc61bb15b97fe0fec30252c71edb6d01337144d3c3377898ca167ccfdfb8b18e0e1c09d5272acbfc8a075a9ba2cd3d7c6a2e7e7d15998e5bf0ed2b6b09c7cf2b24c333ee65c3a54c7ebed56442ab4cdc1393c447fc190aa88b9e2653e45895e607eb1ceebf8e2648ebf7d3a9fbfeecc2fa6759a0813367a59ed9731fb0167e627b09892ec6c94e0f2bc0d795f4922baa0e751640559d593bef4dfb4fc6d77fde49ec0ef4296eaade8c0a1094015f155dcb302e3060a7d875eca5437319853d73887d27adb01da74b530687bdeaaf655081539be7b0f50b6b2907dd0577d2ff0e000d041b80e94e191acb6d319fcc7ef42695d6d10013eb8b7cfd511f8bfee30cb9c50c47eabf839f278225a488d670f5aab4fc4a2a831a152f7c91a6e5eeaa6d62657c5847ca7ee0afc2007380d1fd69ac2f1139bae43d128b6e8ec8c9410fbbffa6d66dbae74a1fa22cddd62987db214e35ee27619e33f938c3d7f493188821712d8045f67040c0cf014a5d54bfea3bd5f8b4ec17d4957aed8e90aeb61f33a97b22cfe782b6fc96cb29c090eb76b844f183790ef926324303815cc283e7c56e57bbe5d8a33183cde413883acf59849a0caf0c6a5af2dca8a53aaffd449465ebac48bbcc09f346007d5b5ac18c2e10275e8ad80c79d32ac55e7af858a2702826a4f55799db5e62c2eddb15438556298ac910991fac77a0dc6207f21f496fa08e2b38ba59b8967847d63d2255013b89f24a5355ed7072c3cbbdc5d03dc67c8beccde7776e3d4555aec7b039cb63c6c11391ff34900531f590dccc723e03895855ba814bfe65ec846b5d47a04e1bfb59749dfa0f76a234652fe3b3459daf24348e589adbcda90a148504fa194d6e2dd7ba9caacbc10357e26066cfc35df5c85edfc936404c9e85e448c987ae6492b4767a49aea61088eca106eb258ff9ea9b4fac65888a2f134cbbc8b31e2865db4e9d6990657d80be3d2327a95dc1fe491ab15c3e437cebeee645893c6239d64cf008aeec749590297c13b70825ae9d20b08a49225b44d066957acc2272e4a40e212ef889a160be5920fa02dac18e7161353fc5b997f6f7c2b12985b1aac03e0b0e947bd956a5583d8576f3051c6f180b836ec0459e750c892c3c0f3d0870293196733bdc9f79c2404a2d6dc58f451006eab0cb45976f636af6459751206396a992e8d0ee97717afbe8de577118144901ab4121686a6e84e9512d1d8aea36950f3dfeaa4d9c871ce2e56c5b5863a68f3662b548a477eeb1813b9995a80a2c0b8b445333f116f0739d9e406a8502fa1731e02a8d253f9a9b1e08377e228f3156c23fc29a04d7c3bf6df64e3e764395256f9494dd156018601e4c51efb84a5fd49a27496998754462b945e5aa13ecfad1d2a4e8b227a377f61a027eccfb46554e2fca83249aaab4ca08f7225d171ca5f239bca36d8bd5e2bcaa682a70fb7d342467efe3704861b9fe224a9cf2c4dc79dc1239b0ce6d6ff6b1287c667efe310de9fb1086027146570b0ede4dbae891100aaf70fde6c57c9a904bdb4cb57a91996b1097914e0cb29c5c2a74b1086560ace4813cd02c9def888d8bf7f6f58356c548b17a1c0b109e8d49fe4dcbeae57b3f86255eee84e8955e58413e3a9480b8f23bdc3232ba4bd6ebf49133b29af705820218a8429c61fafc1c86bdcde3d9863d9c3987d369698ff65c4294f6c3687ae1e0d8448d824247f5c73b929418f9d4e2b60a8044206f2bad863fe607c915f155c1b2ad6b47df9fb61ca14e3573044a24cebb7bf9caccb5e696b8429800de31127cf38e99fbdf15f16162a5fb807e7ec066381ec87eb9dc016a6baf237b4d7df9e84b26a4e4c5af9bf72cb411287a8b1ad1cff30b38f2d0139d596a111e4010a4a8d8e7ed2531cc0f59db513269750a22f85f623253a2f07290eb8080a544fc6d1a2efe9232d780d16dec4dee5ae1fc5059cf37a7e7a620350f9a571248ff5c86a9dceb972e25916aa6d8ce02857e017db39418d31583a3503395deb4d818124c966147c55679f5f3772f89ba8e3ba51a4b6c3101586b659606547df2ce17310f025747836cdd1dbf5f2365676a608d9c5c056eae5ee137f7c8e47c3f7a516f03c6062f7720eed0556df47b7c08f0a10237ba3eea7c00636e6f41a6258fce3eacab917d4206a478c75fac3467dda13aa2f95fc9a12cc1b67c7e17c1a190520cc72c380ffde726488047b77c950b4c319f0cdbf909083af1ae8119a934cb0fd2e33916d5fa31a7708200ba4ac13ee81384f28b4954e7b581427d307d88a89be7f756572e10906e86db8845941e99150bc2ba1dc41cd1e2e533e3d111bdf59198c28ec39fbbbc988dd3d07425a1dc261671729739cd769284b93e72460bde8678cecdfe6ce8ac8717f5365fcfa145e0f15805bd860fdf6b48865a055c250199803894ad770ac368d7a007ce23bb9c2646f2b3ffc5ee3edb8b502a40714b2d618088d3ed9253649d19eb9e1d68f1d8daf475f372813bbf72cf75689d399cd0f05d16e281819f1980810398df3a56374dcbf3353986e5ad866c0da96e8f06505663323fd3304ef7082e26cbc953baa0c54468fca287470dac647052b787bebee104c569d7a128f4f46b67e7136bcf94ea143d3b247facc82c64af53357c64e4d1ff90698e276be1bccaa36c3b0f1fb6d0b63c0af3 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"cuda","slug":"cuda","permalink":"https://wiki.quartz.ren/tags/cuda/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"006.算法工程","slug":"算法/006-算法工程","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/"},{"name":"Infra","slug":"算法/006-算法工程/Infra","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/006-%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B/Infra/"}]},{"title":"查看java对象大小","date":"2021-09-30T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Java/JVM/001.Java对象/","text":"查看java对象大小.ObjectSizeCalculator.getObjectSize(obj) https://www.cnblogs.com/ulysses-you/p/10060463.html","tags":[{"name":"Java","slug":"Java","permalink":"https://wiki.quartz.ren/tags/Java/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Java","slug":"平台工具/2-计算机基础/编程语言/Java","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"},{"name":"JVM","slug":"平台工具/2-计算机基础/编程语言/Java/JVM","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/JVM/"}]},{"title":"","date":"2021-09-08T15:24:41.984Z","path":"wk/平台工具/MicroService/技术框架/Netty/疑问/","text":"为什么 ChannelOutboundInvoker 有用 ChannelPromise, ChannelPromise.. Inbound没有. 理解应该是，如果outbound写出去了. 就isDone 了. url = “http://ip:port/fabio/extract“requests.post(url=url, data=post_data,headers={‘Content-Type’:’application/json’})","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/Netty/"}]},{"title":"什么是模型","date":"2021-09-02T14:55:57.000Z","path":"wk/算法/001.机器学习/模型/什么是模型/","text":"机器学习中的模型到底是指什么？ 生活中有些场景中的逻辑结构可以叫做模型. 但在计算机领域 知识领域的模型 我们认为是 模型指机器学习中的模型。 机器学习分为有监督学习、无监督学习。 我们把讨论的范围限定在最常见的有监督学习框架中。 机器学习模型，本质上是一个函数，其作用是实现从一个样本x到样本的标记值Y的映射，即f(x) -&gt; Y. 当然这样说太笼统了，事实上机器学习模型需要在给定样本集合 以及其对应标签 的情况下，用假设已知的函数形式 , 尽可能拟合客观存在的映射函数 ，并且保证 在未知同分布样本上具有尽可能相近的拟合能力。在上述描述里，假设已知的函数形式其实是所有有监督模型的前提基础，因为如果模型的形式不做假设的话，是无法构建任何模型的。在形式已知的情况下，数学模型里势必有一定数量的参数是不确定的，因此机器学习的过程实际上就是通过已知的样本通过一定的方法确定未知参数的过程。最后，模型需要不仅在已知样本上表现优秀，更要在未知样本上具有相近的表现，这就是模型泛化型需要讨论的问题。 建模和模型 建模的目标：解决什么样的问题 收集数据 选择模型并训练模型，根据已收集的数据和已成熟的工具 应用并解释模型 监视模型的表现以确定其有效性 12345-supervised-regression-classification-unsupervised-data mining 整体使用监督学习模型根据google scholar表明，这是五个最常见的监督模型 线性回归： （34.3%）篇论文 逻辑回归: （22.3%） 神经网络： （16.8%） 决策树： 8.4% 支持向量机： 6.6% 总体而言，线性模型显然占主导地位，占监督模型命中率的50%以上。 模型在生物医学科学中的使用 逻辑回归 线性回归 Cox回归 神经网络 泊松回归","tags":[{"name":"机器学习","slug":"机器学习","permalink":"https://wiki.quartz.ren/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"模型","slug":"算法/001-机器学习/模型","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A8%A1%E5%9E%8B/"}]},{"title":"001什么是服务治理","date":"2021-06-24T14:56:24.000Z","path":"wk/平台工具/MicroService/微服务架构/服务治理/001.什么是服务治理/","text":"在soa话题中多数会提到服务治理,但服务治理的边界没有明确定义,如何通俗理解什么是”服务治理”? 微服务架构 为线索， 阐释下 什么是服务治理 首先需要明确，不管是什么事物需要”治理“，那一定是该事物存在一定问题。比如环境治理。那么服务，或者说微服务为什么需要治理？ 如果服务承担的业务职责简单, 那治理的必要性不大，即使出现问题也能快速发现、定位、回滚 当服务承担的业务职责变多变大，随着更多问题的到来，服务治理开始变得必要；服务治理也与技术架构本身息息相关。 单体服务（monolithic）如果服务属于单体结构，服务治理的挑战更多是当单体架构由于承载的业务庞大，服务 内部逻辑变得复杂，扩展性也变差。这时候往往不需要特别的服务治理手段，而是将单体服务拆分为微服务，即完成”微服务化“，将原有单体服务架构向微服务架构演进。 微服务（microservices）在微服务架构下，出现了新的服务问题，从而需要对微服务进行服务治理。那微服务又有哪些问题需要治理？ 1、服务注册与发现服务注册中心： 微服务之间存在调用依赖，就需要得到目标服务的服务地址，也就是微服务治理的”服务发现“。将服务信息存储到注册中心。 2、可观测性微服务由于较单体应用有了更多的部署载体，需要对众多服务间的调用关系、状态有清晰的掌控。可观测性就包括了调用拓扑关系、监控（Metrics）、日志（Logging）、调用追踪（Trace）等。 3、流量管理由于微服务本身存在不同版本，在版本更迭过程中，需要对微服务间调用进行控制，以完成微服务版本更迭的平滑。这一过程中需要根据流量的特征（访问参数等）、百分比向不同版本服务分发，这也孵化出灰度发布、蓝绿发布、A/B测试等服务治理的细分主题。 4、安全同微服务承载自身独有的业务职责，对于业务敏感的微服务，需要对其他服务的访问进行认证与鉴权，也就是安全问题。 5、控制对服务治理能力充分建设后，就需要有足够的控制能力，能实时进行服务治理策略向微服务分发。 而对于微服务治理，传统的做法都是需要引入微服务研发框架，配合控制平台完成如上服务治理能力的建设。比较常见的微服务研发框架包括SpringCloud、Dubbo等。 这也就来到微服务架构新的时代 — Service Mesh。服务网格是一个微服务基础设施，用于处理微服务通信、治理、控制、可观测、安全等问题，具备业务无侵入、多语言、热升级等诸多特性，是业界下一代微服务架构方向。目前业界较为主流的是Google、IBM、Lyft主导研发的Istio框架，当然也有一些基于Istio实现的易用性更强的平台（如网易轻舟Service Mesh，利益相关），对Service Mesh本身的易用性、可观察性、可运维性等有了进一步增强。可以说Service Mesh架构本身目前站在了服务治理领域的顶峰。 到底什么是服务治理?","tags":[{"name":"MicroService","slug":"MicroService","permalink":"https://wiki.quartz.ren/tags/MicroService/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"微服务架构","slug":"平台工具/MicroService/微服务架构","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"},{"name":"服务治理","slug":"平台工具/MicroService/微服务架构/服务治理","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/"}]},{"title":"","date":"2021-06-21T15:03:43.587Z","path":"wk/平台工具/MicroService/技术框架/RPC/Netty/疑问/","text":"为什么 ChannelOutboundInvoker 有用 ChannelPromise, ChannelPromise.. Inbound没有. 理解应该是，如果outbound写出去了. 就isDone 了. url = “http://ip:port/fabio/extract“requests.post(url=url, data=post_data,headers={‘Content-Type’:’application/json’})","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"RPC","slug":"平台工具/MicroService/技术框架/RPC","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/RPC/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/Netty/"}]},{"title":"k8s安装指南","date":"2021-06-21T14:56:24.000Z","path":"wk/平台工具/MicroService/容器云平台/001.k8s安装指南/","text":"首先选择docker适配的k8s版本. docker 版本 20.10.1k8s 1.23.1-00 amd64 安装安装前做的事 关闭swap. 添加k8s源. 版本选择 如果是window wsl. 需要确保 可以使用systemctl 而不是service.方案 12345678# k8s 的阿里源apt-get update &amp;&amp; apt-get install -y apt-transport-httpsapt upgrade -ycurl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - tee /etc/apt/sources.list.d/kubernetes.list &lt;&lt;-&#x27;EOF&#x27;deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial mainEOFapt-get update 1. 安装命令12apt install kubelet=1.23.1-00 kubeadm=1.23.1-00 kubectl=1.23.1-00 -y 2. 初始化1kubeadm init --image-repository registry.aliyuncs.com/google_containers --pod-network-cidr=10.244.0.0/16 3. 安装Kubernetes.安装 Kubernetes 集群有很多成熟的方案，在本地搭建也有 minikube、microk8s 等等，我们这里选择使用 KinD：在容器中来运行 Kubernetes 的一种简单方式。 1234567# 下载 KinD 二进制文件curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/v0.8.1/kind-$(uname)-amd64# 标记为可执行文件chmod +x ./kind# 移动到 PATH 目录下去mv ./kind /usr/local/bin/# TODO，记得提前下载安装 kubectl 二进制文件 1234567# 下载 KinD 二进制文件curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/v0.8.1/kind-$(uname)-amd64# 标记为可执行文件chmod +x ./kind# 移动到 PATH 目录下去mv ./kind /usr/local/bin/# TODO，记得提前下载安装 kubectl 二进制文件 4. 用kind创建一个k8s集群.12345678# 检查是否设置了 KUBECONFIG 环境变量echo $KUBECONFIG# 检查是否存在 .kube 目录，不需要手动创建ls $HOME/.kube# 使用 kind 命令创建一个名为 wslk8s 的集群kind create cluster --name wslk8s# 创建后检查 .kube 目录ls $HOME/.kube 5. 在集群中部署应用.比如安装一个kubernetes Dashboard. 1234# 在集群中安装 Dashboardkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.1/aio/deploy/recommended.yaml# 获取 dashboard 的资源对象kubectl get all -n kubernetes-dashboard 遗留问题 k8s的网络环境. DNS服务. wsl每次启动 怎么重启k8s. kubectl proxy 是什么 什么用. 共享资源下的 占用问题. 分配权重？？ 针对高性能计算性服务. 服务优雅性. 上下线. 其他的概念. 网络环境： k8s的dns服务 1kubectl apply -f dig.yaml dig.yaml1234567891011121314apiVersion: v1kind: Podmetadata: name: dig namespace: defaultspec: containers: - name: dig image: docker.io/azukiapp/dig command: - sleep - &quot;3600&quot; imagePullPolicy: IfNotPresent restartPolicy: Always k8s dns原理 因为/etc/docker/daemon.json 配置原因导致docker启动失败.{ “exec-opts”: [“native.cgroupdriver=systemd”], “log-driver”: “json-file”, “log-opts”: { “max-size”: “100m” }, “data-root”: “/mnt/d/DockerData/dockerDatas”, “storage-driver”: “overlay2”, “storage-opts”: [“overlay2.override_kernel_check=true”], “registry-mirrors”: [“https://tabss8zh.mirror.aliyuncs.com“], “runtimes”: { “nvidia”: { “path”: “/usr/bin/nvidia-container-runtime”, “runtimeArgs”: [] } }} “data-root”: “/mnt/d/DockerData/docker”,docker pull registry.aliyuncs.com/google_containers/kube-apiserver:v1.23.1 docker默认的数据文件路径为/var/lib/docker 参考文档wsl上k8s 代码自动发布—docker版本(20.10.1)+k8s版本(1.20.1) K8s教程https://kuboard.cn/learning/https://kubernetes.io/zh/k8s中文文档","tags":[{"name":"MicroService","slug":"MicroService","permalink":"https://wiki.quartz.ren/tags/MicroService/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"容器云平台","slug":"平台工具/MicroService/容器云平台","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%AE%B9%E5%99%A8%E4%BA%91%E5%B9%B3%E5%8F%B0/"}]},{"title":"线程池","date":"2021-06-21T14:56:24.000Z","path":"wk/平台工具/MicroService/微服务架构/基础/001.线程池/","text":"线程池高性能队列——Disruptor 12345678910111213&lt;dependency&gt; &lt;groupId&gt;com.conversantmedia&lt;/groupId&gt; &lt;artifactId&gt;disruptor&lt;/artifactId&gt; &lt;version&gt;1.2.14&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/com.lmax/disruptor --&gt;&lt;dependency&gt; &lt;groupId&gt;com.lmax&lt;/groupId&gt; &lt;artifactId&gt;disruptor&lt;/artifactId&gt; &lt;version&gt;3.4.2&lt;/version&gt;&lt;/dependency&gt;","tags":[{"name":"MicroService","slug":"MicroService","permalink":"https://wiki.quartz.ren/tags/MicroService/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"微服务架构","slug":"平台工具/MicroService/微服务架构","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"},{"name":"基础","slug":"平台工具/MicroService/微服务架构/基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/%E5%9F%BA%E7%A1%80/"}]},{"title":"微服务架构及其重要的10个设计模式","date":"2021-06-21T14:56:24.000Z","path":"wk/平台工具/MicroService/微服务架构/基础/002.微服务架构及其重要的10个设计模式/","text":"软件设计模式 是解决 软件设计中 常见问题的通用、可复用的解决方案。 设计模式可以分享通用词汇并使用经实战检验的方案，以免重复造轮子。现在，我将介绍一系列设计模式来实现这些最佳实践。 微服务架构的设计模式1. 独享数据库单体架构迁移至微服务架构过程中，如果数据库不变。 虽然有一些短期收益，但它却是反模式的，特别是在大规模系统中，微服务将在数据库层严重耦合。 整体迁移的目标将面临失败。 团队授权、独立开发等问题不能解决. 优点： 数据由服务完全所有; 服务的开发团队之间耦合度降低。 缺点：服务间的数据共享变得更有挑战性； 在应用范围的保证ACID事物变得困难许多； 细心设计如何拆分单体数据库 是一项极具挑战的任务。 衍生阅读： 分布式数存储、微服务模式：独享数据库 2. 事件源(Event Sourcing)在微服务架构中，特别使用独享数据库时， 微服务之间需要进行数据交换，对于弹性高可伸缩的和可容错的系统，它们应该通过交换事件进行异步通信。 在这总情况， 可能希望进行类似 更新数据库并发送消息这样的原子操作 将无法使用两阶段锁协议（2PL）,以为它无法伸缩。 而NoSql数据库因为大多不支持两阶段锁协议甚至无法实现分布式事务。 在这些场景，可以基于事件的架构使用事件源模式。在传统数据库中，直接存储的是业务体当前“状态”， 而在事件源中任何“状态” 更新事件或其他重要事件都会被存储起来，而不是直接存储实体本身。 优点： 为高可伸缩系统提供原子性操作； 自动记录实体变更历史，包括时序回溯功能； 松耦合和事件驱动的微服务。 缺点： 从事件存储中读取实体成为新的挑战，通常需要额外的数据存储(CQRS模式); 系统整体复杂性增加了，通常需要领域驱动设计； 系统需要处理事件重复（幂等）或丢失； 变更事件结构成为新的挑战。 衍生阅读： 事件驱动；事件驱动模式-云设计模式； 微服务模式：事件驱动。 3. 命令和查询职责分离（CQRS）4. Saga","tags":[{"name":"MicroService","slug":"MicroService","permalink":"https://wiki.quartz.ren/tags/MicroService/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"微服务架构","slug":"平台工具/MicroService/微服务架构","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"},{"name":"基础","slug":"平台工具/MicroService/微服务架构/基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/%E5%9F%BA%E7%A1%80/"}]},{"title":"工作流引擎","date":"2021-06-21T14:56:24.000Z","path":"wk/平台工具/MicroService/微服务架构/工作流引擎/001.readme/","text":"什么情况下，需要使用工作流引擎？ 几大工作流引擎对比 流程引擎介绍","tags":[{"name":"MicroService","slug":"MicroService","permalink":"https://wiki.quartz.ren/tags/MicroService/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"微服务架构","slug":"平台工具/MicroService/微服务架构","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"},{"name":"工作流引擎","slug":"平台工具/MicroService/微服务架构/工作流引擎","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/"}]},{"title":"分布式链路追踪认识及选型","date":"2021-06-21T14:56:24.000Z","path":"wk/平台工具/MicroService/微服务架构/链路追踪/001.trace介绍/","text":"微服务化后所出现的一些矛盾/冲突点 背景: 级联故障和雪崩 的 P0 级别事件后，你小手一摊便葛优躺了。开始进行自我复盘，想起这次排查经历，由于现在什么基础设施都还没有，因此在接收到客户反馈后，你是通过错误日志进行问题检查的。 Google Dapper 论文所介绍的 Dapper. 源于 Google 为了解决可能由不同团队，不同语言，不同模块，部署在不同服务器，不同数据中心的所带来的软件复杂性(很难去分析，无法做定位)，构建了一个的分布式跟踪系统. 自此就开启了业界在分布式链路的启发/启蒙之路，很多现在出名的分布式链路追踪系统都是基于 Google Dapper 论文发展而来，基本原理和架构都大同小异。 选型, 有哪些 Twitter：Zipkin。 Uber：Jaeger。 Elastic Stack：Elastic APM。 Apache：SkyWalking(国内开源爱好者吴晟开源)。 Naver：Pinpoint(韩国公司开发)。 阿里：鹰眼。 大众点评：Cat。 京东：Hydra。 问题: 他们之间都是基于 Google Dapper 演进出来的，那本质上到底有什么区别，怎么延伸出这么多的新产品? 链路跟踪系统的功能 故障快速定位 各个调用环节的性能分析 数据分析等 生成服务调用拓扑图 各大厂分布式链路跟踪系统架构对比","tags":[{"name":"MicroService","slug":"MicroService","permalink":"https://wiki.quartz.ren/tags/MicroService/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"微服务架构","slug":"平台工具/MicroService/微服务架构","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"},{"name":"链路追踪","slug":"平台工具/MicroService/微服务架构/链路追踪","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"}]},{"title":"Thrift框架原理及rpc认识","date":"2021-06-21T14:56:24.000Z","path":"wk/平台工具/MicroService/技术框架/RPC/thrift/thrift/","text":"互联网服务的协议汇总 rpc thrift dubbo others http rest graphql 三个问题 接口不通 各个服务经常有超时问题, 找不到原因(rest接口没有问题) 重试怎么用？ 解答及处理思路 接口不通 12341. 配置原因 - server服务未注册成功 - test-client服务未注册成功 - thrift未开启 这就是个初级问题 服务的超时等其他问题, 很莫名其妙 123- 业务逻辑自身耗时较长- thrift性能不行? 相比其他框架- 或者不适合这个服务场景(对thrift认识不够) 怎么做？ 压测, thrift各种io模式的对比和选择. 压测结果 及 各个io模式介绍三个主题内容 thrift框架 链路追踪 （nlp实现, server实现） -&gt; 业务自身耗时、接口超时问题 服务平滑下线、服务治理、监控检查 thrift框架1. 分为以下几大类 TTransport：客户端传输层相关的类； TServerTransport：服务端传输层相关的类； TProtocol：序列化、反序列化相关的类； TServer：服务器的IO事件流模型相关的类； TProcessor：函数，接口调用相关的类； org.apache.thrift.server.TServer - 接受请求的server. 进行请求处理.org.apache.thrift.server.TServerEventHandler - 处理请求 2. Server的几个类型TNonblockingServer - 提供的NIO实现的服务模式，提供非阻塞的服务处理，用一个单线程来处理所有的RPC请求。 THsHaServer (extends TNonblockingServer) - 半同步半异步的服务端模型，需要指定为： TFramedTransport 数据传输的方式。 TThreadedSelectorServer - TThreadedSelectorServer是对THsHaServer的一种扩充与完善. 121. 它将selector中的读写IO事件(read/write)从主线程中分离出来。交给了多个专门负责读写IO事件的SelectorThread2. 同时引入worker工作线程池，负责业务处理。它也是种Half-Sync/Half-Async的服务模型。 TThreadedSelectorServer模式是目前Thrift提供的最高级的线程服务模型 Thrift源码分析（TThreadedSelectorServer） 同步线程模型（阻塞式IO服务模型） TSimpleServer -TThreadPoolServer - 线程池来处理并发的RPC请求. TThreadPoolServer用来executorService_用来处理RPC请求 该模式的处理能力受限于线程池的工作能力，当并发请求数大于线程池中的线程数时，新的请求会进入队列中排队等待处理 socket的读 写数据 和业务线程一起处理 并发数大于线程数时， 后来的请求 server没有 read（io操作）, 等处理完再 read(io操作). read 和 业务逻辑处理 是同步进行的 Netty 线程模型及比较链路追踪（nlp实现, server实现） -&gt; 业务自身耗时、接口超时问题 服务平滑下线、服务治理、监控检查","tags":[{"name":"rpc","slug":"rpc","permalink":"https://wiki.quartz.ren/tags/rpc/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"RPC","slug":"平台工具/MicroService/技术框架/RPC","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/"},{"name":"thrift","slug":"平台工具/MicroService/技术框架/RPC/thrift","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/thrift/"}]},{"title":"Thrift框架原理及rpc认识","date":"2021-06-21T14:56:24.000Z","path":"wk/平台工具/MicroService/技术框架/RPC/doc/001.post/","text":"开源RPC框架如何选型？ 百度开源项目 brpc 进入 Apache 孵化器","tags":[{"name":"rpc","slug":"rpc","permalink":"https://wiki.quartz.ren/tags/rpc/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"RPC","slug":"平台工具/MicroService/技术框架/RPC","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/"},{"name":"doc","slug":"平台工具/MicroService/技术框架/RPC/doc","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/doc/"}]},{"title":"吞吐量和延迟","date":"2021-06-21T14:56:24.000Z","path":"wk/平台工具/MicroService/技术框架/RPC/doc/吞吐量和延迟/","text":"延迟和吞吐量的关系 对于分布式系统，关于微服务对性能的影响. 延迟和响应事件.延迟 是对于服务本身来说， 响应时间是相对于 调用者来说. 延迟(latency) = 请求响应 出入系统的时间.响应时间(ResponseTime) = 客户端请求开始，一直到响应的时间 = 延迟 + 网络耗时 理想状态下： 延迟越低，吞吐越高，当然这是对单机单线程而言. 微服务相对单体架构 的副作用： 延迟变高. 原来的单个调用, 变成多次 远程调用. 并发度 = 吞吐量 * 延迟. 吞吐量： 表示在单位时间内通过某个网络或接口的数据量 ，包括全部上传和下载的流量。 tomcat没有一味追求大吞吐量。他用nio是为了尽可能多的处理请求的同时不会让用户感受到太大的延迟。 ？？？？","tags":[{"name":"rpc","slug":"rpc","permalink":"https://wiki.quartz.ren/tags/rpc/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"RPC","slug":"平台工具/MicroService/技术框架/RPC","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/"},{"name":"doc","slug":"平台工具/MicroService/技术框架/RPC/doc","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/doc/"}]},{"title":"人生重要的事情","date":"2021-02-24T01:56:24.000Z","path":"wk/项目管理/[3]生活学习/[2]教育/哈弗公开课/重要的事情/","text":"高尔夫球代表着重要的东西，比如你的家人 朋友 健康。小石头则代表琐碎重要的东西， 比如你的汽车、工作、房子。沙子呢 就是其他一些小事情。 如果先把沙子倒进罐子 你就没有空间放石头和高尔夫球， 人生也是一样的道理。 如果你把所有时间和精力放到小事情上。 你就没有时间去在意真正重要的事情。 每个人的人生都只有一次。 先把高尔夫球顾好 也就是真正重要的事。 因为其他东西都是沙子而已。 啤酒代表着什么: 代表着无论你的生活有多么紧凑。仍然有时间和朋友把酒言欢。 2 我们生活中有很多这样的事情： 感觉生活把我们摁在地上摩擦，我们可能做了糟糕的决定或者没处理好事情。有时候日子甚至让我们感觉自己一无是处。 但无论发生什么 未来可能发生什么 永远不要丢弃自己的价值。 请千万记住这一点。","tags":[{"name":"生活学习","slug":"生活学习","permalink":"https://wiki.quartz.ren/tags/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[2]教育","slug":"项目管理/3-生活学习/2-教育","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/2-%E6%95%99%E8%82%B2/"},{"name":"哈弗公开课","slug":"项目管理/3-生活学习/2-教育/哈弗公开课","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/2-%E6%95%99%E8%82%B2/%E5%93%88%E5%BC%97%E5%85%AC%E5%BC%80%E8%AF%BE/"}]},{"title":"数据存储","date":"2021-01-08T03:55:57.000Z","path":"wk/数据/数据存储/001.存储概述/","text":"hbase、rocksdb、mysql、mongodb、redis 各个存储的差异. 底层原理的差异. 再不同场景下如何选择. 场景存储结构数据协议、系统能力了解原理之后, 有哪些用途方便快速的锁定并解决问题，在合适的场景选择合适的存储.","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据存储","slug":"数据/数据存储","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"}]},{"title":"Hbase存储原理","date":"2021-01-08T03:55:57.000Z","path":"wk/数据/数据存储/002.Hbase存储原理/","text":"介绍Hbase的存储模式1. 行式存储与列式存储行式存储特点 是把每一行的所有列存储完, 再存储下一个行的所有列.一行一行横向存储. 列式存储特点 是把每一列的数据存储完, 再存储下一列的所有数据, 直到所有列的数据存储完, 是纵向的存储. 列式存储 每一列的数据都是分开存储. （根据同一列数据的相似性原理，可对数据进行压缩.） 2. 应用场景列式存储应用场景 对于单列 或者相对少的列, 获取频率较高, 推荐列式存储. 大数据的环境，利用数据压缩和扩展的场景 事务使用率不高、读取场景的频率不高、数据量非常大的场景 随机更新某行的频率不高的场景. 行式存储应用场景 关系型数据库的解决方案, 如果表与表之间有很强的关联性，且数据量不大. 最大的优势是 联机事务处理能力。 类似消费、转账 强事务关联性. 行式存储适合事务型应用场景，列式存储更适合分析型应用场景 Hbase读性能不很好的吗，为什么？ HBase索引原理HBase 列族的存储概念","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据存储","slug":"数据/数据存储","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"}]},{"title":"微服务架构体系","date":"2020-12-05T16:56:24.000Z","path":"wk/平台工具/MicroService/MicroService/","text":"微服务架构相关理论与实践。 后端架构师技术图谱(架构知识体系；包括架构师必备的技能，各种架构设计、基础技术知识等。) 后端架构师技术图谱:github 后端架构师技术图谱:juejin","tags":[{"name":"架构设计","slug":"架构设计","permalink":"https://wiki.quartz.ren/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"}]},{"title":"pandas数据类型","date":"2020-11-17T09:10:49.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Python/pandas/002.pandas数据类型/","text":"","tags":[{"name":"Python","slug":"Python","permalink":"https://wiki.quartz.ren/tags/Python/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"平台工具/2-计算机基础/编程语言/Python","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"},{"name":"pandas","slug":"平台工具/2-计算机基础/编程语言/Python/pandas","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/pandas/"}]},{"title":"DataFrame遍历","date":"2020-11-17T09:10:49.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Python/pandas/003.DataFrame遍历/","text":"先读取一个DataFrame1234import pandas as pd#读入数据df = pd.read_table(&#x27;d:/Users/chen_lib/Desktop/tmp.csv&#x27;,sep=&#x27;,&#x27;, header=&#x27;infer&#x27;)df.head() 新版 read_table 使用read_csv 替换了. DataFrame遍历【Python】DataFrame遍历 12for row in df.iteritems(): print(row[0], row[1], row[2]) # 输出各列","tags":[{"name":"Python","slug":"Python","permalink":"https://wiki.quartz.ren/tags/Python/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"平台工具/2-计算机基础/编程语言/Python","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"},{"name":"pandas","slug":"平台工具/2-计算机基础/编程语言/Python/pandas","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/pandas/"}]},{"title":"win机器基于WSL2搭建开发环境","date":"2020-11-16T17:13:34.000Z","path":"wk/平台工具/工作相关/WIN/001.WSL2搭建开发环境/","text":"在mac跳到wsl环境123456# 调到win环境(需要win开启ssh端口.)ssh Administrator@192.168.0.115wsl# 或ssh tensor@wslhost 网络配置:局域网可访问WSL端口以实现 在局域网其它电脑访问 wsl的服务. 1. 端口转发方法：在win上添加 端口转发. 相关命令如下： 12345678910111213# 1. 查看端口转发规则netsh interface portproxy show all# 2. 添加端口转换规则netsh interface portproxy add v4tov4 listenport=8000 listenaddress=0.0.0.0 connectport=8081 connectaddress=172.24.11.211# - 说明： 此命令可更新，所以如果ip变更，则更改后可直接执行# 3. 删除端口转换规则netsh interface portproxy delete v4tov4 listenport=4000 listenaddress=0.0.0.0# 4. 看设定的端口有没有被监听，或者使用nc,telnet,curl等命令看对应的wsl端口是否开启netstat -anp tcp 2. 防火墙配置12345678910111. 查看 防火墙是否启用netsh advfirewall show allprofiles state2. 查看现有的防火墙规则(注意双引号)netsh advfirewall firewall show rule name=all | findstr &quot;8000&quot;3. (重点)添加新的防火墙规则，例如允许特定端口：netsh advfirewall firewall add rule name=&quot;Port 8000&quot; dir=in action=allow protocol=TCP localport=80004. 删除防火墙规则，例如删除上面创建的规则（以规则名称为key）netsh advfirewall firewall delete rule name=&quot;Port 8000&quot; 3. 设置静态IP编辑 /etc/wsl.conf ，添加：12[network] generateResolvConf = false 在Windows中动态获取WSL2中的IP地址.是在window通过wslhost(hostname) 访问wsl的方式. 可自动更新hostname 123ipaddr=$(ifconfig eth0 | grep &#x27;inet &#x27; | awk &#x27;&#123;print $2&#125;&#x27;)sed -i &#x27;/wslhost/d&#x27; /mnt/c/Windows/System32/drivers/etc/hostsecho &quot;$ipaddr wslhost&quot; &gt;&gt; /mnt/c/Windows/System32/drivers/etc/hosts 在 /etc/profile 中配置以上信息. 注意win中hosts文件权限问题. wsl 虚拟磁盘压缩(废弃)清理WSL2的磁盘占用 12345678diskpart.exe# 选择虚拟磁盘#select vdisk file=&quot;C:\\Users\\Administrator\\AppData\\Local\\Packages\\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\\LocalState\\ext4.vhdx&quot;# 之前对磁盘进行了迁移，到E盘。 所以使用以下路径select vdisk file=&quot;E:\\WslUbuntu\\ext4.vhdx&quot;# 进行压缩compact vdisk wsl 磁盘迁移WSL2迁移虚拟磁盘文件ext4.vhdx 12# 设置默认用户ubuntu1804 config --default-user tensor","tags":[{"name":"开发环境","slug":"开发环境","permalink":"https://wiki.quartz.ren/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"name":"跳板机","slug":"跳板机","permalink":"https://wiki.quartz.ren/tags/%E8%B7%B3%E6%9D%BF%E6%9C%BA/"},{"name":"网络","slug":"网络","permalink":"https://wiki.quartz.ren/tags/%E7%BD%91%E7%BB%9C/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"工作相关","slug":"平台工具/工作相关","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/"},{"name":"WIN","slug":"平台工具/工作相关/WIN","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/WIN/"}]},{"title":"wrk-http压测","date":"2020-11-16T17:13:34.000Z","path":"wk/平台工具/工作相关/压测/001.wrk-http压测/","text":"https://cloud.tencent.com/developer/article/1418087 123456# 压测： 12 个线程, 400连接数, 持续时间30s, wrk -t12 -c400 -d30s -R 40000 http://wslhost:2222/p2?content=zhangquanquan# 其他参数.# -s 选择 lua文件, 用于压测http请求.wrk -t12 -c400 -d30s -s post.lua -R 4000 http://wslhost:8888/graphql post.lua文件: 1234567wrk.method = &quot;POST&quot;wrk.body = &#x27;&#123;&quot;query&quot;: &quot;query&#123; greeting &#125;&quot;&#125;&#x27;wrk.headers[&quot;Content-Type&quot;] = &quot;application/json&quot;function request() return wrk.format(&#x27;POST&#x27;, nil, nil, body)end 12# 先用curl测试接口是否正常.curl -H &quot;Content-Type: application/json&quot; -X POST -d &#x27;&#123;&quot;query&quot;: &quot;query&#123; greeting &#125;&quot;&#125;&#x27; &quot;http://wslhost:8869/graphql&quot;","tags":[{"name":"wrk","slug":"wrk","permalink":"https://wiki.quartz.ren/tags/wrk/"},{"name":"压测","slug":"压测","permalink":"https://wiki.quartz.ren/tags/%E5%8E%8B%E6%B5%8B/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"工作相关","slug":"平台工具/工作相关","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/"},{"name":"压测","slug":"平台工具/工作相关/压测","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/%E5%8E%8B%E6%B5%8B/"}]},{"title":"Node环境搭建","date":"2020-11-16T17:13:34.000Z","path":"wk/平台工具/工作相关/环境搭建/001.node环境搭建/","text":"下载安装包从淘宝镜像站 下载所需安装包 这里选择版本: node - 12.3.0 linux 系统选择tag.gz 压缩包, 下载解压。 然后配置/usr/local/bin/node. mac 选择 node-v12.3.0.pkg . 下载后点击安装 mac node 升级 sudo npm install -g n //使用npm安装n模块npm view node versions // node所有版本 sudo n latest // 升级到最新版本 sudo n stable // 升级到稳定版本 sudo n xx.xx // 升级到具体版本号","tags":[{"name":"node","slug":"node","permalink":"https://wiki.quartz.ren/tags/node/"},{"name":"npm","slug":"npm","permalink":"https://wiki.quartz.ren/tags/npm/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"工作相关","slug":"平台工具/工作相关","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/"},{"name":"环境搭建","slug":"平台工具/工作相关/环境搭建","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]},{"title":"Sbt Reference Manual","date":"2020-11-16T17:13:34.000Z","path":"wk/平台工具/工作相关/环境搭建/005.sbt环境搭建/","text":"sbt是 scala的构建工具. 全称是 simple Build Tool. 类似Maven或者Gradle. sbt Reference Manual sbt Reference Manual-english 下载https://github.com/sbt/sbt/releases/download/v1.5.0/sbt-1.5.0.zip 下载后 在指定目录(/opt/tools/sbt)解压. 配置环境变量， 使可以直接使用sbt命令.123export SBT_HOME=/opt/tools/sbt/export PATH=$SBT_HOME/bin/:$PATHexport SBT_OPTS=&quot;-Dsbt.override.build.repos=true&quot; -Dsbt.override.build.repos=true 表示全局 配置国内镜像.创建 ~/.sbt 目录. 新建文件 repositories 文件内容如下 12345[repositories]localhuaweicloud-maven: https://repo.huaweicloud.com/repository/maven/maven-central: https://repo1.maven.org/maven2/sbt-plugin-repo: https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext] sbt 插件.","tags":[{"name":"sbt","slug":"sbt","permalink":"https://wiki.quartz.ren/tags/sbt/"},{"name":"ci","slug":"ci","permalink":"https://wiki.quartz.ren/tags/ci/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"工作相关","slug":"平台工具/工作相关","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/"},{"name":"环境搭建","slug":"平台工具/工作相关/环境搭建","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]},{"title":"下载并安装 Android Studio","date":"2020-11-16T17:13:34.000Z","path":"wk/平台工具/工作相关/环境搭建/006.Andriod开发环境/","text":"资料：Android studio安装入门教程 1.下载下载并安装 Android Studio 2.初始化下载之后，点击应用. 问题：Android SDK。 会弹出需要Android SDK。 可以忽略，在后面的步骤进行下载。 或者也可以自行单独下载. 3. 创建项目按照好Android Studio，并下载Android SDK后，进入 工具， 选择创建项目（或者导入已有项目）。 4. Android项目相关的概念.","tags":[{"name":"Android","slug":"Android","permalink":"https://wiki.quartz.ren/tags/Android/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"工作相关","slug":"平台工具/工作相关","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/"},{"name":"环境搭建","slug":"平台工具/工作相关/环境搭建","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]},{"title":"Gradle环境搭建","date":"2020-11-16T17:13:34.000Z","path":"wk/平台工具/工作相关/环境搭建/007.Gradle环境搭建/","text":"1. 搭建gradle环境1.1 下载gradle下载后进行相关配置 1.2 gradle配置国内镜像1.2.1 添加配置文件请在gradle的安装目录下的init.d的文件夹下添加init.gradle: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374gradle.projectsLoaded &#123; rootProject.allprojects &#123; buildscript &#123; repositories &#123; def JCENTER_URL = &#x27;https://maven.aliyun.com/repository/public&#x27; def GOOGLE_URL = &#x27;https://maven.aliyun.com/repository/google&#x27; def NEXUS_URL = &#x27;https://maven.aliyun.com/repository/central&#x27; all &#123; ArtifactRepository repo -&gt; if (repo instanceof MavenArtifactRepository) &#123; def url = repo.url.toString() if (url.startsWith(&#x27;https://jcenter.bintray.com/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $JCENTER_URL.&quot; println(&quot;buildscript $&#123;repo.url&#125; replaced by $JCENTER_URL.&quot;) remove repo &#125; else if (url.startsWith(&#x27;https://dl.google.com/dl/android/maven2/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $GOOGLE_URL.&quot; println(&quot;buildscript $&#123;repo.url&#125; replaced by $GOOGLE_URL.&quot;) remove repo &#125; else if (url.startsWith(&#x27;https://repo1.maven.org/maven2&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot; println(&quot;buildscript $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;) remove repo &#125; &#125; &#125; jcenter &#123; url JCENTER_URL &#125; google &#123; url GOOGLE_URL &#125; maven &#123; url NEXUS_URL &#125; &#125; &#125; repositories &#123; def JCENTER_URL = &#x27;https://maven.aliyun.com/repository/public&#x27; def GOOGLE_URL = &#x27;https://maven.aliyun.com/repository/google&#x27; def NEXUS_URL = &#x27;https://maven.aliyun.com/repository/central&#x27; all &#123; ArtifactRepository repo -&gt; if (repo instanceof MavenArtifactRepository) &#123; def url = repo.url.toString() if (url.startsWith(&#x27;https://jcenter.bintray.com/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $JCENTER_URL.&quot; println(&quot;buildscript $&#123;repo.url&#125; replaced by $JCENTER_URL.&quot;) remove repo &#125; else if (url.startsWith(&#x27;https://dl.google.com/dl/android/maven2/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $GOOGLE_URL.&quot; println(&quot;buildscript $&#123;repo.url&#125; replaced by $GOOGLE_URL.&quot;) remove repo &#125; else if (url.startsWith(&#x27;https://repo1.maven.org/maven2&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot; println(&quot;buildscript $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;) remove repo &#125; &#125; &#125; jcenter &#123; url JCENTER_URL &#125; google &#123; url GOOGLE_URL &#125; maven &#123; url NEXUS_URL &#125; &#125; &#125;&#125; 1.2.2 验证项目重启后测试","tags":[{"name":"Android","slug":"Android","permalink":"https://wiki.quartz.ren/tags/Android/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"工作相关","slug":"平台工具/工作相关","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/"},{"name":"环境搭建","slug":"平台工具/工作相关/环境搭建","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]},{"title":"CSV文件读取","date":"2020-10-17T09:10:49.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Python/基础语法及操作/001.csv文件读取/","text":"CSV File Reading and Writing pandas 深度学习平台 数据集","tags":[{"name":"Python","slug":"Python","permalink":"https://wiki.quartz.ren/tags/Python/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"平台工具/2-计算机基础/编程语言/Python","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"},{"name":"基础语法及操作","slug":"平台工具/2-计算机基础/编程语言/Python/基础语法及操作","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%8F%8A%E6%93%8D%E4%BD%9C/"}]},{"title":"中文http请求乱码解决","date":"2020-10-17T09:10:49.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Python/基础语法及操作/002.中文http请求乱码解决/","text":"HTTP content-type","tags":[{"name":"Python","slug":"Python","permalink":"https://wiki.quartz.ren/tags/Python/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"平台工具/2-计算机基础/编程语言/Python","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"},{"name":"基础语法及操作","slug":"平台工具/2-计算机基础/编程语言/Python/基础语法及操作","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%8F%8A%E6%93%8D%E4%BD%9C/"}]},{"title":"工具包整理","date":"2020-10-14T14:55:57.000Z","path":"wk/算法/001.机器学习/NLP/002.文本抽取/","text":"funNLP:文本中抽取结构化信息(敏感词,实体识别等)","tags":[{"name":"NLP","slug":"NLP","permalink":"https://wiki.quartz.ren/tags/NLP/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"NLP","slug":"算法/001-机器学习/NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NLP/"}]},{"title":"Word2vec","date":"2020-10-14T14:55:57.000Z","path":"wk/算法/001.机器学习/NLP/NLP系列/002.word2vec/","text":"知乎-深入浅出Word2Vec原理解析 借鉴其中思维导图. 语言模型 Word2Vec是语言模型中的一种， 它是从大量文本预料中以无监督方式学习语义知识的模型，被广泛地应用于自然语言处理中。 Word2Vec是用来生成词向量的工具，而词向量与语言模型有着密切的关系。因此，我们先来了解一些语言模型方面的知识。 1.背景知识.统计语言模型、n-gram模型、神经概率语言模型 2.词向量One-hot、Distributed Representation. 3.Word2Vec的网络结构CBOW、Skip-gram model 4. 基于分层softmax的模型.原理word2vec是一个简单的神经网络，有以下几个层组成： （1）１个输入层：输入使用的是one-hot编码。即：假设有n个词，则每一个词可以用一个n维的向量来表示，这个n维向量只有一个位置是1，其余位置都是0。 （2）1个隐藏层：隐藏层的神经单元数量，代表着每一个词用向量表示的维度大小。对于输入层和隐藏层之间的权值矩阵，它的形状应该是[vocab_size, hidden_size]的矩阵。 （3）1个输出层：输出层是一个 [vocab_size] 大小的向量，每一个值代表着输出一个词的概率。 word2vec的应用场景 (在工业界的应用)Word2Vec主要原理是根据上下文来预测单词，一个词的意义往往可以从其前后的句子中抽取出来。 而用户的行为也是一种相似的时间序列，可以通过上下文进行推断。当用户浏览并与内容进行交互时，我们可以从用户前后的交互过程中判断行为的抽象特征，这就使得我们可以把词向量模型应用到推荐、广告领域当中。 NLP领域Word2Vec学习到的词向量代表了词的语义，可以用来做分类、聚类、也可以做词的相似度计算。把Word2Vec生成的向量直接作为深度神经网络的输入，可以做sentiment analysis等工作。 图嵌入基于Word2Vec这一类的Graph Embedding方法有很多，具体可以参考论文：DeepWalk（是引入Word2Vec思想比较经典的图嵌入算法），node2vec，struc2vec 等等。 推荐领域Airbnb在论文《Real-time Personalization using Embeddings for Search Ranking at Airbnb》中提出将用户的浏览行为组成List，通过Word2Vec方法学习item的向量，其点击率提升了21%，且带动了99%的预定转化率。该论文主要是在Skip-gram 模型的基础上做了改进。Yahoo在论文《E-commerce in Your Inbox: Product Recommendations at Scale》中提出Yahoo邮箱从发送到用户的购物凭证中抽取商品并组成List，通过Word2Vec学习并为用户推荐潜在的商品； 广告领域Yahoo在论文《Scalable Semantic Matching of Queries to Ads in Sponsored Search Advertising》中提出将用户的搜索查询和广告组成List，并为其学习特征向量，以便对于给定的搜索查询可以匹配适合的广告。 关于Word2Vec若干问题的思考（1）Word2Vec两个算法模型的原理是什么，网络结构怎么画？ （2）网络输入输出是什么？隐藏层的激活函数是什么？输出层的激活函数是什么？ （3）目标函数/损失函数是什么？ （4）Word2Vec如何获取词向量？ （5）推导一下Word2Vec参数如何更新？ （6）Word2Vec的两个模型哪个效果好哪个速度快？为什么？ （7）Word2Vec加速训练的方法有哪些？ （8）介绍下Negative Sampling，对词频低的和词频高的单词有什么影响？为什么？ （9）Word2Vec和隐狄利克雷模型(LDA)有什么区别与联系？ 以上问题可以通过本文和参考文章找到答案，这里不再详细解答。 （10）介绍下Hierarchical Softmax的计算过程，怎么把 Huffman 放到网络中的？参数是如何更新的？对词频低的和词频高的单词有什么影响？为什么？ Hierarchical Softmax利用了Huffman树依据词频建树，词频大的节点离根节点较近，词频低的节点离根节点较远，距离远参数数量就多，在训练的过程中，低频词的路径上的参数能够得到更多的训练，所以效果会更好。 （11）Word2Vec有哪些参数，有没有什么调参的建议？ Skip-Gram 的速度比CBOW慢一点，小数据集中对低频次的效果更好；Sub-Sampling Frequent Words可以同时提高算法的速度和精度，Sample 建议取值为 [公式] ；Hierarchical Softmax对低词频的更友好；Negative Sampling对高词频更友好；向量维度一般越高越好，但也不绝对；Window Size，Skip-Gram一般10左右，CBOW一般为5左右。（12）Word2Vec有哪些局限性？ Word2Vec作为一个简单易用的算法，其也包含了很多局限性： Word2Vec只考虑到上下文信息，而忽略的全局信息；Word2Vec只考虑了上下文的共现性，而忽略的了彼此之间的顺序性；","tags":[{"name":"NLP","slug":"NLP","permalink":"https://wiki.quartz.ren/tags/NLP/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"NLP","slug":"算法/001-机器学习/NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NLP/"},{"name":"NLP系列","slug":"算法/001-机器学习/NLP/NLP系列","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NLP/NLP%E7%B3%BB%E5%88%97/"}]},{"title":"机器学习基本概念和算法","date":"2020-10-02T14:55:57.000Z","path":"wk/算法/001.机器学习/001.机器学习基本概念和算法/","text":"线性回归、逻辑回归、决策树、随机森林、SVM等. 一、线性回归先提出一个问题：线性代数、线性方程、线性变换、线性空间(向量空间)等概念都与线性相关，那什么是线性呢，这些概念的含义又有什么区别？ 1. 什么是线性回归是一种统计学方法，用于建模和分析一个因变量与一个或多个自变量 之间的线性关系.主要目标是做出一个预测模型，该模型能够预测连续的输出值 1.1 线性回归中的线性是指模型中自变量(特征)与因变量之间的关系是线性的。具体来说： 线性回归假设自变量与因变量之间的关系可以用一个线性方程来描述，即自变量的线性组合与因变量之间存在一个线性关系. 1.2 了解“线性”这些线性 通常指 线性关系或线性性质： 它描述了一种简单、直接、成比例的关系，这种关系遵循特定的数学规律， 如可加性和齐次性.线性的意义：在线性系统中，小的变化通常会导致 小的响应， 这使得线性系统相对容易 分析和预测。现实世界的许多现象是非线性的，行为更复杂、可能涉及阈值、突变或反馈机制。 就需要更复杂的算法解决相关问题。 12345数学中的线性：变量或函数之间直接成比例关系。例如：直线方程y=mx+b.线性方程：变量的最高次数为1的方程。 是可解的，通常有唯一解或一组解.线性代数：“线性”用于描述向量空间、线性变换、线性映射等概念。 这些概念 满足 ***加法、标量乘法的封闭性、齐次性、可加性***.线性系统：输入和输出成线性关系的系统。 意味着系统的响应 可以分解为各个输入的线性组合.线性回归：在统计学中，用于预测一个变量(因变量)基于另一个或多个变量(自变量)的统计方法. 1.3 简单线性回归只有一个自变量和一个因变量时。 它试图找出最佳 拟合的直线。 这条直线能够最大程度的减少实际预测值和通过直线预测的值之间的差异. $ y = \\beta_0 + \\beta_1x + \\epsilon $ 其中: y 是因变量（预测的输出） x 是自变量（输入特征） $ \\beta_0 是截距项，它是当 x=0 时 y 的预期值。 $ $ \\beta_1 是斜率，表示 ( x ) 每变化一个单位，( y ) 预期变化的数量。$ $ \\epsilon 是误差项，代表模型无法解释的随机变异。 $ 1.4 多元线性回归当有多个自变量时，线性回归可以扩展为多元线性回归。 $ y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\ldots + \\beta_n x_n + \\epsilon $ 其中: $ x_1 , x_2 , \\ldots ,x_n $ 是自变量， $ \\beta_1, \\beta_2,\\ldots ,\\beta_n $ 是对应的斜率 1.5 线性回归的应用 预测分析：根据自变量的值预测因变量的值。 趋势分析：分析自变量和因变量之间的关系趋势。 决策支持：为决策提供数据驱动的见解。 todo 各种机器学习算法的比较和选型. 1.6 线性回归的原理和实现一种统计学习方法，用于建立一个或多个自变量与因变量之间的线性关系。 实现线性回归(其它模型类似)的步骤：问题定义、数据收集、数据探索分析、特征选择、数据预处理、模型选择(简单线性、多元线性回归)、划分数据集、模型训练、模型评估、模型诊断、模型优化；预测、结果解释、模型部署、持续监控和维护. 1.6.1 模型训练基本原理：通过最小化误差的平方和来找到一个线性方程，该方程能够最好地拟合数据点. 线性回归模型的假设假设线性回归模型为：$ y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\ldots + \\beta_n x_n + \\epsilon $其中$ x_1 , x_2 , \\ldots ,x_n $ 是自变量， $ \\beta_1, \\beta_2,\\ldots ,\\beta_n $ 是模型参数，$ \\epsilon $是误差项. 最小二乘法(最常用的线性回归模型拟合技术，通过最小化误差项的平方和来估计模型参数)最小化误差的平方和，即 $ S = \\sum_{i=1}^{m} (y_i - \\hat{y}_i)^2 $其中，$ y_i $ 是实际值， $ \\hat{y}_i $ 是模型预测值。 构建目标函数构建损失函数（通常是均方误差）：$ J(\\beta) = \\frac{1}{2m} \\sum_{i=1}^{m} (y_i - \\hat{y}_i)^2 $其中，$m$是样本数量. （损失函数是预测误差的平方和） 求解模型参数.使用梯度下降或解析方法求解参数。对于解析方法，求解参数的公式为： $ \\beta = (X^TX)^{-1}X^Ty $其中，$ \\beta $是模型参数向量，$X$ 是设计矩阵，$X^T$是$X$的转置，$(X^TX)^{-1}$ 是 $X^TX$的逆矩阵，$y$是因变量的值向量。 设计矩阵设计矩阵 $X$ 的构造通常如下：$ X = \\begin{bmatrix} 1 &amp; x_{11} &amp; x_{12} &amp; \\ldots &amp; x_{1n} \\\\\\1 &amp; x_{21} &amp; x_{22} &amp; \\ldots &amp; x_{2n} \\\\\\\\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\\1 &amp; x_{m1} &amp; x_{m2} &amp; \\ldots &amp; x_{mn} \\end{bmatrix} $ 1.6.2 预测(推理)和评估 预测新数据使用训练得到的参数$\\beta$来预测新数据点$x_{new}$ 的$y$值：$ \\hat{y}_{\\text{new}} = \\beta_0 + \\beta_1 x_{\\text{new1}} + \\beta_2 x_{\\text{new2}} + \\ldots + \\beta_n x_{\\text{newn}} $简写：$ \\hat{y}_{\\text{new}} = X_{\\text{new}} \\beta $ 模型评估使用测试集计算模型的评估指标，如均方误差(MSE)、均方根误差(RMSE)、决定系统(R^2) 模型诊断检查残差图、Q-Q图等，以确保模型满足线性回归的基本假设. 模型优化如果模型不满足假设，可能需要进行特征选择、正则化、转换等步骤来优化模型. 1.6.3 最小二乘法最小化平方差 来进行参数估计. 1.7 线性回归的假设线性关系：自变量和因变量之间应存在线性关系。独立性：自变量之间相互独立，误差项相互独立。同方差性：对于所有的观测值，误差项具有恒定的方差。正态分布：误差项呈正态分布。 2. 线性回归的认识限制：现实世界的数据往往存在 非线性关系， 如果数据的真实关系是非线性的， 线性回归模型将无法准确捕捉这种复杂的模式. 怎么理解回归：在统计学和机器学习中 指一种分析方法。 用于建立一个模型，该模型能够预测或估计一个连续的响应变量(因变量)的值，基于一个或多个解释变量(自变量)的信息. 在线下回归的上下文中，回归有以下关键点：关系的推断(帮我们推断变量之间的因果关系或关联性)、预测(给的自变量的值，可以预测因变量的值)、线性关系、趋势分析、参数估计、数据拟合. 对回归的理解：推荐系统中，深度学习模型可以用于预测药物分子的活性，这是一个典型的回归问题。 回归的定义：一种统计学习方法，用于分析两个或多个变量之间的关系， 并建立一个模型来预测或估计一个连续的因变量的值，基于一个或多个自变量的值。在机器学习和深度学习中，回归问题通常指那些目标是预测连续值输出的问题，这与分类问题形成对比，分类问题的目标是预测离散的类别标签。 回归和分类 在建模过程、模型评估、应用实践中有许多相似之处。 是数据分析和机器学习中的核心方法. 二、逻辑回归一种广泛应用于统计学和机器学习中的回归算法，它用于处理分类问题，尤其是二分类问题. 主要思想是 通过一个或多个自变量的线性组合来估计某个事件发生的概率。线性回归的主要思想是：通过一个或多个自变量的线性组合来预测一个因变量的值 1. 模型形式(原理)逻辑回归模型使用逻辑函数（如Sigmoid函数或双曲正切函数）将线性回归模型的输出映射到概率空间（0, 1）上，表示概率。这个概率表示某个实例属于特定类别的可能性。预测公式为：（线性关系假设：假设特征与对数几率 之间存在线性关系）$ \\hat{p} = \\sigma(z) = \\frac{1}{1 + e^{-z}} $其中： $\\hat{p}$ 是事件发生的概率 e是自然对数的底，即欧拉常数，约等于2.71828 公式(函数)的输入$z$是 线性函数的输出，即$z$由下面公式得出： $z = w_0 + w_1x_1 + w_2x_2 + \\ldots + w_nx_n + b$ 采用向量的写法，上述公式可以写成为：$ \\mathbf{z} = \\mathbf{w}^T \\mathbf{x} + b $其中： $\\mathbf{z} $ 是输出值（标量）。 $\\mathbf{w} $ 是权重向量，大小为 $ n \\times 1 $，其中 $ n $ 是特征的数量。 $\\mathbf{x} $ 是输入特征向量，大小也为 $ n \\times 1 $。 $b $ 是偏置项（截距）。 假设函数：逻辑回归使用一个成为逻辑函数 来表示事件发生的概率 $ h_\\theta(x) = \\frac{1}{1 + e^{-\\theta^Tx}} $ 2. 参数估计参数估计的方法：最优化理论(最大似然估计、最小化损失函数(最小二乘法、梯度下降法)) 、贝叶斯估计 参数估计的方法详见：参数估计方法 逻辑回归中 最大似然估计(MLE)和梯度下降都可以使用 todo: 使用方式 实践. 2.1 最大似然估计(MLE)12假设(相较于线性回归的假设)逻辑回归不假设数据呈正态分布，它适用于分类问题. 数学原理:最优化理论/梯度下降最优化算法 3. 决策边界根据模型参数和输入特征，确定一个决策边界，将样本分到不同的类别中. 为什么是分类问题, 是离散的类别标签？123实际上，逻辑回归的输出不是离线的类别标签，这是一个常见的误解。 LR实际上是一种回归方法，它用于预测一个连续的输出值， 该输出值表示某个事件发生的概率。在二分类问题中，逻辑回归的输出是一个介于0和1之间的概率值，然后通常根据这个概率值来确定一个阈值， 以将概率映射到两个类别标签上。 LR在二分类问题中非常流行，因为它提供了一种自然的方式来估计和解释类别概率， 并且模型的参数估计具有很好的数学性质。在多分类问题中，LR可以扩展为多项式逻辑回归。 4. softmax回归和逻辑回归4.1 共性基于线性回归（首先计算输入特征的 线性组合）、 分类任务(一个二分类、一个多分类) 损失函数它们都使用交叉熵损失函数（Cross-Entropy Loss）来衡量模型预测与实际标签之间的差异。逻辑回归使用二元交叉熵损失，而Softmax回归使用多类别交叉熵损失。 最大似然估计在训练过程中，它们通常使用最大似然估计来优化模型参数，通过最小化损失函数来找到最佳参数。 梯度下降优化两者在训练时都可以通过梯度下降或其变体（如随机梯度下降）来更新模型权重。 特征重要性在模型训练完成后，线性回归系数可以提供关于特征对预测结果影响的重要性的洞察。 都应用于线性可分问题. 模型泛化(todo 泛化的理解，和规则的区别和优势)它们都关注模型的泛化能力，即在新的、未见过的数据上的表现。 4.2 差异Softmax回归：专为多分类问题设计，它可以输出每个类别的预测概率。 概率解释逻辑回归：输出的是事件发生的单个概率值； Softmax回归：输出的是每个类别的相对概率分布。) Softmax回归：模型输出一个概率向量，其中每个元素代表一个类别的相对概率，概率最高的类别被选为预测结果。 应用场景逻辑回归：适用于二分类问题，如垃圾邮件检测、疾病诊断等。Softmax回归：适用于多分类问题，如手写数字识别（MNIST）、图像分类等。","tags":[{"name":"ML","slug":"ML","permalink":"https://wiki.quartz.ren/tags/ML/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}]},{"title":"自然语言处理与人工智能的关系","date":"2020-10-02T14:55:57.000Z","path":"wk/算法/001.机器学习/009.一些杂文/002.自然语言处理与人工智能的关系/","text":"AI： 数据、算法、计算能力AI: 计算智能、感知智能、认知智能 最底层是所谓的运算智能，计算机在记忆存储和运算远远超过人类，以前我们还认为这是一种智能，但现在已经没有人在讨论人工智能的时候，把它也作为智能，但它是一切人工智能的基础。再往上就是感知智能，就包括听觉、视觉、触觉等等，在过去几年取得了突飞猛进的结果。再往上是认知智能，认知智能主要是语言知识和推理。今天讲座的主题就是在语言智能这个领域。这三者是密切相关的，语言的能力强了，对问题的理解就强，获取知识的能力强，那么推理的能力也强。所以语言智能是认知智能中最重要的一个。再往上就是创造智能，就是说从无到有产生一个想法，甚至一套理论，把它勾画出来，再通过实践验证出来，产生一个新的事物、物体或者意识。这方面的智能目前计算机还是比较薄弱。 基础层大数据、算法、大计算 感知层语音、图像、视频、 AR/VR 认知层自然语言处理、知识图谱、用户画像 平台层AI开放平台 应用层产品应用 自然语言处理自然语言处理（Natural Language Processing，简称NLP）就是用计算机来处理、理解以及运用人类语言(如中文、英文等)，它属于人工智能的一个分支，是计算机科学与语言学的交叉学科，又常被称为计算语言学 广义的自然语言处理包含了语音，狭义的自然语言处理仅指处理及理解文本 相关术语：自然语言理解、计算语言学、文本挖掘 自然语言处理，就是研究语言的理解和运用一、什么是自然语言处理自然语言处理是计算机科学领域与人工智能领域中的一个重要方向。它研究能实现人与计算机之间用自然语言进行有效通信的各种理论和方法。自然语言处理是一门融语言学、计算机科学、数学于一体的科学。因此，这一领域的研究将涉及自然语言，即人们日常使用的语言，所以它与语言学的研究有着密切的联系，但又有重要的区别。自然语言处理并不是一般地研究自然语言，而在于研制能有效地实现自然语言通信的计算机系统，特别是其中的软件系统。因而它是计算机科学的一部分。","tags":[{"name":"NLP","slug":"NLP","permalink":"https://wiki.quartz.ren/tags/NLP/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"009.一些杂文","slug":"算法/001-机器学习/009-一些杂文","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/009-%E4%B8%80%E4%BA%9B%E6%9D%82%E6%96%87/"}]},{"title":"README.md","date":"2020-10-02T14:55:57.000Z","path":"wk/算法/001.机器学习/009.一些杂文/003.学习资料/","text":"人工智能领域的百科全书:小白和新手入门 中文语音识别系统 jpmml 预测模型标记语言(Predictive Model Markup Language,PMML)是一种可以呈现预测分析模型的事实标准语言。标准东西的好处就是，各种开发语言都可以使用相应的包，把模型文件转成这种中间格式，而另外一种开发语言，可以使用相应的包导入该文件做线上预测。","tags":[{"name":"机器学习","slug":"机器学习","permalink":"https://wiki.quartz.ren/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"009.一些杂文","slug":"算法/001-机器学习/009-一些杂文","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/009-%E4%B8%80%E4%BA%9B%E6%9D%82%E6%96%87/"}]},{"title":"CheckStyle","date":"2020-08-27T17:13:34.000Z","path":"wk/平台工具/工作相关/环境搭建/004.checkstyle/","text":"对代码进行静态检查的工具. mavenmaven-checkstyle-plugin内置了4中规范. config/sun_checks.xmlconfig/maven_checks.xmlconfig/turbine_checks.xmlconfig/avalon_checks.xml idea checkstyle的配置idea安装Checkstyle(代码规范工具) CheckStyle, 强制你遵循编码规范","tags":[{"name":"idea","slug":"idea","permalink":"https://wiki.quartz.ren/tags/idea/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"工作相关","slug":"平台工具/工作相关","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/"},{"name":"环境搭建","slug":"平台工具/工作相关/环境搭建","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]},{"title":"google_CheckStyle","date":"2020-08-27T17:13:34.000Z","path":"wk/平台工具/工作相关/环境搭建/004_1.checkstype_google/","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE module PUBLIC &quot;-//Puppy Crawl//DTD Check Configuration 1.3//EN&quot; &quot;http://www.puppycrawl.com/dtds/configuration_1_3.dtd&quot;&gt;&lt;!-- This is a checkstyle configuration file. For descriptions ofwhat the following rules do, please see the checkstyle configurationpage at http://checkstyle.sourceforge.net/config.html --&gt;&lt;module name=&quot;Checker&quot;&gt; &lt;module name=&quot;RegexpSingleline&quot;&gt; &lt;!-- Requires a Google copyright notice in each file. Code intended to be open-sourced may have a multi-line copyright notice, so that this required text appears on the second line: &lt;pre&gt; /* * Copyright 2008 Google Inc. * * (details of open-source license...) &lt;/pre&gt; --&gt; &lt;property name=&quot;format&quot; value=&quot;^(//| \\*) Copyright (\\([cC]\\) )?[\\d]&#123;4&#125;(\\-[\\d]&#123;4&#125;)? (Google Inc\\.).*$&quot; /&gt; &lt;property name=&quot;minimum&quot; value=&quot;1&quot; /&gt; &lt;property name=&quot;maximum&quot; value=&quot;10&quot; /&gt; &lt;property name=&quot;message&quot; value=&quot;Google copyright is missing or malformed.&quot; /&gt; &lt;property name=&quot;severity&quot; value=&quot;error&quot; /&gt; &lt;/module&gt; &lt;module name=&quot;FileTabCharacter&quot;&gt; &lt;!-- Checks that there are no tab characters in the file. --&gt; &lt;/module&gt; &lt;module name=&quot;NewlineAtEndOfFile&quot;/&gt; &lt;module name=&quot;RegexpSingleline&quot;&gt; &lt;!-- Checks that FIXME is not used in comments. TODO is preferred. --&gt; &lt;property name=&quot;format&quot; value=&quot;((//.*)|(\\*.*))FIXME&quot; /&gt; &lt;property name=&quot;message&quot; value=&#x27;TODO is preferred to FIXME. e.g. &quot;TODO(johndoe): Refactor when v2 is released.&quot;&#x27; /&gt; &lt;/module&gt; &lt;module name=&quot;RegexpSingleline&quot;&gt; &lt;!-- Checks that TODOs are named. (Actually, just that they are followed by an open paren.) --&gt; &lt;property name=&quot;format&quot; value=&quot;((//.*)|(\\*.*))TODO[^(]&quot; /&gt; &lt;property name=&quot;message&quot; value=&#x27;All TODOs should be named. e.g. &quot;TODO(johndoe): Refactor when v2 is released.&quot;&#x27; /&gt; &lt;/module&gt; &lt;!-- All Java AST specific tests live under TreeWalker module. --&gt; &lt;module name=&quot;TreeWalker&quot;&gt; &lt;!-- IMPORT CHECKS --&gt; &lt;module name=&quot;RedundantImport&quot;&gt; &lt;!-- Checks for redundant import statements. --&gt; &lt;property name=&quot;severity&quot; value=&quot;error&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;ImportOrder&quot;&gt; &lt;!-- Checks for out of order import statements. --&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;property name=&quot;groups&quot; value=&quot;com.google,android,junit,net,org,java,javax&quot;/&gt; &lt;!-- This ensures that static imports go first. --&gt; &lt;property name=&quot;option&quot; value=&quot;top&quot;/&gt; &lt;property name=&quot;tokens&quot; value=&quot;STATIC_IMPORT, IMPORT&quot;/&gt; &lt;/module&gt; &lt;!-- JAVADOC CHECKS --&gt; &lt;!-- Checks for Javadoc comments. --&gt; &lt;!-- See http://checkstyle.sf.net/config_javadoc.html --&gt; &lt;module name=&quot;JavadocMethod&quot;&gt; &lt;property name=&quot;scope&quot; value=&quot;protected&quot;/&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;property name=&quot;allowMissingJavadoc&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;allowMissingParamTags&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;allowMissingReturnTag&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;allowMissingThrowsTags&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;allowThrowsTagsForSubclasses&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;allowUndeclaredRTE&quot; value=&quot;true&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;JavadocType&quot;&gt; &lt;property name=&quot;scope&quot; value=&quot;protected&quot;/&gt; &lt;property name=&quot;severity&quot; value=&quot;error&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;JavadocStyle&quot;&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;/module&gt; &lt;!-- NAMING CHECKS --&gt; &lt;!-- Item 38 - Adhere to generally accepted naming conventions --&gt; &lt;module name=&quot;PackageName&quot;&gt; &lt;!-- Validates identifiers for package names against the supplied expression. --&gt; &lt;!-- Here the default checkstyle rule restricts package name parts to seven characters, this is not in line with common practice at Google. --&gt; &lt;property name=&quot;format&quot; value=&quot;^[a-z]+(\\.[a-z][a-z0-9]&#123;1,&#125;)*$&quot;/&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;TypeNameCheck&quot;&gt; &lt;!-- Validates static, final fields against the expression &quot;^[A-Z][a-zA-Z0-9]*$&quot;. --&gt; &lt;metadata name=&quot;altname&quot; value=&quot;TypeName&quot;/&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;ConstantNameCheck&quot;&gt; &lt;!-- Validates non-private, static, final fields against the supplied public/package final fields &quot;^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$&quot;. --&gt; &lt;metadata name=&quot;altname&quot; value=&quot;ConstantName&quot;/&gt; &lt;property name=&quot;applyToPublic&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;applyToProtected&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;applyToPackage&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;applyToPrivate&quot; value=&quot;false&quot;/&gt; &lt;property name=&quot;format&quot; value=&quot;^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$&quot;/&gt; &lt;message key=&quot;name.invalidPattern&quot; value=&quot;Variable &#x27;&#x27;&#123;0&#125;&#x27;&#x27; should be in ALL_CAPS (if it is a constant) or be private (otherwise).&quot;/&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;StaticVariableNameCheck&quot;&gt; &lt;!-- Validates static, non-final fields against the supplied expression &quot;^[a-z][a-zA-Z0-9]*_?$&quot;. --&gt; &lt;metadata name=&quot;altname&quot; value=&quot;StaticVariableName&quot;/&gt; &lt;property name=&quot;applyToPublic&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;applyToProtected&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;applyToPackage&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;applyToPrivate&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;format&quot; value=&quot;^[a-z][a-zA-Z0-9]*_?$&quot;/&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;MemberNameCheck&quot;&gt; &lt;!-- Validates non-static members against the supplied expression. --&gt; &lt;metadata name=&quot;altname&quot; value=&quot;MemberName&quot;/&gt; &lt;property name=&quot;applyToPublic&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;applyToProtected&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;applyToPackage&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;applyToPrivate&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;format&quot; value=&quot;^[a-z][a-zA-Z0-9]*$&quot;/&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;MethodNameCheck&quot;&gt; &lt;!-- Validates identifiers for method names. --&gt; &lt;metadata name=&quot;altname&quot; value=&quot;MethodName&quot;/&gt; &lt;property name=&quot;format&quot; value=&quot;^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$&quot;/&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;ParameterName&quot;&gt; &lt;!-- Validates identifiers for method parameters against the expression &quot;^[a-z][a-zA-Z0-9]*$&quot;. --&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;LocalFinalVariableName&quot;&gt; &lt;!-- Validates identifiers for local final variables against the expression &quot;^[a-z][a-zA-Z0-9]*$&quot;. --&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;LocalVariableName&quot;&gt; &lt;!-- Validates identifiers for local variables against the expression &quot;^[a-z][a-zA-Z0-9]*$&quot;. --&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;/module&gt; &lt;!-- LENGTH and CODING CHECKS --&gt; &lt;module name=&quot;LineLength&quot;&gt; &lt;!-- Checks if a line is too long. --&gt; &lt;property name=&quot;max&quot; value=&quot;$&#123;com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.max&#125;&quot; default=&quot;100&quot;/&gt; &lt;property name=&quot;severity&quot; value=&quot;error&quot;/&gt; &lt;!-- The default ignore pattern exempts the following elements: - import statements - long URLs inside comments --&gt; &lt;property name=&quot;ignorePattern&quot; value=&quot;$&#123;com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.ignorePattern&#125;&quot; default=&quot;^(package .*;\\s*)|(import .*;\\s*)|( *\\* *https?://.*)$&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;LeftCurly&quot;&gt; &lt;!-- Checks for placement of the left curly brace (&#x27;&#123;&#x27;). --&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;RightCurly&quot;&gt; &lt;!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on the same line. e.g., the following example is fine: &lt;pre&gt; if &#123; ... &#125; else &lt;/pre&gt; --&gt; &lt;!-- This next example is not fine: &lt;pre&gt; if &#123; ... &#125; else &lt;/pre&gt; --&gt; &lt;property name=&quot;option&quot; value=&quot;same&quot;/&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;/module&gt; &lt;!-- Checks for braces around if and else blocks --&gt; &lt;module name=&quot;NeedBraces&quot;&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;UpperEll&quot;&gt; &lt;!-- Checks that long constants are defined with an upper ell.--&gt; &lt;property name=&quot;severity&quot; value=&quot;error&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;FallThrough&quot;&gt; &lt;!-- Warn about falling through to the next case statement. Similar to javac -Xlint:fallthrough, but the check is suppressed if a single-line comment on the last non-blank line preceding the fallen-into case contains &#x27;fall through&#x27; (or some other variants which we don&#x27;t publicized to promote consistency). --&gt; &lt;property name=&quot;reliefPattern&quot; value=&quot;fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on&quot;/&gt; &lt;property name=&quot;severity&quot; value=&quot;error&quot;/&gt; &lt;/module&gt; &lt;!-- MODIFIERS CHECKS --&gt; &lt;module name=&quot;ModifierOrder&quot;&gt; &lt;!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and 8.4.3. The prescribed order is: public, protected, private, abstract, static, final, transient, volatile, synchronized, native, strictfp --&gt; &lt;/module&gt; &lt;!-- WHITESPACE CHECKS --&gt; &lt;module name=&quot;WhitespaceAround&quot;&gt; &lt;!-- Checks that various tokens are surrounded by whitespace. This includes most binary operators and keywords followed by regular or curly braces. --&gt; &lt;property name=&quot;tokens&quot; value=&quot;ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN&quot;/&gt; &lt;property name=&quot;severity&quot; value=&quot;error&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;WhitespaceAfter&quot;&gt; &lt;!-- Checks that commas, semicolons and typecasts are followed by whitespace. --&gt; &lt;property name=&quot;tokens&quot; value=&quot;COMMA, SEMI, TYPECAST&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;NoWhitespaceAfter&quot;&gt; &lt;!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --&gt; &lt;property name=&quot;tokens&quot; value=&quot;BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS&quot;/&gt; &lt;property name=&quot;allowLineBreaks&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;severity&quot; value=&quot;error&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;NoWhitespaceBefore&quot;&gt; &lt;!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --&gt; &lt;property name=&quot;tokens&quot; value=&quot;SEMI, DOT, POST_DEC, POST_INC&quot;/&gt; &lt;property name=&quot;allowLineBreaks&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;severity&quot; value=&quot;error&quot;/&gt; &lt;/module&gt; &lt;module name=&quot;ParenPad&quot;&gt; &lt;!-- Checks that there is no whitespace before close parens or after open parens. --&gt; &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt; &lt;/module&gt; &lt;/module&gt;&lt;/module&gt;","tags":[{"name":"idea","slug":"idea","permalink":"https://wiki.quartz.ren/tags/idea/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"工作相关","slug":"平台工具/工作相关","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/"},{"name":"环境搭建","slug":"平台工具/工作相关/环境搭建","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]},{"title":"Mongo常用命令","date":"2020-08-23T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Mongo/Mongo常用命令/","text":"创建索引1db.persons.createIndex(&#123;name:1,email:1&#125;,&#123;unique:true&#125;) 索引相关","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Mongo","slug":"数据/数据处理/DataStore/Mongo","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Mongo/"}]},{"title":"还记得儿时的梦吗","date":"2020-07-23T01:56:24.000Z","path":"wk/项目管理/[3]生活学习/这些都是历史/还记得儿时的梦吗/","text":"还记得儿时的梦吗. “像朵永不凋谢的花！” 听着很容易让人反思和感慨. 像是被提醒 不要忘记初心. (但我也没有完全理解) 还记得儿时的梦吗? 2“我要飞的很高” 其实小时候看的电视剧比较多， 映像深刻的是 在环境很好的写字楼里上班, 聊天, 生活. 但后来发现, 这没什么意义和价值. 再后来 面临选专业, 我也不知道选什么, 因为不知道有哪些专业. 记得对计算机比较感兴趣, 所以高中的时候 告诉同学 我可能回报计算机专业. (然后没有告诉同学的是, 甚至连我都没有意识到 我期望的是只有一条, 走的更远. ) 3还记得儿时的梦吗， 想朵永不凋零的花。 其实我们很多人没有明确的梦想, 可能。 因为 老师教给我们的只有灌输的 知识, 没有给我们一点自主意识. 让我们可以考虑梦想. 「教育」 4小时候，我们想读研究生, 相当科学家, 又或者我们一直会是名列前茅的佼佼者. 到后来，慢慢发现，其实我们之前在意的并不是那么重要, 我们也只是在几种平凡的角色上折腾一生.","tags":[{"name":"生活学习","slug":"生活学习","permalink":"https://wiki.quartz.ren/tags/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"这些都是历史","slug":"项目管理/3-生活学习/这些都是历史","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%E8%BF%99%E4%BA%9B%E9%83%BD%E6%98%AF%E5%8E%86%E5%8F%B2/"}]},{"title":"RCNN","date":"2020-06-02T14:55:57.000Z","path":"wk/算法/003.图像识别/OCR/001.RCNN目标检测/","text":"RCNN (Region CNN)region 区域, 行政区, 范围 一. 速度经典的目标检测算法 使用滑动窗法依次判断所有可能的区域。(大概判断多少个?) RCNN 则预先提取一系列较可能是物体的候选区域，之后仅在这些候选区域上提取特征，进行判断。 二. RCNN 训练集经典的目标检测算法 在区域中提取人工设定的特征（Haar，HOG）. RCNN 则需要训练深度网络进行特征提取.可供使用的有两个数据库： 一个较大的识别库（ImageNet ILSVC 2012）：标定每张图片中物体的类别。一千万图像，1000类。 一个较小的检测库（PASCAL VOC 2007）：标定每张图片中，物体的类别和位置。一万图像，20类。 使用识别库进行预训练，而后用检测库调优参数。最后在检测库上评测。 三. 流程RCNN算法分为4个步骤 一张图像生成1K~2K个候选区域 对每个候选区域，使用深度网络提取特征 特征送入每一类的SVM 分类器，判别是否属于该类 使用回归器精细修正候选框位置 1. 候选区域生成Selective Search方法.从一张图像生成约2000-3000个候选区域。 思路如下： 123- 使用一种过分割手段，将图像分割成小区域- 查看现有小区域，合并可能性最高的两个区域。重复直到整张图像合并成一个区域位置- 输出所有曾经存在过的区域，所谓候选区域 2. 特征提取 预处理 归一化： 使用深度网络提取特征之前, 首先把候选区域归一化成同一尺寸227×227. 预训练 基本借鉴Hinton 2012年在Image Net上的分类网络2，略作简化3。 此网络提取的特征为4096维，之后送入一个4096-&gt;1000的全连接(fc)层进行分类。学习率0.01。 训练数据 使用ILVCR 2012的全部数据进行训练，输入一张图片，输出1000维的类别标号。","tags":[{"name":"rcnn","slug":"rcnn","permalink":"https://wiki.quartz.ren/tags/rcnn/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"003.图像识别","slug":"算法/003-图像识别","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"},{"name":"OCR","slug":"算法/003-图像识别/OCR","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/OCR/"}]},{"title":"PSENet","date":"2020-06-02T14:55:57.000Z","path":"wk/算法/003.图像识别/OCR/002.PSENet目标检测/","text":"psenet作为一种基于分割的方法，能够对任意形状的文本进行定位.其次，该模型提出了一种渐进的尺度扩展算法，该算法可以成功地识别相邻文本实例（该算法在下文会详细介绍）。 YOLO、CTPN、PSENet比较YOLO和CTPN的检测速度较快，PSENet的检测速度稍慢，YOLO对于长文本或短文本的很容易出现缺损或丢失的情况，CPTN在长短文本方面效果好一些，但是文本对齐效果不理想，PSENet在检测效果方面是碾压了前两者的。PSENet不仅适应任意角度的文本检测，而且对近距离文本分割效果更好。 PSENetProgression Scale Expansion Network. (渐进式规模扩展网络) Overall Pipeline","tags":[{"name":"CV","slug":"CV","permalink":"https://wiki.quartz.ren/tags/CV/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"003.图像识别","slug":"算法/003-图像识别","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"},{"name":"OCR","slug":"算法/003-图像识别/OCR","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/OCR/"}]},{"title":"002.重新开启wsl后 k8s集群恢复.","date":"2020-05-19T05:13:34.000Z","path":"wk/平台工具/MicroService/容器云平台/002.重启wsl后的k8s集群恢复/","text":"ps -ef | grep docker. 删除 docker 相关进程. 不然docker没法启动. 如果还不行，则： rm -rf /var/run/docker* 重启集群 wslk8s. 打开dashboard. 12345678kind delete cluster --name wslk8skind create cluster --name wslk8s# dashboardkubectl apply -f recommended.yaml# 获取 dashboard 的资源对象(验证)kubectl get all -n kubernetes-dashboard 确保docker启动正常. 重启 12kind delete cluster --name wslk8skind create cluster --name wslk8s 查看集群 1kubectl cluster-info --context kind-wslk8s 使用 kubectl proxy —port=8015 &amp; 后台开启dashboard. http://127.0.0.1:8015/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/#/workloads?namespace=default 4.部署容器化应用","tags":[{"name":"k8s","slug":"k8s","permalink":"https://wiki.quartz.ren/tags/k8s/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"容器云平台","slug":"平台工具/MicroService/容器云平台","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%AE%B9%E5%99%A8%E4%BA%91%E5%B9%B3%E5%8F%B0/"}]},{"title":"minikube使用","date":"2020-05-19T05:13:34.000Z","path":"wk/平台工具/MicroService/容器云平台/003.minikube使用/","text":"1. 安装curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube 2. 启动minikube start —force —driver=docker 3. dashboardminikube dashboardeval $(minikube docker-env) 或者 后端启动. kubectl proxy —port=8017 &amp;","tags":[{"name":"k8s","slug":"k8s","permalink":"https://wiki.quartz.ren/tags/k8s/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"容器云平台","slug":"平台工具/MicroService/容器云平台","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%AE%B9%E5%99%A8%E4%BA%91%E5%B9%B3%E5%8F%B0/"}]},{"title":"nfs-server部署","date":"2020-05-19T05:13:34.000Z","path":"wk/平台工具/MicroService/容器云平台/004.nfs-server部署/","text":"使用docker镜像搭建 nfs-server服务.docker run -d —restart=always —privileged -v /mnt/d/DockerData/nfs01:/nfs -e NFS_EXPORT_DIR_1=/nfs -e NFS_EXPORT_DOMAIN_1=* -e NFS_EXPORT_OPTIONS_1=rw,insecure,no_subtree_check,no_root_squash,fsid=1 -p 111:111 -p 111:111/udp -p 2049:2049 -p 2049:2049/udp -p 32765:32765 -p 32765:32765/udp -p 32766:32766 -p 32766:32766/udp -p 32767:32767 -p 32767:32767/udp fuzzle/docker-nfs-server:latest 验证","tags":[{"name":"k8s","slug":"k8s","permalink":"https://wiki.quartz.ren/tags/k8s/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"容器云平台","slug":"平台工具/MicroService/容器云平台","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%AE%B9%E5%99%A8%E4%BA%91%E5%B9%B3%E5%8F%B0/"}]},{"title":"K8S的StorageClass实战(NFS)","date":"2020-05-19T05:13:34.000Z","path":"wk/平台工具/MicroService/容器云平台/005.K8S的StorageClass实战/","text":"K8S的StorageClass实战(NFS) 在K8S环境，当pod需要存储空间时，StorageClass比PV更灵活和方便，官方文档地址 依赖nfs. 先暂停. hbase 还是使用pv吧.","tags":[{"name":"k8s","slug":"k8s","permalink":"https://wiki.quartz.ren/tags/k8s/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"容器云平台","slug":"平台工具/MicroService/容器云平台","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%AE%B9%E5%99%A8%E4%BA%91%E5%B9%B3%E5%8F%B0/"}]},{"title":"1.Anaconda安装","date":"2020-05-19T05:13:34.000Z","path":"wk/算法/001.机器学习/001.工作环境搭建/001.Anaconda安装/","text":"一、概述Anaconda是一个面向科学计算的Python发行版。基于Python语言，包含了数据科学和机器学习领域中常用的库和工具。(通常用于数据科学、机器学习、科学计算和分析领域) Anaconda 提供了一个集成的解决方案，包括Conda、Python以及一系列预安装的库和工具。 其中集成的conda.是一个开源的包管理系统和环境管理系统，用于安装和管理软件包以及维护不同的软件环境。不仅限于Python，还包括R、Ruby、Lua、Scala等。Conda 可以独立于Anaconda使用 二、安装我选择安装 Miniconda 是 Anaconda的一个轻量级代替(默认只包含了 python 和 conda，但是可以通过 pip 和 conda 来安装所需要的包). 1.(资料)关于AnacondaAnaconda是一个可用于科学计算的Python发行版.[Python]Anaconda安装和使用指南清华大学开源软件镜像站 2.Miniconda安装下载地址:清华镜像站 我选择了 Miniconda3-py37_4.8.2-MacOSX-x86_64.pkg安装的程序路径在 /opt/miniconda3/lib/python3.7. 相关python的依赖也是在此路径下。 3. 使用安装完成默认 配置了bash_profile。 所以重新打开下终端即刻引入环境。 可以使用 conda 命令。 3.1 conda命令conda是一个几乎支持 所有编程语言的 开源的 软件包管理系统 和环境管理系统。conda的安装与使用 3.1.1 创建conda环境123conda create -n python2 python=2#-n: 设置新的环境的名字#python=2 指定新环境的python的版本 1234# 例如conda create -n ocr python=3.6conda create -n ml3.7 python=3.7conda create -n ml2.7 python=2.7 123# 扩展 - 安装tensorflowpip install tensorflow 3.1.2 切换python环境1conda activate ml2.7 2. 进入环境(todo 整理)查看环境conda info —envs 进入环境conda activate ocr或者 source activate ocr 删除环境conda env remove —name ml3.7 (有用)conda remove -n py36 —all 3. 退出环境conda deactivate 4. 频道相关什么是频道？ 用于指定conda软件包来源的渠道。 4.1 添加频道conda config —add channels conda config —set show_channel_urls yes 4.2 删除频道conda config —remove channels","tags":[{"name":"python","slug":"python","permalink":"https://wiki.quartz.ren/tags/python/"},{"name":"conda","slug":"conda","permalink":"https://wiki.quartz.ren/tags/conda/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"001.工作环境搭建","slug":"算法/001-机器学习/001-工作环境搭建","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/001-%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]},{"title":"Python环境Anaconda","date":"2020-05-19T05:13:34.000Z","path":"wk/平台工具/工作相关/环境搭建/005.react项目搭建/","text":"node 版本选择 15.0.1 sudo n 15.0.1 React—-使用react脚手架搭建项目","tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://wiki.quartz.ren/tags/nodejs/"},{"name":"react","slug":"react","permalink":"https://wiki.quartz.ren/tags/react/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"工作相关","slug":"平台工具/工作相关","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/"},{"name":"环境搭建","slug":"平台工具/工作相关/环境搭建","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]},{"title":"LockSupport","date":"2020-05-10T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Java/多线程/002.LockSupport/","text":"浅谈Java并发编程系列（八）—— LockSupport原理剖析 LockSupport是用来创建锁和其他同步类的基本线程阻塞原语。LockSupport 提供park()和unpark()方法实现阻塞线程和解除线程阻塞。 LockSupport和每个使用它的线程都与一个许可(permit)关联。permit相当于1，0的开关，默认是0，调用一次unpark就加1变成1，调用一次park会消费permit, 也就是将1变成0，同时park立即返回。再次调用park会变成block（因为permit为0了，会阻塞在这里，直到permit变为1）, 这时调用unpark会把permit置为1。每个线程都有一个相关的permit, permit最多只有一个，重复调用unpark也不会积累。 需要特别注意的一点：park 方法还可以在其他任何时间“毫无理由”地返回，因此通常必须在重新检查返回条件的循环里调用此方法。从这个意义上说，park 是“忙碌等待”的一种优化，它不会浪费这么多的时间进行自旋，但是必须将它与 unpark 配对使用才更高效。 自旋 permit 许可 TODO Java 中的 Monitor 机制","tags":[{"name":"Java","slug":"Java","permalink":"https://wiki.quartz.ren/tags/Java/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Java","slug":"平台工具/2-计算机基础/编程语言/Java","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"},{"name":"多线程","slug":"平台工具/2-计算机基础/编程语言/Java/多线程","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"理解神经网络","date":"2020-04-02T14:55:57.000Z","path":"wk/算法/001.机器学习/神经网络/002.理解神经网络/","text":"神经网络浅讲：从神经元到深度学习 从神经元到RNN\\CNN\\深度学习 反向传播算法的启示是数学中的链式法则。在此需要说明的是，尽管早期神经网络的研究人员努力从生物学中得到启发，但从BP算法开始，研究者们更多地从数学上寻求问题的最优解。不再盲目模拟人脑网络是神经网络研究走向成熟的标志。正如科学家们可以从鸟类的飞行中得到启发，但没有必要一定要完全模拟鸟类的飞行方式，也能制造可以飞天的飞机。 优化问题只是训练中的一个部分。机器学习问题之所以称为学习问题，而不是优化问题，就是因为它不仅要求数据在训练集上求得一个较小的误差，在测试集上也要表现好。因为模型最终是要部署到没有见过训练数据的真实场景。提升模型在测试集上的预测效果的主题叫做泛化（generalization），相关方法被称作正则化（regularization）。神经网络中常用的泛化技术有权重衰减等。 多层感知机(两层神经网络)存在的问题 一次神经网络的训练耗时太久 困扰训练优化的一个问题就是局部最优解问题 隐藏层的节点数需要调参，这使得使用不太方便，工程和研究人员对此多有抱怨 90年代中期，由Vapnik等人发明的SVM（Support Vector Machines，支持向量机）算法诞生，很快就在若干个方面体现出了对比神经网络的优势：无需调参；高效；全局最优解。基于以上种种理由，SVM迅速打败了神经网络算法成为主流。 多层神经网络（深度学习）2006年，Hinton在《Science》和相关期刊上发表了论文，首次提出了“深度信念网络”的概念 与传统的训练方式不同，“深度信念网络”有一个“预训练”（pre-training）的过程，这可以方便的让神经网络中的权值找到一个接近最优解的值.之后再使用“微调”(fine-tuning)技术来对整个网络进行优化训练。这两个技术的运用大幅度减少了训练多层神经网络的时间。他给多层神经网络相关的学习方法赋予了一个新名词—“深度学习”。 训练 在单层神经网络时，我们使用的激活函数是sgn函数。到了两层神经网络时，我们使用的最多的是sigmoid函数。而到了多层神经网络时，通过一系列的研究发现，ReLU函数在训练多层神经网络时，更容易收敛，并且预测性能更好。因此，目前在深度学习中，最流行的非线性函数是ReLU函数。ReLU函数不是传统的非线性函数，而是分段线性函数。其表达式非常简单，就是y=max(x,0)。简而言之，在x大于0，输出就是输入，而在x小于0时，输出就保持为0。这种函数的设计启发来自于生物神经元对于激励的线性响应，以及当低于某个阈值后就不再响应的模拟。 下面来讨论一下隐藏层的节点数设计。在设计一个神经网络时，输入层的节点数需要与特征的维度匹配，输出层的节点数要与目标的维度匹配。而中间层的节点数，却是由设计者指定的。因此，“自由”把握在设计者的手中。但是，节点数设置的多少，却会影响到整个模型的效果。如何决定这个自由层的节点数呢？目前业界没有完善的理论来指导这个决策。一般是根据经验来设置。较好的方法就是预先设定几个可选值，通过切换这几个值来看整个模型的预测效果，选择效果最好的值作为最终选择。这种方法又叫做Grid Search（网格搜索）。","tags":[{"name":"NLP","slug":"NLP","permalink":"https://wiki.quartz.ren/tags/NLP/"},{"name":"深度学习","slug":"深度学习","permalink":"https://wiki.quartz.ren/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"NN","slug":"NN","permalink":"https://wiki.quartz.ren/tags/NN/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"神经网络","slug":"算法/001-机器学习/神经网络","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"}]},{"title":"卷积神经网络","date":"2020-04-02T14:55:57.000Z","path":"wk/算法/001.机器学习/神经网络/003.卷积神经网络/","text":"推荐的学习blog视频ng的 B站:卷积神经网络 CNN 数学中的卷积:考研数学 blog重点推荐文章: 卷积神经网络(CNN)模型结构","tags":[{"name":"深度学习","slug":"深度学习","permalink":"https://wiki.quartz.ren/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"CNN","slug":"CNN","permalink":"https://wiki.quartz.ren/tags/CNN/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"神经网络","slug":"算法/001-机器学习/神经网络","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"}]},{"title":"OCR项目学习","date":"2020-04-02T14:55:57.000Z","path":"wk/算法/003.图像识别/OCR/003.OCR项目学习/","text":"文本检测综述：基于深度学习文本检测的十全大补丸 以上是文本检测的一个综述. 下边是基于psenet实现的一个项目 chineseocr_litehttps://github.com/ouyanghuiyu/chineseocr_lite https://github.com/whai362/psenet PSENet论文翻译 CRNN理解文本识别网络CRNN CRNN网络结构详解 1231. CNN（卷积层），使用深度CNN，对输入图像提取特征，得到特征图；2. RNN（循环层），使用双向RNN（BLSTM）对特征序列进行预测，对序列中的每个特征向量进行学习，并输出预测标签（真实值）分布；3. CTC loss（转录层），使用 CTC 损失，把从循环层获取的一系列标签分布转换成最终的标签序列。 1. CNN一共有四个最大池化层.但是最后两个池化层的窗口尺寸由 2x2 改为 1x2，也就是图片的高度减半了四次（除以 [公式] ），而宽度则只减半了两次（除以 [公式] ），这是因为文本图像多数都是高较小而宽较长.所以其feature map也是这种高小宽长的矩形形状，如果使用1×2的池化窗口可以尽量保证不丢失在宽度方向的信息，更适合英文字母识别（比如区分i和l）. CRNN 还引入了BatchNormalization模块，加速模型收敛，缩短训练过程。 输入图像为灰度图像（单通道）；高度为32，这是固定的，图片通过 CNN 后，高度就变为1，这点很重要；宽度为160，宽度也可以为其他的值，但需要统一，所以输入CNN的数据尺寸为 (channel, height, width)=(1, 32, 160) 2. Map-to-Sequence我们是不能直接把 CNN 得到的特征图送入 RNN 进行训练的，需要进行一些调整，根据特征图提取 RNN 需要的特征向量序列。 3. RNN完全解析RNN, Seq2Seq, Attention注意力机制 循环神经网络RNN结构.被广泛应用于自然语言处理、机器翻译、语音识别、文字识别等方向. 在此项目中,Recurrent Layers 是一个深层双向LSTM网络.在卷积特征的基础上继续提取文字序列特征. 所谓深层RNN网络，是指超过两层的RNN网络 长短期记忆（Long short-term memory, LSTM）是一种特殊的RNN.主要是为了解决长序列训练过程中的梯度消失和梯度爆炸问题。简单来说，就是相比普通的RNN，LSTM能够在更长的序列中有更好的表现。 anglenet","tags":[{"name":"OCR","slug":"OCR","permalink":"https://wiki.quartz.ren/tags/OCR/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"003.图像识别","slug":"算法/003-图像识别","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"},{"name":"OCR","slug":"算法/003-图像识别/OCR","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/OCR/"}]},{"title":"OpenCV","date":"2020-04-02T14:55:57.000Z","path":"wk/算法/003.图像识别/OCR/004.OpenCV/","text":"OpenCV是一个计算机视觉和机器学习软件库. C++语言编写. 为什么有OpenCV. 他的目的或者主要作用是什么？？ 提供标准的API.(图像处理,计算机视觉方面很多通用的算法) 支持多种语言的接口.多平台支持 (为图像研究和应用领域提供方面快捷高效的算法工具) 1.OpenCV 的 dnn模块专门用来实现深度神经网络相关的功能. OpenCV自己并不能训练神经网络模型，但是他可以载入的深度学习框架(例如tensorFlow,Caffe等) 训练好的模型,然后使用该模型做inference(预测) 而且OpenCV在载入模型时会使用自己的dnn模块对模型重写,使得模型的运行效率更高. 所以先用自己熟悉的深度学习框架训练好，然后使用OpenCV的dnn模块载入. 2.使用OpenCV的dnn模块实时目标检测使用OpenCV的dnn模块实时目标检测","tags":[{"name":"OCR","slug":"OCR","permalink":"https://wiki.quartz.ren/tags/OCR/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"003.图像识别","slug":"算法/003-图像识别","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"},{"name":"OCR","slug":"算法/003-图像识别/OCR","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/OCR/"}]},{"title":"PaddleOCR实践","date":"2020-04-02T14:55:57.000Z","path":"wk/算法/003.图像识别/OCR/005.PaddleOCR实践/","text":"1. 环境搭建资料：https://gitee.com/quano/PaddleOCR 可检查获取最新的代码及更新. 1.1 镜像构建1.1.1 下载整个项目1git clone https://gitee.com/quano/PaddleOCR.git 1.1.2 下载模型文件模型列表 可以使用mobile轻量模型，也可尝试server模型. 1.1.3 打包创建/PaddleOCR/inference/路径，将模型解压后的文件放入然后获取Dockerfile调整(dockerfile中解压文件去掉，在工作环境解压好)后，通过 docker build -t paddleocr:gpu0 . 命令打包成镜像 打包后的镜像名称为： paddleocr:gpu0， 通过 docker images 命令可以查看到. 1.1.4 镜像调整123456# 进入镜像，测试环境是否正确，解决遇到的问题sudo docker run -p 8866:8866 --gpus all --name paddle_ocr -it paddleocr:gpu0 bash# 编辑完后，可以使用以下命令 重新进入 （容器）sudo docker start $容器IDsudo docker exec -it $容器ID bash 解决遇到的问题 1234567891011121314151617181920212223242526hub install deploy/hubserving/ocr_system/ &amp;&amp; hub serving start -m ocr_system# 问题：ModuleNotFoundError: No module named &#x27;paddle.utils.cpp_extension&#x27;# 解决 - pip 重新安装 paddlehubpip3.7 install --upgrade pip -i https://mirror.baidu.com/pypi/simplepip3.7 install paddlehub --upgrade -i https://mirror.baidu.com/pypi/simplepip3.7 install -r requirements.txt -i https://mirror.baidu.com/pypi/simple# 好像 安装 paddlepaddle 就可以， 不用执行上边2个.pip3.7 install paddlepaddle -i https://mirror.baidu.com/pypi/simple# 问题2 protobuf 问题（版本落后，进行升级）pip3.7 install protobuf==3.20# 再次执行 hub# 问题3. 模型路径问题ValueError: not find model file path ./inference/ch_PP-OCRv2_det_infer//inference.pdmodel# 解决# 编辑 deploy/hubserving/ocr_system/params.py， 修改模型文件路径。 （最好在 开发环境修改，而不是在容器里再修改）# 因为容器内没有vim编辑器。 所以在 工作环境(也可以是宿主机) 编辑后，再cp到容器环境。docker cp &lt;container_id_or_name&gt;:/PaddleOCR/deploy/hubserving/ocr_system/params.py .# 编辑完后docker cp params.py &lt;container_id_or_name&gt;:/PaddleOCR/deploy/hubserving/ocr_system/params.py# 再次执行 hub. 成功！！！！ 1.1.5 测试使用 https://gitee.com/quano/east-nlp/tree/master/east_paddelocr/.tcloud 中的文件测试 12sh test.txtsh test.txt2 1.2 镜像保存使用 docker commit 保存成镜像。 1.3 模型解读1.3.1 工程解读 怎么加载的。 怎么切换cpu、gpu； 还是说只能有单独的环境。 都有哪些模型，执行流程 1.3.1.1 模型流程1.3.2 算法解读","tags":[{"name":"OCR","slug":"OCR","permalink":"https://wiki.quartz.ren/tags/OCR/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"003.图像识别","slug":"算法/003-图像识别","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"},{"name":"OCR","slug":"算法/003-图像识别/OCR","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/OCR/"}]},{"title":"1.窗口篇(二)","date":"2020-03-20T03:55:57.000Z","path":"wk/数据/数据处理/Flink/flink技术点/2.窗口篇-2/","text":"123456789101112131415161718192021222324/** * Base interface for functions that are evaluated over keyed (grouped) windows. * * @param &lt;IN&gt; The type of the input value. * @param &lt;OUT&gt; The type of the output value. * @param &lt;KEY&gt; The type of the key. * @param &lt;W&gt; The type of &#123;@code Window&#125; that this window function can be applied on. */@Publicpublic interface WindowFunction&lt;IN, OUT, KEY, W extends Window&gt; extends Function, Serializable &#123; /** * Evaluates the window and outputs none or several elements. * * @param key The key for which this window is evaluated. * @param window The window that is being evaluated. * @param input The elements in the window being evaluated. * @param out A collector for emitting elements. * * @throws Exception The function may throw exceptions to fail the program and trigger recovery. */ void apply(KEY key, W window, Iterable&lt;IN&gt; input, Collector&lt;OUT&gt; out) throws Exception;&#125; 通过窗口触发器产生一个窗口后，使用 WindowFunction 对窗口进行处理 1234.keyBy(ActionEntity::getIp) // 设置处理时间滑动窗口：窗口长度为30s，步长5s .timeWindow(Time.seconds(60),Time.seconds(10))","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"Flink","slug":"数据/数据处理/Flink","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/"},{"name":"flink技术点","slug":"数据/数据处理/Flink/flink技术点","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/flink%E6%8A%80%E6%9C%AF%E7%82%B9/"}]},{"title":"1.窗口篇(一)","date":"2020-03-20T03:55:57.000Z","path":"wk/数据/数据处理/Flink/flink技术点/1.窗口篇-1/","text":"数据分析实践 | flink | window窗口篇 滚动窗口: FlinkSql资料 01 数据处理前的分流窗口在处理数据前，会对数据做分流，有两种控制流的方式。 也就是按照原始数据流中的某个key进行分类，拥有同一个key值的数据流将为进入同一个window，多个窗口并行的逻辑流 02 窗口函数的准备对于每个window必备的是触发器Trigger和一个附加在window上的函数 ProcessWindowFunction ReduceFunction AggregateFunction FoldFunction 用于实现window中对数据流的操作. 在对数据流做处理前，需要先预设一些窗口的配置，先看一下窗口的一些类型: 1. 划分 time 根据时间划分时间类型： EventTime 数据本身携带的时间 ProcessingTime 处理时间 count 根据数据量划分窗口 2. 属性 size=interval 无重叠数据,可理解为翻滚窗口， size&gt;interval 有重叠数据，可理解为滑动窗口 于是一共有这几个窗口类型 无重叠时间窗口 有重叠时间窗口 有重叠数据窗口 无重叠数据窗口 实际场景中用的较多的还是时间窗口，以时间窗口为例。 3. 时间窗口声明使用的窗口时间类型. 选择完时间类型之后，我们优先挑选最复杂的一种情况来说明时间戳和水位线的工作机制，如果选择了EventTime，需要指定数据流中的时间戳。 时间戳分配与生成水印密切相关，水印告诉系统事件时间的进展。决定水位线的高度。 4. 水位线Watermark通常在处理EventTime事件时间的时候使用，流式传输程序需要相应地设置时间特性。数据流的到达顺序我们无法保证的情况下，需要对迟到的数据进行处理，Periodic水位线便是配置这个特性。AssignerWithPeriodicWatermarks分配时间戳并定期生成水印 03 窗口函数窗口函数是触发器在确认窗口数据到达完毕后，执行的函数。 AggerateFunction/ReduceFunction/FoldFunction/… 此类为数据计算函数，适用于仅计算，无需做时间窗口的情况。AggerateFunction为用户自定义函数，可以按照个人需求做各类统计。 WindowFunction/ProcessWindowFunction/…此类为做窗口函数，适用于无需计算只做时间窗口统计的情况。（ps.貌似很少有这样的情况猴）","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"Flink","slug":"数据/数据处理/Flink","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/"},{"name":"flink技术点","slug":"数据/数据处理/Flink/flink技术点","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/flink%E6%8A%80%E6%9C%AF%E7%82%B9/"}]},{"title":"2.水位线(watermark)","date":"2020-03-20T03:55:57.000Z","path":"wk/数据/数据处理/Flink/flink技术点/3.水位线/","text":"watermark（水位线）简介 问题：基于processTime 做一些处理的时候，比如统计，1分钟内 如果处理过快，那统计就不准确。 01 什么是水位线watermark是一种衡量EventTime进展的机制，它是数据本身的一个隐藏属性. 什么含义呢，表示水位线时间的数据都已经到达了. 02 watermark有什么用？watermark是用于处理乱序事件的，而正确的处理乱序事件，通常用watermark机制结合window来实现。 03 watermark如何分配？第一种可以定义一个最大允许乱序的时间，这种情况应用较多。 速度收藏！看完这份知识图谱，才算搞懂 Flink！ Flink-Table-&amp;-SQL 基于 Flink 构建 CEP 引擎的挑战和实践 Flink-cep 动态改变规则案例","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"Flink","slug":"数据/数据处理/Flink","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/"},{"name":"flink技术点","slug":"数据/数据处理/Flink/flink技术点","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/flink%E6%8A%80%E6%9C%AF%E7%82%B9/"}]},{"title":"Influxdb环境搭建","date":"2020-03-18T09:10:49.000Z","path":"wk/平台工具/中间件_组件/Influxdb/Influxdb环境搭建/","text":"1234docker run -d -p 8083:8083 -p8086:8086 --expose 8090 --expose 8099 --name influxsrv tutum/influxdb## docker run -d -p 8083:8083 -p8086:8086 --expose 8090 --expose 8099 --name influxsrv influxdb influxdb操作 influxdb 操作.CREATE RETENTION POLICY “hummer-metric” ON “app-metric” DURATION 60d REPLICATION 1 DEFAULT","tags":[{"name":"Python","slug":"Python","permalink":"https://wiki.quartz.ren/tags/Python/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Influxdb","slug":"平台工具/中间件-组件/Influxdb","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Influxdb/"}]},{"title":"正则表达式","date":"2020-03-09T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Java/正则表达式/001.常用正则/","text":"正则表达式之数字 一张思维导图，让正则表达式不再难懂","tags":[{"name":"Java","slug":"Java","permalink":"https://wiki.quartz.ren/tags/Java/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Java","slug":"平台工具/2-计算机基础/编程语言/Java","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"},{"name":"正则表达式","slug":"平台工具/2-计算机基础/编程语言/Java/正则表达式","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}]},{"title":"KafkaConsumer为何使用pull模式","date":"2020-03-01T05:55:57.000Z","path":"wk/数据/数据处理/DataStore/Kafka/kafka设计解析/1.KafkaConsumer为何使用pull模式/","text":"kafka的作用：数据管道和消息系统 130681 | 涿州市130684 | 高碑店市130208 | 丰润区120119 | 蓟州区120225 | 蓟县450100 | 南宁市120118 | 静海区120114 | 武清区451300 | 来宾市450500 | 北海市130900 | 沧州市131000 | 廊坊市420600 | 襄阳市","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Kafka","slug":"数据/数据处理/DataStore/Kafka","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Kafka/"},{"name":"kafka设计解析","slug":"数据/数据处理/DataStore/Kafka/kafka设计解析","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Kafka/kafka%E8%AE%BE%E8%AE%A1%E8%A7%A3%E6%9E%90/"}]},{"title":"rocksdb源码环境配置","date":"2020-02-27T17:13:34.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/rocksdb源码学习/001.环境配置问题/","text":"jni.h 增加jdk的 jni路径到项目汇总。 问题. rocksdbjni 目录下的 .cc 文件找不到 .h 头文件. 比如：#include “include/org_rocksdb_CompactionJobStats.h” include “include/org_rocksdb_StringAppendOperator.h” 等. 找不到这些头文件？did not match “(GNU assembler)|(GCC)|(Free Software Foundation)”:无论是打开环境 还是编译 snappy 的时候， 都出现这个问题。 应该是 clang环境配置(mac)的问题。 在 snappy-1.1.7/build 目录下执行 cmake ../ 的时候出现的. 可能需要通过修改 cmakeFile 解决这个问题 clang 编译发布可用jarmake rocksdbjavastaticrelease 其中使用了 vagrant. (建议使用linux编译. 然后apt直接安装)","tags":[{"name":"rocksdb源码","slug":"rocksdb源码","permalink":"https://wiki.quartz.ren/tags/rocksdb%E6%BA%90%E7%A0%81/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"},{"name":"rocksdb源码学习","slug":"平台工具/2-计算机基础/编程语言/C/rocksdb源码学习","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/rocksdb%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"}]},{"title":"Merge源码解析","date":"2020-02-27T17:13:34.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/rocksdb源码学习/merge操作/","text":"12345678910111213141516171819202122232425262728293031323334struct MergeOperationInput &#123;explicit MergeOperationInput(const Slice&amp; _key, const Slice* _existing_value, const std::vector&lt;Slice&gt;&amp; _operand_list, Logger* _logger) : key(_key), existing_value(_existing_value), operand_list(_operand_list), logger(_logger) &#123;&#125;// The key associated with the merge operation.const Slice&amp; key;// The existing value of the current key, nullptr means that the// value doesn&#x27;t exist.const Slice* existing_value;// A list of operands to apply.const std::vector&lt;Slice&gt;&amp; operand_list;// Logger could be used by client to log any errors that happen during// the merge operation.Logger* logger;&#125;;struct MergeOperationOutput &#123;explicit MergeOperationOutput(std::string&amp; _new_value, Slice&amp; _existing_operand) : new_value(_new_value), existing_operand(_existing_operand) &#123;&#125;// Client is responsible for filling the merge result here.std::string&amp; new_value;// If the merge result is one of the existing operands (or existing_value),// client can set this field to the operand (or existing_value) instead of// using new_value.Slice&amp; existing_operand;&#125;; 问题: 首先要明白这两个参数类是干嘛的. 其中的参数是在哪一步定义和初始化的. sortlist.ccsortlist 中 merge的实现. 1234567891011121314bool SortList::FullMergeV2(const MergeOperationInput&amp; merge_in, MergeOperationOutput* merge_out) const &#123; std::vector&lt;int&gt; left; for (Slice slice : merge_in.operand_list) &#123; std::vector&lt;int&gt; right; MakeVector(right, slice); left = Merge(left, right); &#125; for (int i = 0; i &lt; static_cast&lt;int&gt;(left.size()) - 1; i++) &#123; merge_out-&gt;new_value.append(std::to_string(left[i])).append(&quot;,&quot;); &#125; merge_out-&gt;new_value.append(std::to_string(left.back())); return true;&#125; db_range_del_test.ccMockMergeOperator 模拟测试merge. 12345678910111213class MockMergeOperator : public MergeOperator &#123; // Mock non-associative operator. Non-associativity is expressed by lack of // implementation for any `PartialMerge*` functions. public: bool FullMergeV2(const MergeOperationInput&amp; merge_in, MergeOperationOutput* merge_out) const override &#123; assert(merge_out != nullptr); merge_out-&gt;new_value = merge_in.operand_list.back().ToString(); return true; &#125; const char* Name() const override &#123; return &quot;MockMergeOperator&quot;; &#125;&#125;; new_value 指向operand_list的尾元素. c.cc这个也可以借鉴下. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687struct rocksdb_mergeoperator_t : public MergeOperator &#123; void* state_; void (*destructor_)(void*); const char* (*name_)(void*); char* (*full_merge_)( void*, const char* key, size_t key_length, const char* existing_value, size_t existing_value_length, const char* const* operands_list, const size_t* operands_list_length, int num_operands, unsigned char* success, size_t* new_value_length); char* (*partial_merge_)(void*, const char* key, size_t key_length, const char* const* operands_list, const size_t* operands_list_length, int num_operands, unsigned char* success, size_t* new_value_length); void (*delete_value_)( void*, const char* value, size_t value_length); ~rocksdb_mergeoperator_t() override &#123; (*destructor_)(state_); &#125; const char* Name() const override &#123; return (*name_)(state_); &#125; bool FullMergeV2(const MergeOperationInput&amp; merge_in, MergeOperationOutput* merge_out) const override &#123; size_t n = merge_in.operand_list.size(); std::vector&lt;const char*&gt; operand_pointers(n); std::vector&lt;size_t&gt; operand_sizes(n); for (size_t i = 0; i &lt; n; i++) &#123; Slice operand(merge_in.operand_list[i]); operand_pointers[i] = operand.data(); operand_sizes[i] = operand.size(); &#125; const char* existing_value_data = nullptr; size_t existing_value_len = 0; if (merge_in.existing_value != nullptr) &#123; existing_value_data = merge_in.existing_value-&gt;data(); existing_value_len = merge_in.existing_value-&gt;size(); &#125; unsigned char success; size_t new_value_len; char* tmp_new_value = (*full_merge_)( state_, merge_in.key.data(), merge_in.key.size(), existing_value_data, existing_value_len, &amp;operand_pointers[0], &amp;operand_sizes[0], static_cast&lt;int&gt;(n), &amp;success, &amp;new_value_len); merge_out-&gt;new_value.assign(tmp_new_value, new_value_len); if (delete_value_ != nullptr) &#123; (*delete_value_)(state_, tmp_new_value, new_value_len); &#125; else &#123; free(tmp_new_value); &#125; return success; &#125; bool PartialMergeMulti(const Slice&amp; key, const std::deque&lt;Slice&gt;&amp; operand_list, std::string* new_value, Logger* /*logger*/) const override &#123; size_t operand_count = operand_list.size(); std::vector&lt;const char*&gt; operand_pointers(operand_count); std::vector&lt;size_t&gt; operand_sizes(operand_count); for (size_t i = 0; i &lt; operand_count; ++i) &#123; Slice operand(operand_list[i]); operand_pointers[i] = operand.data(); operand_sizes[i] = operand.size(); &#125; unsigned char success; size_t new_value_len; char* tmp_new_value = (*partial_merge_)( state_, key.data(), key.size(), &amp;operand_pointers[0], &amp;operand_sizes[0], static_cast&lt;int&gt;(operand_count), &amp;success, &amp;new_value_len); new_value-&gt;assign(tmp_new_value, new_value_len); if (delete_value_ != nullptr) &#123; (*delete_value_)(state_, tmp_new_value, new_value_len); &#125; else &#123; free(tmp_new_value); &#125; return success; &#125;&#125;; 最后list1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980class ListMergeOperator : public rocksdb::MergeOperator &#123;private: size_t max_val;public: ListMergeOperator(size_t max_val): max_val(max_val) &#123; &#125; virtual ~ListMergeOperator() &#123;&#125; bool FullMergeV2(const MergeOperationInput &amp;merge_in, MergeOperationOutput *merge_out) const &#123; merge_out-&gt;new_value.clear(); // Compute the space needed for the final result. size_t numBytes = 0; for (auto &amp;s : merge_in.operand_list) &#123; numBytes += s.size() + rocksdb::VarintLength(s.size());#ifndef NDEBUG if (merge_in.existing_value) &#123; listdb::log_debug(&quot;FullMergeV2, exits %s, %s, total bytes %d&quot;, merge_in.existing_value-&gt;data(), s.data(), numBytes); &#125; else &#123; listdb::log_debug(&quot;FullMergeV2, no exits, %s, total bytes %d&quot;, s.data(), numBytes); &#125;#endif &#125; if (merge_in.existing_value) &#123; merge_out-&gt;new_value.reserve(numBytes + merge_in.existing_value-&gt;size()); merge_out-&gt;new_value.append(merge_in.existing_value-&gt;data(), merge_in.existing_value-&gt;size()); &#125; else &#123; merge_out-&gt;new_value.reserve(numBytes); &#125; for (auto &amp;s: merge_in.operand_list) &#123; // encode list item as: size + data rocksdb::PutVarint32(&amp;merge_out-&gt;new_value, (uint32_t) s.size()); // put size merge_out-&gt;new_value.append(s.data_, s.size()); &#125; if (max_val &gt; 0 &amp;&amp; merge_out-&gt;new_value.size() &gt; max_val) &#123; // 超过了大小限制， 去掉前面的 size_t to_ignore = merge_out-&gt;new_value.size() - max_val; auto p = merge_out-&gt;new_value.data(), start = merge_out-&gt;new_value.data(), end = merge_out-&gt;new_value.data() + merge_out-&gt;new_value.size(); while (p &lt; end) &#123; uint32_t size = 0; auto t = rocksdb::GetVarint32Ptr(p, p + 5, &amp;size); t += size; if (t - start &gt; to_ignore) break; p = t; &#125; listdb::log_debug(&quot;FullMergeV2, trim %d -&gt; %d/%d&quot;, merge_out-&gt;new_value.size(), to_ignore, merge_out-&gt;new_value.size() - (p - start)); if(p != start) merge_out-&gt;new_value = merge_out-&gt;new_value.substr(p - start); &#125;#ifndef NDEBUG if (merge_in.existing_value) &#123; listdb::log_debug(&quot;FullMergeV2, exits %s, get %s %d/%d&quot;, merge_in.existing_value-&gt;data(), merge_out-&gt;new_value.data(), numBytes, merge_out-&gt;new_value.size()); &#125; else &#123; listdb::log_debug(&quot;FullMergeV2, no exits, get %s %d/%d&quot;, merge_out-&gt;new_value.data(), numBytes, merge_out-&gt;new_value.size()); &#125;#endif return true; &#125; bool PartialMerge(const rocksdb::Slice &amp;key, const rocksdb::Slice &amp;left_operand, const rocksdb::Slice &amp;right_operand, std::string *new_value, rocksdb::Logger *logger) const &#123; return false; &#125; const char *Name() const &#123; return &quot;list-merge&quot;; &#125;&#125;;","tags":[{"name":"rocksdb源码","slug":"rocksdb源码","permalink":"https://wiki.quartz.ren/tags/rocksdb%E6%BA%90%E7%A0%81/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"},{"name":"rocksdb源码学习","slug":"平台工具/2-计算机基础/编程语言/C/rocksdb源码学习","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/rocksdb%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"}]},{"title":"C++环境常见问题","date":"2020-02-27T17:13:34.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/开发环境问题/1.常见问题/","text":"包含路径问题比如 找不到jni.h 头文件. 点击右下角的 c/c++ Configurations. 配置包含路径参数。 cmake安装(mac)https://cmake.org/download/ 安装完成后，使用以下指令创建/usr/local/bin下 CMake 的软链接。 1sudo &quot;/Applications/CMake.app/Contents/bin/cmake-gui&quot; --install 参考： https://www.jianshu.com/p/7466c85d5d6b cmake安装(linux)直接下载可执行文件， 配置环境变量即可。","tags":[{"name":"linux","slug":"linux","permalink":"https://wiki.quartz.ren/tags/linux/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"},{"name":"开发环境问题","slug":"平台工具/2-计算机基础/编程语言/C/开发环境问题","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98/"}]},{"title":"vagrant","date":"2020-02-27T17:13:34.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/开发环境问题/2.vagrant/","text":"https://www.jianshu.com/p/3087304fa3a5 虚拟机管理 12345678910111213141516171819202122232425262728// 启动vagrant up// 停止vagrant halt// 使用ssh连接vagrant ssh// 安装Apach服务器sudo yum install httpd// 启动服务器[vagrant@localhost ~]$ sudo service httpd startexit// 暂停虚拟机vagrant suspend// 恢复虚拟机vagrant resume// 重启vagrant reload// 销毁vagrant destroy 列一下改造计划。","tags":[{"name":"linux","slug":"linux","permalink":"https://wiki.quartz.ren/tags/linux/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"},{"name":"开发环境问题","slug":"平台工具/2-计算机基础/编程语言/C/开发环境问题","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98/"}]},{"title":"Ubuntu下nginx安装使用","date":"2020-02-24T01:56:24.000Z","path":"wk/平台工具/中间件_组件/nginx/001.Ubuntu下nginx安装使用/","text":"1234# 默认的nginx配置cat /etc/nginx/sites-available/default # 其中可以找到. 静态资源路径.root /var/www/html; Nginx 配置多站点vhost1.首先保证 /etc/nginx/nginx.conf 中存在以下配置，确保可以多配置. 123456789101112131415http &#123; include /etc/nginx/mime.types; default_type application/octet-stream; log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27; &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27; &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwa rded_for&quot;&#x27;; access_log /var/log/nginx/access.log main; sendfile on; #tcp_nopush on; keepalive_timeout 65; #gzip on; include /etc/nginx/conf.d/*.conf; ＃主要是加入此行，如有则忽略&#125; 2.在 /etc/nginx/conf.d/ 文件夹下添加不同的配置. 12345678910111213141516171819server &#123; listen 80; server_name wiki.quartz.ren; access_log /var/log/wiki.access.log; location / &#123; proxy_pass http://localhost:4000; index index.html index.htm; &#125; error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125;&#125;# 注: 这里的转发可以是转发到端口,也可以转发到静态资源. 相应的添加其他配置文件. 3.在/etc/hosts添加域名映射. !!! 重要 123127.0.0.1 wiki.quartz.ren127.0.0.1 www.quartz.ren127.0.0.1 santa.quartz.ren 大功告成~ Nginx 映射规则配置Nginx 负载均衡配置Nginx 配置文件详解","tags":[{"name":"组件安装配置","slug":"组件安装配置","permalink":"https://wiki.quartz.ren/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"nginx","slug":"平台工具/中间件-组件/nginx","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/nginx/"}]},{"title":"网站https支持-Nginx","date":"2020-02-24T01:56:24.000Z","path":"wk/平台工具/中间件_组件/nginx/002.网站https支持-nginx/","text":"证书申请申请免费证书(阿里云吧). 然后下载。 在nginx目录下创建文件夹： /etc/nginx/conf.d/cert 将证书复制到此文件夹. 然后修改conf.d下的wiki.conf 配置文件. 12345678910111213141516171819202122232425262728293031# 以下属性中以ssl开头的属性代表与证书配置有关，其他属性请根据自己的需要进行配置。server &#123; listen 80; server_name wiki.quartz.ren; access_log /var/log/wiki.access.log; rewrite ^(.*)$ https://$host$1 permanent; error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125;&#125;server &#123; listen 443 ssl; #SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。 server_name wiki.quartz.ren; #将localhost修改为您证书绑定的域名，例如：www.example.com。 root html; index index.html index.htm; ssl_certificate conf.d/cert/3714771_wiki.quartz.ren.pem; #将domain name.pem替换成您证书的文件名。 ssl_certificate_key conf.d/cert/3714771_wiki.quartz.ren.key; #将domain name.key替换成您证书的密钥文件名。 ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; #使用此加密套件。 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #使用该协议进行配置。 ssl_prefer_server_ciphers on; location / &#123; root /data/blog/wiki/public_deploy/; index index.html index.htm; &#125;&#125; nginx证书配置","tags":[{"name":"组件安装配置","slug":"组件安装配置","permalink":"https://wiki.quartz.ren/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"nginx","slug":"平台工具/中间件-组件/nginx","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/nginx/"}]},{"title":"Nginx转发配置","date":"2020-02-24T01:56:24.000Z","path":"wk/平台工具/中间件_组件/nginx/003.Nginx转发配置/","text":"1234567891011121314151617181920212223242526server &#123; listen 443 ssl; #SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。 server_name santa.quartz.ren; #将localhost修改为您证书绑定的域名，例如：www.example.com。 root html; index index.html index.htm; ssl_certificate conf.d/cert/3714771_wiki.quartz.ren.pem; #将domain name.pem替换成您证书的文件名。 ssl_certificate_key conf.d/cert/3714771_wiki.quartz.ren.key; #将domain name.key替换成您证书的密钥文件名。 ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; #使用此加密套件。 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #使用该协议进行配置。 ssl_prefer_server_ciphers on; # 转发配置内容. location /xboot/ &#123; proxy_pass http://127.0.0.1:8888/xboot/; &#125; location /home/ &#123; proxy_pass http://127.0.0.1:8888/home/; &#125; location / &#123; root /home/zhangquanquan/app/santa-admin-front/dist/; index index.html index.htm; &#125;&#125;","tags":[{"name":"组件安装配置","slug":"组件安装配置","permalink":"https://wiki.quartz.ren/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"nginx","slug":"平台工具/中间件-组件/nginx","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/nginx/"}]},{"title":"","date":"2020-02-24T00:53:55.990Z","path":"wk/平台工具/MicroService/技术框架/Mybatis/手写mybatis/","text":"手写mybatis 这么写参数校验(validator)就不会被劝退了~","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"Mybatis","slug":"平台工具/MicroService/技术框架/Mybatis","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/Mybatis/"}]},{"title":"1.指针和引用","date":"2020-02-21T13:13:34.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/1.指针和引用/","text":"指针可以简化一些C++编程任务的执行，还有一些任务，如动态内存分配，没有指针是无法执行的。 每一个变量都有一个内存地址，每个内存位置都定义了可使用连字号(&amp;)运算符访问的地址，它表示了在内存中的一个地址。 1234567891011int main()&#123; int var1; chat var2[10]; cout &lt;&lt; &quot;var1 变量的地址：&quot;; cout &lt;&lt; &amp;var1 &lt;&lt; endl; cout &lt;&lt; &quot;var2 变量的地址：&quot;; cout &lt;&lt; &amp;var2 &lt;&lt; endl; return 0;&#125; 通过以上，了解了审核是内存地址以及如何访问它。接下来我们看看什么是指针。 什么是指针？指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。 1234int *ip; /* 一个整型的指针 */double *dp; /* 一个 double 型的指针 */float *fp; /* 一个浮点型的指针 */char *ch; /* 一个字符型的指针 */ 所有指针的值的实际数据类型，不管是整形，浮点型，字符型，还是其他数据类型。都是一样的，都是一个代表内存地址的长的十六进制数。 不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。 123456789101112131415161718192021222324#include &lt;iostream&gt; using namespace std; int main ()&#123; int var = 20; // 实际变量的声明 int *ip; // 指针变量的声明 ip = &amp;var; // 在指针变量中存储 var 的地址 cout &lt;&lt; &quot;Value of var variable: &quot;; cout &lt;&lt; var &lt;&lt; endl; // 输出在指针变量中存储的地址 cout &lt;&lt; &quot;Address stored in ip variable: &quot;; cout &lt;&lt; ip &lt;&lt; endl; // 访问指针中地址的值 cout &lt;&lt; &quot;Value of *ip variable: &quot;; cout &lt;&lt; *ip &lt;&lt; endl; return 0;&#125; 1ip = &amp;var 即： &#x27;*ip&#x27; 和 var 的值相等 一. 指针的算数运算指针是一个用数值表示的地址。因此，您可以对指针执行算术运算。 可以对指针进行四种算术运算：++、—、+、-。 C++ 指针的算术运算 int 是4个字节. char是一个字节","tags":[{"name":"C++","slug":"C","permalink":"https://wiki.quartz.ren/tags/C/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"}]},{"title":"2.Make命令教程","date":"2020-02-21T13:13:34.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/2.Make命令教程/","text":"Make 命令教程 代码变成可执行文件，叫做编译（compile）；先编译这个，还是先编译那个（即编译的安排），叫做构建（build）。 Make是最常用的构建工具，诞生于1977年，主要用于C语言的项目。但是实际上 ，任何只要某个文件有变化，就要重新构建的项目，都可以用Make构建。 123sudo apt install gcc g++make 安装gcc, g++ 构建工具才能make 构建. Makefile文件的格式构建规则都写在Makefile文件里面，要学会如何Make命令，就必须学会如何编写Makefile文件。 一.概述Makefile文件由一系列规则（rules）构成。每条规则的形式如下。 12&lt;target&gt; : &lt;prerequisites&gt; [tab] &lt;commands&gt; 每条规则就明确两件事：构建目标的前置条件是什么，以及如何构建。下面就详细讲解，每条规则的这三个组成部分。","tags":[{"name":"C++","slug":"C","permalink":"https://wiki.quartz.ren/tags/C/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"}]},{"title":"3.虚函数","date":"2020-02-21T13:13:34.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/3.virtual关键字/","text":"C++中virtual关键字的用法 基类的函数调用如果有virtual则根据多态性调用派生类的，如果没有virtual则是正常的静态函数调用，还是调用基类的。 slicen.片；〈非正式〉部分；份额；【体】削球v.切成片；削球；被切成片；(很容易地)切开网络切片；薄片；剖切 rocksdb 的 secondary mode. 不支持merge.","tags":[{"name":"C++","slug":"C","permalink":"https://wiki.quartz.ren/tags/C/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"}]},{"title":"4.explict函数","date":"2020-02-21T13:13:34.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/4.explicit关键字/","text":"implicit: 含蓄的,内含的,隐式,隐性explicit: 清楚明白的,显式,直言的 explicit关键字只能用于修饰只有一个参数的类构造函数 它的作用是表明该构造函数是显示的, 而非隐式的 跟它相对应的另一个关键字是implicit, 意思是隐藏的,类构造函数默认情况下即声明为implicit(隐式). 显示声明的构造函数和隐式声明的有什么区别呢??? implicit 默认的构造方法是存在 一个隐式转换的. 例如 CxString string2 = 10; 编译器自动将整型转换为CxString类对象，实际上等同于下面的操作: 1234CxString string2(10); 或 CxString temp(10); CxString string2 = temp; explicit关键字的作用就是防止类构造函数的隐式自动转换.","tags":[{"name":"C++","slug":"C","permalink":"https://wiki.quartz.ren/tags/C/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"}]},{"title":"6.C++ vector 容器浅析","date":"2020-02-21T13:13:34.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/6.c++容器浅析/","text":"C++ vector 容器浅析 一个封装了动态大小数组的顺序容器(Sequence Container). 跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。 容器特性 顺序序列 动态数组 能够感知内存分配器的（Allocator-aware） 这一点和java的arrayList功能类似. 但感觉比arrayList高效. 虽然还不知道原因. 功能函数比arrayList强大多了.","tags":[{"name":"C++","slug":"C","permalink":"https://wiki.quartz.ren/tags/C/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"}]},{"title":"Kafak常用命令","date":"2020-02-14T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Kafka/Kafka常用命令/","text":"命令行消费1bin/kafka-console-consumer.sh --bootstrap-server ip:port --topic $topic 查看group对集群消费情况1bin/kafka-consumer-groups.sh --bootstrap-server ip:port --describe --group $group 重置offset123bin/kafka-consumer-groups.sh --bootstrap-server ip:port --group $group --reset-offsets --all-topics --to-datetime 2019-11-03T00:00:00.000 --execute## --execute 参数会执行生效，不加则只显示结果 topic 创建1bin/kafka-topics.sh --create --zookeeper 192.168.21.179:2181 --topic $topic --partitions 3 --replication-factor 1 查看所有topic1bin/kafka-topics.sh --zookeeper 192.168.21.179:2181 --list 生产消息数据查询分析组件。 走引擎， 不走引擎. 消息路由。 一部分消息 都走。 变量的管理等存在很大的灵活，及不可控。","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Kafka","slug":"数据/数据处理/DataStore/Kafka","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Kafka/"}]},{"title":"浏览器插件","date":"2020-02-04T17:13:34.000Z","path":"wk/平台工具/中间件_组件/IDE/浏览器插件/","text":"json viewhttps://github.com/gildas-lormeau/JSONView-for-Chrome 谷歌浏览器安装json格式化插件","tags":[{"name":"Tools","slug":"Tools","permalink":"https://wiki.quartz.ren/tags/Tools/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"IDE","slug":"平台工具/中间件-组件/IDE","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/IDE/"}]},{"title":"启用验证","date":"2020-01-21T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Mongo/Mongo启动验证/","text":"启用验证 2.1 创建用户管理员账户. 只能对单个数据库授权， 怎么对整体用户授权。 123456789use admin db.createUser( &#123; user: &quot;adminUser&quot;, pwd: &quot;adminPass&quot;, roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ] &#125;) 断开 mongodb 连接， 关闭数据库 2.2 Mongodb 用户验证登陆 现在有两种方式进行用户身份的验证 类似 MySql）客户端连接时，指定用户名，密码，db名称 1mongo --port 27017 -u &quot;lyl&quot; -p &quot;123456&quot; --authenticationDatabase &quot;admin&quot; 客户端连接后，再进行验证 1234mongo --port 27017 use admindb.auth(&quot;adminUser&quot;, &quot;adminPass&quot;) 创建普通用户创建普通用户过程类似创建管理员账户，只是 role 有所不同 12345678910use foo db.createUser( &#123; user: &quot;simpleUser&quot;, pwd: &quot;simplePass&quot;, roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;foo&quot; &#125;, &#123; role: &quot;read&quot;, db: &quot;bar&quot; &#125; ] &#125;)","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Mongo","slug":"数据/数据处理/DataStore/Mongo","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Mongo/"}]},{"title":"02.动态代理","date":"2020-01-20T11:56:24.000Z","path":"wk/平台工具/MicroService/技术框架/Mybatis/动态代理/","text":"1.举例工厂，商店和客户。买玩具都是从商店买，工厂怎么生产我们不用关心。 这个工厂可以叫做委托类，商店就是代理类，我们就是客户类。 这样的好处是： 隐藏了委托类的实现。 实现客户与委托类之间的解耦,在不修改委托类代码的情况下能够做一些额外的处理(important) 2.应用场景远程 RPC 调用.通过代理类去实现的. Spring 的 AOP 切面中我们也是为切面生成了一个代理类. 3.静态代理定义接口和接口的实现类，然后定义接口的代理对象。将接口的实例注入到代理对象中, 然后通过代理对象去调用真正的实现类，实现过程非常简单也比较容易理解。 静态代理的代理关系在编译期间就已经确定了的。 4.动态代理技术代理类在程序运行时创建的代理方式被成为 动态代理。 先简回顾一下 JVM 的类加载机制中的加载阶段要做的三件事情： 通过一个类的全名或其它途径来获取这个类的二进制字节流 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构 在内存中生成一个代表这个类的 Class 对象, 作为方法区中对这个类访问的入口 我们要说的动态代理，主要就发生在第一个阶段。这个阶段类的二进制字节流的来源可以有很多, 比如 zip 包、网络、运行时计算生成、其它文件生成 (JSP)、数据库获取。 其中运行时计算生成就是我们所说的动态代理技术，在 Proxy 类中, 就是运用了 ProxyGenerator.generateProxyClass 来为特定接口生成形式为 —-$Proxy 的代理类的二进制字节流。 所谓的动态代理就是想办法根据接口或者目标对象计算出代理类的字节码然后加载进 JVM 中。 实际计算的情况会很复杂，我们借助一些诸如 JDK 动态代理实现、CGLIB 第三方库来完成的. 另一方面为了让生成的代理类与目标对象 (就是委托类) 保持一致, 我们有 2 种做法：通过接口的 JDK 动态代理 和通过继承类的 CGLIB 动态代理 JDK 动态代理在 Java 的动态代理中, 主要涉及 2 个类,java.lang.reflect.Proxy和java.lang.reflect.InvocationHandler. 12345678910public interface InvocationHandler &#123; /** * 调用处理 * @param proxy 代理类对象 * @param methon 标识具体调用的是代理类的哪个方法 * @param args 代理类方法的参数 */ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;&#125; 我们对处理类中的所有方法的调用都会变成对 invoke 方法的调用.这样我们可以在 invoke 方法中添加统一的处理逻辑（也可以根据 method 参数判断是哪个方法） 中间类 (实现了 InvocationHandler 的类) 有一个委托类对象引用, 在 Invoke 方法中调用了委托类对象的相应方法，通过这种聚合的方式持有委托类对象引用，把外部对 invoke 的调用最终都转为对委托类对象的调用。 实际上，中间类与委托类构成了静态代理关系.在这个关系中，中间类是代理类，委托类是委托类。","tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://wiki.quartz.ren/tags/Mybatis/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"Mybatis","slug":"平台工具/MicroService/技术框架/Mybatis","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/Mybatis/"}]},{"title":"01.Mybatis原理","date":"2020-01-20T11:56:24.000Z","path":"wk/平台工具/MicroService/技术框架/Mybatis/Mybatis原理探索/","text":"查询流程其中的一个UserMapper的实例为： 1com.baomidou.mybatisplus.core.override.MybatisMapperProxy@13250132 动态代理 12345678910111213141516171819202122MybatisMapperProxy implements InvocationHandler&#123; // invoke 方法. @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; try &#123; if (Object.class.equals(method.getDeclaringClass())) &#123; return method.invoke(this, args); &#125; else if (method.isDefault()) &#123; if (privateLookupInMethod == null) &#123; return invokeDefaultMethodJava8(proxy, method, args); &#125; else &#123; return invokeDefaultMethodJava9(proxy, method, args); &#125; &#125; &#125; catch (Throwable t) &#123; throw ExceptionUtil.unwrapThrowable(t); &#125; final MybatisMapperMethod mapperMethod = cachedMapperMethod(method); return mapperMethod.execute(sqlSession, args); &#125;&#125; 不需要所有的map都写到一个项目中。 kits只是集成了数据访问，方便的数据访问开发。 然后各自的map集成到各自的项目中去。 SqlSession主要是sqlSession操作数据库，增删改查。 实现有SqlSessionTemplate，SqlSessionManager，DefaultSqlSession.","tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://wiki.quartz.ren/tags/Mybatis/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"Mybatis","slug":"平台工具/MicroService/技术框架/Mybatis","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/Mybatis/"}]},{"title":"01.自定义数据源提供者","date":"2020-01-20T11:56:24.000Z","path":"wk/平台工具/MicroService/技术框架/Mybatis/自定义数据源提供者/","text":"dynamic-datasource-spring-boot-starter Mybatis架构与原理","tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://wiki.quartz.ren/tags/Mybatis/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"Mybatis","slug":"平台工具/MicroService/技术框架/Mybatis","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/Mybatis/"}]},{"title":"1.Java基础","date":"2020-01-20T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Java/Java基础/","text":"Java基础 ：反射、注解、代理、线程池、依赖的学习和理解 结构化思维-如何进行高效表达 世界五大学习方法之西蒙学习法 10个令你变强的网站 廖雪峰的官方网站-Java","tags":[{"name":"Java","slug":"Java","permalink":"https://wiki.quartz.ren/tags/Java/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Java","slug":"平台工具/2-计算机基础/编程语言/Java","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"}]},{"title":"1.注解的分类","date":"2020-01-20T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Java/注解/1.注解的分类/","text":"1. 按照运行机制划分 源码注解 编译时注解 运行时注解 源码注解：只在源码中存在，编译成.class文件就不存在了。 编译时注解：在源码和.class文件中都存在。像前面的@Override、@Deprecated、@SuppressWarnings，他们都属于编译时注解。 运行时注解：在运行阶段还起作用，甚至会影响运行逻辑的注解。像@Autowired自动注入的这样一种注解就属于运行时注解，它会在程序运行的时候把你的成员变量自动的注入进来。 2. 按照来源划分 来自JDK的注解 来自第三方的注解 自定义注解 3. 元注解元注解是给注解进行注解，可以理解为注解的注解就是元注解。","tags":[{"name":"Java","slug":"Java","permalink":"https://wiki.quartz.ren/tags/Java/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Java","slug":"平台工具/2-计算机基础/编程语言/Java","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"},{"name":"注解","slug":"平台工具/2-计算机基础/编程语言/Java/注解","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E6%B3%A8%E8%A7%A3/"}]},{"title":"2.自定义注解","date":"2020-01-20T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Java/注解/2.自定义注解/","text":"我们分四步来解析自定义注解 1. 自定义注解的语法要求123456789@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Inherited@Documentedpublic @interface Description &#123; String desc(); String author(); int age() default 18;&#125; String desc();虽然它很类似于接口里面的方法，其实它在注解里面只是一个成员变量（成员以无参无异常的方式声明），int age() default 18;（成员变量可以用default指定一个默认值的） 成员类型是受限制的，合法的类型包括基本的数据类型以及String，Class，Annotation,Enumeration等。 如果注解只有一个成员，则成员名必须取名为value()，在使用时可以忽略成员名和赋值号（=） 注解类可以没有成员，没有成员的注解称为标识注解。 2. 元注解1234@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Inherited@Documented 我们先看第一行：@Target是这个注解的作用域，ElementType.METHOD是这个注解的作用域的列表，METHOD是方法声明，除此之外，还有：CONSTRUCTOR（构造方法声明）,FIELD（字段声明）,LOCAL VARIABLE（局部变量声明）,METHOD（方法声明）,PACKAGE（包声明）,PARAMETER（参数声明）,TYPE（类接口） 第二行：@Retention是它的生命周期，前面不是说注解按照运行机制有一个分类嘛，RUNTIME就是在运行时存在，可以通过反射读取。除此之外，还有:SOURCE（只在源码显示，编译时丢弃）,CLASS（编译时记录到class中，运行时忽略）,RUNTIME（运行时存在，可以通过反射读取） 第三行：@Inherited是一个标识性的元注解，它允许子注解继承它。 第四行：@Documented，生成javadoc时会包含注解。 3. 注解解析通过反射获取类 、函数或成员上的运行时注解信息，从而实现动态控制程序运行的逻辑。","tags":[{"name":"Java","slug":"Java","permalink":"https://wiki.quartz.ren/tags/Java/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Java","slug":"平台工具/2-计算机基础/编程语言/Java","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"},{"name":"注解","slug":"平台工具/2-计算机基础/编程语言/Java/注解","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E6%B3%A8%E8%A7%A3/"}]},{"title":"Zookeeper安装使用指南","date":"2020-01-16T17:13:34.000Z","path":"wk/平台工具/中间件_组件/Zookeeper/zk安装使用指南/","text":"下载https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.5.6/ bin 是可执行的程序。 另外一个是源码文件。 1bin/zkCli.sh -server localhost:2181 查看zk节点数据12","tags":[{"name":"zookeeper","slug":"zookeeper","permalink":"https://wiki.quartz.ren/tags/zookeeper/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Zookeeper","slug":"平台工具/中间件-组件/Zookeeper","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Zookeeper/"}]},{"title":"redis性能测试","date":"2020-01-16T17:13:34.000Z","path":"wk/平台工具/中间件_组件/Redis/性能测试/001.incr性能测试/","text":"redishash increment. single=1000, pipeline=1000001234567StopWatch &#x27;stats&#x27;: running time (millis) = 5730-----------------------------------------ms % Task name-----------------------------------------03732 065% single01998 035% pipeline value increment. single=1000, pipeline=100000123456StopWatch &#x27;stats&#x27;: running time (millis) = 5944-----------------------------------------ms % Task name-----------------------------------------03752 063% single02192 037% pipeline hash 和 value性能差不多.","tags":[{"name":"redis","slug":"redis","permalink":"https://wiki.quartz.ren/tags/redis/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Redis","slug":"平台工具/中间件-组件/Redis","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Redis/"},{"name":"性能测试","slug":"平台工具/中间件-组件/Redis/性能测试","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Redis/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"}]},{"title":"Ubuntu安装邮件服务器","date":"2020-01-16T01:56:24.000Z","path":"wk/项目管理/软件工程/Linux/Ubuntu安装邮件服务器/","text":"Ubuntu安装邮件服务器 Ubuntu搭建简易Postfix邮箱服务器—配置域名映射 查看机器开放的端口1sudo nmap your-server-ip 测试发送邮件12345echo &quot;test email&quot; | sendmail your-eamil# 也可以使用mail命令来发送邮件，使用mail发送邮件的时候，main.cf配置文件对其不生效，应该有自己的配置文件，还没找到# mail -s title your-eamil &lt;&lt;&lt; &quot;mail content&quot; AWS Ubuntu 16.04搭建邮件服务器（Postfix+Dovecot+Mysql）","tags":[{"name":"linux","slug":"linux","permalink":"https://wiki.quartz.ren/tags/linux/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"软件工程","slug":"项目管理/软件工程","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"Linux","slug":"项目管理/软件工程/Linux","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/Linux/"}]},{"title":"邮箱检测","date":"2020-01-13T01:56:24.000Z","path":"wk/项目管理/软件工程/Linux/邮箱检测/","text":"退信查看及分析方法大全 邮箱检测方式和流程 如何验证 Email 地址：SMTP 协议入门教程 MX记录：dns解析中，可以添加一条mx记录. 执行邮箱服务器，然后邮件会投递到这个邮箱服务器. 域名系统（DNS）中的一种资源记录类型,用于指定负责处理发往收件人域名的邮件服务器。 MX记录允许设置一个优先级, SMTP 会根据MX记录的值 https://www.cnblogs.com/kaiblog/p/5372728.html netty案例，netty4.1中级拓展篇七《Netty请求响应同步通信》-收费 &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 如何验证 Email 地址：SMTP 协议入门教程 现象1 当对同一个 域名下的邮箱检测（比如：lianjia.com）。 不使用代理， 开始都可以检测正常， 中间大量出现【451, ‘msg’: ‘SMTP:RCPT命令失败’】 451 放弃要求的操作；处理过程中出错. [分析原因： 被零时封掉] 550 550 基本可以判断为邮箱不可用。 Mailbox not found 。 您要发送的收件人不存在。 550 #5.1.0 Address rejected. 221 mx5.pingan.com换地址, 用代理，换send都不行。 550, details=[User not found: zhangquanquan@umpay.com]} 12345678hejiazhen@woneast.com ### mx mxbiz1.qq.com.mxbiz2.qq.com.大多是 550 【Mailbox not found. http://service.exmail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=20022&amp;&amp;no=1000728]】. 有些情况是正常。 501Bad address syntax501 Bad address syntax. http://service.exmail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=20022&amp;&amp;no=1000730您所填写的收件人地址格式不正确。 530error rcpt error. 目前只有 chinac.com 域名的邮箱. 551551 5.1.1 recipient is not exist 可以判定为不可用 552552 mailbox is full 553[“RCPT TO” mailbox unavailable]}可以判定为不可用.存在 SMTP:MAIL_FROM命令失败的情况 （这种情况为不确定） 554 554, details=[5.7.1 &#109;&#111;&#98;&#x65;&#105;&#x73;&#105;&#64;&#x68;&#117;&#x61;&#119;&#101;&#105;&#46;&#x63;&#111;&#109;: Recipient address rejected: User unknown]} 553“RCPT TO” mailbox unavailable 560[6.0.2 &#108;&#105;&#117;&#120;&#105;&#x6e;&#121;&#x69;&#110;&#103;&#64;&#104;&#x61;&#x69;&#115;&#x74;&#112;&#x61;&#121;&#46;&#x63;&#x6f;&#x6d; not exist.] Mailbox not found. http://service.exmail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=20022&amp;&amp;no=1000728]zhangwl03@missfresh.cnhejiazhen@woneast.com（应该是通过qq邮箱实现.） 454重新检测为正常. 451pengqian@wanxue.cn 451, details=[please try again after 120 seconds 554fanlipin@playnovate.com FROM:&#x31;&#x32;&#x33;&#49;&#x32;&#51;&#64;&#x63;&#104;&#97;&#99;&#117;&#x6f;&#x2e;&#110;&#x65;&#116; 时 返回结果：[RCPT (fanlipin@playnovate.com) dosn’t exist] FROM:damonzh@126.com 时， 最后to. 不返回. 【 from 邮箱可用是，】 [总结： 以@chacuo.net 为后缀的from. 返回[RCPT (fanlipin@playnovate.com) dosn’t exist]] 有可能是对方 的一种策略。 如果是零时邮箱，他假装不存在. rcpt is rejected: 23. 发现也有成功的（jianshuxin@bluemoon.com.cn） 。 所以可能是用户的一种拒绝策略。 各种情况都有dankegongyu.com 501,550,551,552,553,554 grep -E ‘: 501,|: 560,|: 550,|: 551,|: 552,|: 553,|: 554,’ not_big_nohup.out | grep code | grep -v 邮箱可用 | grep -v ‘MAIL_FROM命令失败’ &gt; 机器确认邮箱不可用.txt grep -v -E ‘: 501,|: 560,|: 550,|: 551,|: 552,|: 553,|: 554,’ not_big_nohup.out | grep code | grep -v 邮箱可用 | grep -v ‘SMTP:MAIL_FROM命令失败’ &gt; 未知.txt grep SMTP:MAIL_FROM命令失败 not_big_nohup.out &gt;&gt; 未知.txt 2116 grep -v -E ‘: 501,|: 560,|: 550,|: 551,|: 552,|: 553,|: 554,’ not_big_nohup.out | grep code | grep -v 邮箱可用 |awk -F “‘data’: {‘code’: “ ‘{print $2}’ | awk -F “, ‘email’:” ‘{print $1}’ | sort | uniq -c | more 数量 code, msg 268 41, ‘msg’: ‘连接超时’ 25 422, ‘msg’: ‘SMTP:RCPT命令失败’ 382 450, ‘msg’: ‘SMTP:RCPT命令失败’ 1 451, ‘msg’: ‘SMTP:MAIL_FROM命令失败’ 2307 451, ‘msg’: ‘SMTP:RCPT命令失败’ 8 452, ‘msg’: ‘SMTP:MAIL_FROM命令失败’ 1638 454, ‘msg’: ‘SMTP:RCPT命令失败’ 1 500, ‘msg’: ‘SMTP:MAIL_FROM命令失败’ 1161 50, ‘msg’: ‘响应超时’ 811 51, ‘msg’: ‘处理异常’ 3 530, ‘msg’: ‘SMTP:RCPT命令失败’ 1 560, ‘msg’: ‘SMTP:RCPT命令失败’ 71 SMTP:MAIL_FROM命令失 6607 63250 可用. 72034 检测总量 SMTP的响应码列表 SMTP错误码/建议解决方法 确定下邮箱服务器有哪些拦截 策略。 可以绕过来检测。 需求的生命周期管理. grep -v -code not_big_nohup.out16 | grep -v 邮箱可用 &gt; 未知和不可用.txt grep -v -E ‘: 501,|: 560,|: 550,|: 551,|: 552,|: 553,|: 554,’ 未知和不可用.txt | grep -v 未找到对应的MX &gt; 未知.txt 06cdc3b4a9d442f485d0dbc7e5bf3fe0ad5d3f1c","tags":[{"name":"linux","slug":"linux","permalink":"https://wiki.quartz.ren/tags/linux/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"软件工程","slug":"项目管理/软件工程","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"Linux","slug":"项目管理/软件工程/Linux","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/Linux/"}]},{"title":"Netty实现代理","date":"2020-01-11T11:56:24.000Z","path":"wk/项目管理/软件工程/Linux/Netty实现代理/","text":"HttpProxy 基于netty的代理——高性能、轻量、稳定 基于netty实现的动态代理服务器 TCP/IP的底层队列实现原理","tags":[{"name":"linux","slug":"linux","permalink":"https://wiki.quartz.ren/tags/linux/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"软件工程","slug":"项目管理/软件工程","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"Linux","slug":"项目管理/软件工程/Linux","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/Linux/"}]},{"title":"Python客户端http请求","date":"2020-01-11T09:10:49.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Python/Python客户端Http请求/","text":"123456789101112131415161718192021222324252627&quot;&quot;&quot;告警通知脚本异常任务，邮件通知@author zhangquanquan 20-01-10 下午3:49&quot;&quot;&quot;import requestsimport jsonheaders = &#123;&#x27;content-type&#x27;: &#x27;application/json&#x27;&#125;def notify(receivers, subject, content): notify_url = &#x27;http://192.168.0.23:8060/heimdallr/upload/api/notifyByEmail&#x27; data = &#123;&#x27;receivers&#x27;: receivers, &#x27;subject&#x27;: subject, &#x27;content&#x27;: content&#125; r = requests.post(notify_url,data=json.dumps(data),headers=headers) try: rd = json.loads(r.content.decode(&#x27;utf-8&#x27;)) print (rd) except Exception: print (r.content) print (strategyName, dataDate, message, &quot;处理异常&quot;, sep=&#x27;,&#x27;) return rd","tags":[{"name":"Python","slug":"Python","permalink":"https://wiki.quartz.ren/tags/Python/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"平台工具/2-计算机基础/编程语言/Python","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"}]},{"title":"Shell加解密及expect实现自动交互","date":"2020-01-11T01:56:24.000Z","path":"wk/项目管理/软件工程/Linux/Shell加解密及expect实现自动交互/","text":"1234shc -r -T -f 123.sh# shc -h 可以查看帮助# -T 显示编译说明 Shell脚本加密解密 mac 安装brew mac安装expect mac一键登录服务器脚本 1","tags":[{"name":"linux","slug":"linux","permalink":"https://wiki.quartz.ren/tags/linux/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"软件工程","slug":"项目管理/软件工程","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"Linux","slug":"项目管理/软件工程/Linux","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/Linux/"}]},{"title":"Flink环境搭建","date":"2019-12-30T03:55:57.000Z","path":"wk/数据/数据处理/Flink/1.Flink环境搭建/","text":"Flink 是一个以 Java 及 Scala 作为开发语言的开源大数据项目，代码开源在 GitHub 上，并使用 Maven 来编译和构建项目。 运行 Flink有三种环境模式。包括：单机 Standalone 模式、多机 Standalone 模式和 Yarn 集群模式 安装单机 Standalone 模式1234567# 到解压包目录cd /data/tools/flink-1.8.2# 运行./bin/start-cluster.sh 查看Flink 的 Web 界面。 1. 提交任务1234# First of all, we use netcat to start local server vianc -l 9000# Submit the Flink program:./bin/flink run examples/streaming/SocketWindowWordCount.jar --port 9000 以上简单的例子实现了 单机Standalone模式的安装个demo运行。 后面学习更深入的一些课题。 Flink的例子 Batch Examples(包括WordCount，PageRank)","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"Flink","slug":"数据/数据处理/Flink","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/"}]},{"title":"Alink介绍","date":"2019-12-30T03:55:57.000Z","path":"wk/数据/数据处理/Flink/Alink/","text":"Alink 是阿里巴巴机器学习算法团队从 2017 年开始基于实时计算引擎 Flink 研发的新一代机器学习算法平台，提供丰富的算法组件库和便捷的操作框架，开发者可以一键搭建覆盖数据处理、特征工程、模型训练、模型预测的算法模型开发全流程。作为业界首个同时支持批式算法、流式算法的机器学习平台，Alink 提供了 Python 接口，开发者无需 Flink 技术背景也可以轻松构建算法模型。 Alink 这个名字取自相关名称（Alibaba, Algorithm, AI, Flink,Blink）的公共部分。 据悉，Alink 已被广泛运用在阿里巴巴搜索、推荐、广告等多个核心实时在线业务中。在刚刚落幕的天猫双 11 中，单日数据处理量达到 970PB，每秒处理峰值数据高达 25 亿条。Alink 成功经受住了超大规模实时数据训练的检验，并帮助提升 4% CTR（商品点击转化率）。 阿里开源全球首个批流一体机器学习平台 Alink，Blink 功能已全部贡献至 Flink Alink 是阿里巴巴机器学习算法团队基于实时计算引擎 Flink 研发的新一代机器学习算法平台 ctolib","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"Flink","slug":"数据/数据处理/Flink","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/"}]},{"title":"FlinkCEP","date":"2019-12-30T03:55:57.000Z","path":"wk/数据/数据处理/Flink/FinkCEP/","text":"针对什么，解决什么问题，空缺的地方。 目前，基于团伙发现和聊天的策略基本已经实现。后续可能需要优化和策略的调度上再优化。 但是对于用户行为序列的策略这块应用很少，目前有念姐的基于用户行为序列的xgboost模型,但解决的是特定的问题，泛化能力较弱，针对新的异常行为场景不能覆盖。 那怎么有一个通用的，可以配置基于规则的这么一个异常行为序列检测的策略。这个时候就考虑了flink. 优点 跨事件的匹配，这个是重点。 同时eventTime.processingTIme语义的支持。 延迟数据的良好处理 友好的API. 解决的另一个痛点是。运营老是频繁提需求，改动。这边李华，华哥那边也深受同感吧。 当然，最好规则是sql 的形式，运营人员直接参与规则编写而不是频繁提需求。 这个和龙哥那边给何博士和念姐那边支持的数据工具类似。 flink CEP官网给出的API也还是很丰富的 Flink是什么，我想大家都比较熟悉了。定义一些通用的流程针对之前已经发生的一些case. 找到一些可以使用flink-cep解决的。 比如： 难点和需要做的就是定义这些流程场景，分析一些通用的异常场景和特征。 频繁交换微信，5分钟内交换5次微信。 聊天内容命中一个词之后，统计个数。这个词可以配置。 （比如合作，微信，威信等 多次统计的（可以基于规则实时统计- 重点在于实时修改。）） 对类似群发的消息进行检测。 利用cep构建一些实时特征并利用起来。 传销这种，就是约异地面试的意图。特征。 首先目标是这个 解决大量的异常场景， 提高准确率（每天运营催说数据太多，标不完，那就是准确率不高，利用简单快速的东西，实现复杂的需求流程。）「团伙发现也要利用好」","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"Flink","slug":"数据/数据处理/Flink","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/"}]},{"title":"5.Hive环境安装搭建","date":"2019-12-16T04:56:24.000Z","path":"wk/数据/数据处理/组件安装配置/Hadoop组件安装/5.Hive环境安装搭建/","text":"https://sqoop.apache.org/ 准备mysql环境(账号创建及授权.) 下载hive, 修改hive-site.xml. 添加环境变量 hive —service metastore &amp; [初始化元信息] 执行hive. show databases 查看是否正常.","tags":[{"name":"hive","slug":"hive","permalink":"https://wiki.quartz.ren/tags/hive/"}],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"组件安装配置","slug":"数据/数据处理/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"Hadoop组件安装","slug":"数据/数据处理/组件安装配置/Hadoop组件安装","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/Hadoop%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85/"}]},{"title":"Flink基本架构","date":"2019-12-07T03:55:57.000Z","path":"wk/数据/数据处理/Flink/2.Flink的基本架构/","text":"架构与Spark类似，是一个基于Master-Slave风格的架构。 Flink集群启动时，会启动一个JobManager进程、至少一个TaskManager进程。 当Flink程序提交后，会创建一个Client来进行预处理，并转换为一个并行数据流，这是对应着一个Flink Job，从而可以被JobManager和TaskManager执行。在实现上，Flink基于Actor实现了JobManager和TaskManager，所以JobManager与TaskManager之间的信息交换，都是通过事件的方式来进行处理。 JobManagerJobManager是Flink系统的协调者，它负责接收Flink Job，调度组成Job的多个Task的执行。同时，JobManager还负责收集Job的状态信息，并管理Flink集群中从节点TaskManager。JobManager所负责的各项管理功能，它接收到并处理的事件主要包括： RegisterTaskManager 在Flink集群启动的时候，TaskManager会向JobManager注册，如果注册成功，则JobManager会向TaskManager回复消息AcknowledgeRegistration。 SubmitJob Flink程序内部通过Client向JobManager提交Flink Job，其中在消息SubmitJob中以JobGraph形式描述了Job的基本信息。 CancelJob 请求取消一个Flink Job的执行，CancelJob消息中包含了Job的ID，如果成功则返回消息CancellationSuccess，失败则返回消息CancellationFailure。 UpdateTaskExecutionState TaskManager会向JobManager请求更新ExecutionGraph中的ExecutionVertex的状态信息，更新成功则返回true。 RequestNextInputSplit 运行在TaskManager上面的Task，请求获取下一个要处理的输入Split，成功则返回NextInputSplit。 JobStatusChanged ExecutionGraph向JobManager发送该消息，用来表示Flink Job的状态发生的变化，例如：RUNNING、CANCELING、FINISHED等。 TaskManagerTaskManager也是一个Actor，它是实际负责执行计算的Worker，在其上执行Flink Job的一组Task。每个TaskManager负责管理其所在节点上的资源信息，如内存、磁盘、网络，在启动的时候将资源的状态向JobManager汇报。TaskManager端可以分成两个阶段： 注册阶段 TaskManager会向JobManager注册，发送RegisterTaskManager消息，等待JobManager返回AcknowledgeRegistration，然后TaskManager就可以进行初始化过程。 可操作阶段 该阶段TaskManager可以接收并处理与Task有关的消息，如SubmitTask、CancelTask、FailTask。如果TaskManager无法连接到JobManager，这是TaskManager就失去了与JobManager的联系，会自动进入“注册阶段”，只有完成注册才能继续处理Task相关的消息。 Client 当用户提交一个Flink程序时，会首先创建一个Client，该Client首先会对用户提交的Flink程序进行预处理，并提交到Flink集群中处理，所以Client需要从用户提交的Flink程序配置中获取JobManager的地址，并建立到JobManager的连接，将Flink Job提交给JobManager。Client会将用户提交的Flink程序组装一个JobGraph， 并且是以JobGraph的形式提交的。一个JobGraph是一个Flink Dataflow，它由多个JobVertex组成的DAG。其中，一个JobGraph包含了一个Flink程序的如下信息：JobID、Job名称、配置信息、一组JobVertex等 组件栈这个很有学习意义。 Flink是一个分层架构的系统，每一层所包含的组件都提供了特定的抽象，用来服务于上层组件。 1. Deployment层Flink支持多种部署模式：本地、集群（Standalone/YARN）、云（GCE/EC2）。Standalone部署模式与Spark类似. 2. Runtime层Runtime层提供了支持Flink计算的全部核心实现，比如：支持分布式Stream处理、JobGraph到ExecutionGraph的映射、调度等等，为上层API层提供基础服务。 3. API层API层主要实现了面向无界Stream的流处理和面向Batch的批处理API，其中面向流处理对应DataStream API，面向批处理对应DataSet API。 4. Libraries层该层也可以称为Flink应用框架层，根据API层的划分，在API层之上构建的满足特定应用的实现计算框架，也分别对应于面向流处理和面向批处理两类。面向流处理支持：CEP（复杂事件处理）、基于SQL-like的操作（基于Table的关系操作）；面向批处理支持：FlinkML（机器学习库）、Gelly（图处理）。","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"Flink","slug":"数据/数据处理/Flink","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/"}]},{"title":"SpringBootStarter的定义方式","date":"2019-11-26T14:56:24.000Z","path":"wk/平台工具/MicroService/技术框架/SpringBoot/02.SpringBootStarter定义的方式/","text":"定义AutoConfiguration一. 常用注解1. Configuration用于定义配置类，可替换xml配置文件，被注解的类内部包含有一个或多个被@Bean注解的方法，这些方法将会被AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器。 和xml配置一样，可以配置Bean的生命周期中的各个方法。 1@Bean(name=&quot;testBean&quot;,initMethod=&quot;start&quot;,destroyMethod=&quot;stop&quot;) 问题1:加了Configuration后，怎么将想要的Bean加载到应用的Spring容器中呢？ 可以想想之前xml的bean配置文件怎么加载的。 123456789public interface ConfigurableApplicationContext extends ApplicationContext, Lifecycle, Closeable &#123; ...&#125;FileSystemXmlApplicationContextClassPathXmlApplicationContextEmbeddedWebApplicationContextGroovyWebApplicationContextAnnotationConfigApplicationContext 也就是在初始化以上各个ApplicationContext的时候，会加载指定的Configuration， 不管是xml还是注解方式的。 那Configuration配置的Bean的加载方式就是可以通过AnnotationConfigApplicationContext。ApplicationContext context = new AnnotationConfigApplicationContext(TestConfiguration.class); 问题2: Configuration的配置类在做一些组件的时候怎么定义，来实现组件的灵活性 这个问题如果了解一些初始化ApplicationContext的时候对Configuration的识别加载流程可能更容易理解。TODO. 另外，在@configuration中还可以引入其它注解配置 12@ImportResource(&quot;classpath:applicationContext-configuration.xml&quot;)@Import(TestConfiguration.class) 主要作用理解为是将相关的Bean加载到Spring容器。 2. EnableConfigurationProperties@EnableConfigurationProperties注解的作用是：使使用 @ConfigurationProperties 注解的类生效。 如果一个配置类只配置@ConfigurationProperties注解，而没有使用@Component，那么在IOC容器中是获取不到properties 配置文件转化的bean。 @EnableConfigurationProperties 相当于把使用 @ConfigurationProperties 的类进行了一次注入。 当@EnableConfigurationProperties注解应用到@Configuration时， 任何被@ConfigurationProperties注解的beans将自动被Environment属性配置。 这种风格的配置特别适合与SpringApplication的外部YAML配置进行配合使用。 感觉和@Component的功能类似。将属性配置类注入到容器。 3. Conditional Spring4推出了@Conditional注解，方便程序根据当前环境或者容器情况来动态注入bean. 继@Conditional注解后，又基于此注解推出了很多派生注解，比如@ConditionalOnBean、@ConditionalOnMissingBean、@ConditionalOnExpression、@ConditionalOnClass……实现动态注入bean ConditionalOnClass 自动配置的重要支撑之一。判断当前classpath下是否存在指定类，若是则将当前的配置装载入spring容器。 但这个还不会熟练使用。只是理解了大概是这个意思。 12@ConditionalOnClass(JsonRedisTemplate.class)public class LinkWhiteListRedisOps&#123;&#125; 如果classpath存在JsonRedisTemplate的情况下，则将LinkWhiteListRedisOps装载到spring容器。 4. ConditionalXXXX @ConditionalOnBean 当指定一个Bean存在是，才创建当前这个Bean @ConditionalOnMissingBean 当指定Bean不存在是，才创建这个Bean. @ConditionalOnProperty来控制Configuration是否生效 Class的存在与否作为条件。 从使用来看，和前面基本上没有太大的区别，无非就是将bean换成了class；这样就可以避免因为Class Not Found导致的编译异常了。 如提供了一个bean名为RedisOperBean，用于封装redis相关的操作；但是我这个bean需要依赖restTemplate这个bean，只有当应用引入了redis的相关依赖，并存在RestTemplate这个bean的时候，我这个bean才会生效.12345678@Component@ConditionalOnBean(name=&quot;redisTemplate&quot;)public class RedisOperBean &#123; private final RedisTemplate redisTemplate; public RedisOperBean(RedisTemplate redisTemplate) &#123; // ... &#125;&#125; springboot注解丰富，我们可以利用好这些注解来实现我们自定义的starter配置，减少硬编码的校验，降低组件间的耦合性!!! 二. 两种方式集成方式主动生效和被动生效 从使用者的角度。 1. 主动生效使用@Import注解。主动声明启用该starter才生效。比如加到我们的启动来，或者将该注解标记到你自定义的@Enable注解上。 123456@Target(ElementType.TYPE)@Documented@Import(RedisToolsAutoConfiguration.class)public @interface EnableRedisTools&#123;&#125; 2. 被动生效在starter组件集成入SpringBoot应用时，就已经被应用捕捉到。类似java的SPI机制。 新建 META-INF/spring.factories文件。写入AutoConfiguration全限定名。 123# AutoConfigurationorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\ ch.quiz.redis.distributed.config.RedisLimitAutoConfiguration 3. 优缺点 主动生效的方式需要在使用的项目中手动指定，enable. 也属于硬编码。而相对被动生效。我们可以通过配置来实现组件的生效。 被动生效虽然可以通过配置来控制组件生效，但AutoConfiguration中配置的一些组件对象会实例到容器。比如redis连接，不管是否生效，他都会在实例化的时候连接默认的redis.如果不适用，实例化就是有些浪费。 三.命名规范Spring官方Starter通常命名为spring-boot-starter-{name}如 spring-boot-starter-web Spring官方建议非官方Starter命名应遵循{name}-spring-boot-starter的格式, 如mybatis-spring-boot-starter。","tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wiki.quartz.ren/tags/SpringBoot/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"SpringBoot","slug":"平台工具/MicroService/技术框架/SpringBoot","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/SpringBoot/"}]},{"title":"workFlow","date":"2019-11-26T14:56:24.000Z","path":"wk/平台工具/MicroService/技术框架/workflow/001.README/","text":"WorkFlow学习总结 工作流，指的是一系列相互衔接、自动进行的业务活动或任务。 任务 它们的关系 它们的启动和终止条件 业务过程按照预先设定的规则并借助应用程序和人对相关数据的处理而完成 在日常办公中，当撰写好某份报告之后，可能需要将其提交给领导进行审阅或批示；审批意见可能需要汇集并提交给另外一个人，以便对报告进行进一步的修改。这样，可能会形成同一篇文档在多个人之间的顺序或同时传递。对于这样的情况，我们可以使用工作流技术来控制和管理文档在各个计算机之间自动传递，而非手工传递。这就可以称之为工作流。 类似的关于文档的自动化处理只是工作流技术的一种简单应用。事实上，工作流技术在现实生活中能够完成更多更复杂的任务: 如企业（或机构）内部的各种数据或信息的自动处理，多种业务流程的整合，企业（或机构）之间的数据交换，借助Internet技术实现跨地域的数据传输和处理等等。 工作流的特点： 图形化、可视化设计流程图 支持各种复杂流程 组织结构级处理者指定功能 灵活的外出、超时管理策略 处理过程可跟踪、管理 丰富的统计、查询、报表功能 与MAIL系统集成 工作流的实现工作流的实施需要三个基本步骤：映射、建模和管理。 映射是第一个步骤，其首要任务是确定并且文档化组织内全部现有的手工和自动化的业务流程； 建模则是开发一个有助于建成流线型业务过程的模型。 第三阶段是软件实施以及跨越全部工作部门、业务单元甚至是整个企业的无缝系统集成。","tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wiki.quartz.ren/tags/SpringBoot/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"workflow","slug":"平台工具/MicroService/技术框架/workflow","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/workflow/"}]},{"title":"","date":"2019-11-26T14:55:29.169Z","path":"wk/平台工具/MicroService/技术框架/SpringBoot/自定义starter/","text":"首先我说一个我们都遇到过的一个问题。 组里有很多的项目在持续，陆续也有新项目开启。 那一般开启新项目怎么做？？ 12341. 每个人搭建出来的项目都不一样， 比如 依赖的技术组件，版本，项目结构，打包，启动方式（启动脚本）。 依赖的第三方包的选择，版本选择。","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"SpringBoot","slug":"平台工具/MicroService/技术框架/SpringBoot","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/SpringBoot/"}]},{"title":"SpringBoot常见starter","date":"2019-11-22T14:56:24.000Z","path":"wk/平台工具/MicroService/技术框架/SpringBoot/01.SpringBoot常见starter/","text":"简化配置、开箱即用、快速集成. 举个例子。redis-starter，会根据luttuce、redisson、jedis 的变化实例化不同的客户端链接。实现方式是使用了@Conditional系列注解 Redis的三个框架：Jedis,Redisson,Lettuce spring-boot的各个starter. 是spring-boot场景启动器，后面跟的单词就是场景，比如说后面跟web,就是导入web场景的所有依赖。 1. spring-boot-starterSpring Boot的核心启动器，包含了自动配置、日志和YAML 2. spring-boot-starter-parent控制版本信息 3. spring-boot-starter-webweb的场景，自动帮我们引入了web模块开发需要的相关jar包 4. spring-boot-starter-testspringboot程序测试依赖，如果是自动创建项目默认添加 5. spring-boot-starter-actuator用于支持 SpringBoot 应用的监控。 Actuator 这个词即使翻译过来也不是很容易理解（比如翻译成“制动器；传动装置；执行机构”等）。 为了能够感知应用的运行状态，我们通常会： 123451. 设置一些监控指标并采集分析2. 监控指标的采集需要在应用内部设置相应的监控点3. 这类监控点一般只是读取状态数据，我们通常称它们为 Sensor，即中文一般称为“传感器”的东西。4. 应用的运行状态数据通过 Sensors 采集上来之后，我们通常会有专门的系统对这些数据进行分析和判断。5. 一旦某个指标数据超出了预定的阈值，这往往意味着应用的运行状态在这个指标上出现了“不健康”的现象，我们希望对这个指标进行调整，而为了能够执行调整，我们需要预先在应用内部设置对应的执行调整逻辑的控制器。 比如，直接关闭的开关，或者可以执行微调甚至像刹车一样直接快速拉低某个指标值的装置，这些控制器就称为 Actuator。虽然我们日常天天在说“监控，监控”，但实际上“监”跟“控”是两个概念，Sensor 更多服务于“监”的场景，而 Actuator 则服务于“控”的场景。 SpringBoot的Endpoint主要是用来监控应用服务的运行状况，并集成在Mvc中提供查看接口。 spring-boot-starter-actuator 自动配置模块默认提供了很多 endpoint，虽然自动配置模块名为 spring-boot-starter-actuator，但实际上这些 endpoint 可以按照“监”和“控”划分为两类： Sensor 类 endpoints 和 Actuator 类 endpoints. Sensor：感知器,传感器 类型。 Actuator：执行器 类型 1234567----- Sensorautoconfig - 提供一份 SpringBoot 的自动配置报告，告诉我们哪些自动配置模块生效了，以及哪些没有生效，原因是什么。beans - 给出当前应用的容器中所有 bean 的信息。configprops - 对现有容器中的 ConfigurationProperties 提供的信息进行“消毒”处理后给出汇总信息。info - 提供当前 SpringBoot 应用的任意信息，我们可以通过 Environment 或者 application.properties 等形式提供以 info. 为前缀的任何配置项，然后 info 这个 endpoint 就会将这些配置项的值作为信息的一部分展示出来metrics - 当前 SprinBoot 应用的 metrics 信息。trace - 当前 SpringBoot 应用的 trace 信息。 123----- Actuatorshutdown - 用于关闭当前 SpringBoot 应用的 endpoint。dump - 用于执行线程的 dump 操作。 参考: spring-boot-starter-actuator与应用监控,Spring Boot提供的监控和管理接口-2.0 endpoints 属于 spring-boot-starter-actuator 提供的主要功能之一.除此之外，spring-boot-starter-actuator 还提供了更多针对应用监控的支持和实现方案。 上面主要介绍了spring-boot-starter-actuator。 6. 各Spring-Boot-Starters介绍Spring Boot application starters 问题: 以上starter其实已经很完备了，为什么都要自定义。 简化配置、开箱即用、快速集成、灵活装配使用。 自定义starterSpring Boot入门教程(三十一): 自定义Starter 最详细的自定义Spring Boot Starter开发教程 SpringBoot使用AutoConfiguration自定义Starter","tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wiki.quartz.ren/tags/SpringBoot/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"SpringBoot","slug":"平台工具/MicroService/技术框架/SpringBoot","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/SpringBoot/"}]},{"title":"SpringBoot应用启动流程","date":"2019-11-22T14:56:24.000Z","path":"wk/平台工具/MicroService/技术框架/SpringBoot/03.SpringBoot应用启动流程/","text":"bootstrap and launch a Spring application from a Java main method. By default class will perform the following steps to bootstrap your application: Create an appropriate {@link ApplicationContext} instance (depending on your classpath) Register a {@link CommandLinePropertySource} to expose command line arguments as Spring properties Refresh the application context, loading all singleton beans Trigger any {@link CommandLineRunner} beans 12345678910/** * Run the Spring application, creating and refreshing a new * &#123;@link ApplicationContext&#125;. * @param args the application arguments (usually passed from a Java main method) * @return a running &#123;@link ApplicationContext&#125; */public ConfigurableApplicationContext run(String... args) &#123;&#125; ConfigurableApplicationContext SpringBoot启动原理解析 Spring Boot：启动原理解析","tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wiki.quartz.ren/tags/SpringBoot/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"SpringBoot","slug":"平台工具/MicroService/技术框架/SpringBoot","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/SpringBoot/"}]},{"title":"SpringBoot:自定义Endpoint","date":"2019-11-22T14:56:24.000Z","path":"wk/平台工具/MicroService/技术框架/SpringBoot/04.自定义Endpoint/","text":"EndpointSpringBoot的Endpoint主要是用来监控应用服务的运行状况，并集成在Mvc中提供查看接口。 内置的Endpoint比如HealthEndpoint会监控dist和db的状况，MetricsEndpoint则会监控内存和gc的状况。 Endpoint的接口如下，其中invoke()是主要的方法，用于返回监控的内容，isSensitive()用于权限控制。 123456public interface Endpoint&lt;T&gt; &#123; String getId(); boolean isEnabled(); boolean isSensitive(); T invoke();&#125;","tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://wiki.quartz.ren/tags/SpringBoot/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"SpringBoot","slug":"平台工具/MicroService/技术框架/SpringBoot","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/SpringBoot/"}]},{"title":"scala环境搭建","date":"2019-11-16T17:13:34.000Z","path":"wk/平台工具/工作相关/环境搭建/003.scala环境搭建/","text":"下载部署包下载路径 放到指定路径/data/tools/ 配置环境变量123export JAVA_HOME=/data/tools/jdk1.8.0_25export SCALA_HOME=/data/tools/scala-2.11.12export PATH=$JAVA_HOME/bin:$SCALA_HOME/bin:$PATH JDK包安装下载华为镜像 华为开源镜像站 java.lang.NumberFormatException: For input string: “0x100” 问题export TERM=xterm-color","tags":[{"name":"scala","slug":"scala","permalink":"https://wiki.quartz.ren/tags/scala/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"工作相关","slug":"平台工具/工作相关","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/"},{"name":"环境搭建","slug":"平台工具/工作相关/环境搭建","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]},{"title":"Maven命令","date":"2019-10-16T03:55:57.000Z","path":"wk/平台工具/中间件_组件/IDE/Maven命令/","text":"项目升级版本1mvn versions:set -DnewVersion=1.0.6.19","tags":[{"name":"mvn","slug":"mvn","permalink":"https://wiki.quartz.ren/tags/mvn/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"IDE","slug":"平台工具/中间件-组件/IDE","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/IDE/"}]},{"title":"0.C和c++区别","date":"2019-07-22T13:13:34.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/0.C与c++区别及入门/","text":"区别 C是一个结构化语言，它的重点在于算法和数据结构。 设计首要考虑: 如何通过一个过程，对输入（或环境条件）进行运算处理得到输出（或实现过程（事务）控制）。 首要考虑的是如何构造一个对象模型，让这个模型能够契合与之对应的问题域 一.具体的区别点 类，类对于初学者，它是一个累赘。类的封装使得初学者对程序产生厌倦，感到不适和麻烦。 引用，引用是C++中最好尽量不要用它，除非万不得已。引用对于初学者就更容易产生混淆，不知道哪个是引用，哪个是变量 函数的重载，初学者学函数的重载好像没什么坏处，但是，这会使初学者潜意识里对C语言的变量类型的重要性产生淡化，要记住C语言是对变量类型最敏感了的，变量的类型在C语言里的重要性是不言而喻的。 流操作符，和上面同样的道理，使得对变量类型的重要性产生淡化，有时会产生使初学者莫名其妙的结果。 http://c.biancheng.net/cpp/html/798.html 聊天查询的限制， 只能查询安全风险用户的聊天信息","tags":[{"name":"C++","slug":"C","permalink":"https://wiki.quartz.ren/tags/C/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"}]},{"title":"JavaJNI的支持","date":"2019-07-22T13:13:34.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/C++/7.JavaJNI的支持/","text":"123456789101112/** * StringAppendOperator is a merge operator that concatenates * two strings. */public class StringAppendOperator extends MergeOperator &#123; public StringAppendOperator() &#123; super(newSharedStringAppendOperator()); &#125; private native static long newSharedStringAppendOperator(); @Override protected final native void disposeInternal(final long handle);&#125; 以上代码是调用native方法的java代码. 在Java中native是关键字，它一般在本地声明，异地用C和C++来实现. 12345声明有以下几点注意:1. native与访问控制符前后的关系不受限制.2. 必须在返回类型之前3. 它一般为非抽象类方法.4. native方法在异地实现,像抽象方法一样,所以没有方法体,以分号结束. 下面是对应的C++实现代码 123456789101112131415161718192021222324252627/* * Class: org_rocksdb_StringAppendOperator * Method: newSharedStringAppendOperator * Signature: (C)J */jlong Java_org_rocksdb_StringAppendOperator_newSharedStringAppendOperator( JNIEnv* /*env*/, jclass /*jclazz*/, jchar jdelim) &#123; auto* sptr_string_append_op = new std::shared_ptr&lt;ROCKSDB_NAMESPACE::MergeOperator&gt;( ROCKSDB_NAMESPACE::MergeOperators::CreateStringAppendOperator( (char)jdelim)); return reinterpret_cast&lt;jlong&gt;(sptr_string_append_op);&#125;/* * Class: org_rocksdb_StringAppendOperator * Method: disposeInternal * Signature: (J)V */void Java_org_rocksdb_StringAppendOperator_disposeInternal(JNIEnv* /*env*/, jobject /*jobj*/, jlong jhandle) &#123; auto* sptr_string_append_op = reinterpret_cast&lt;std::shared_ptr&lt;ROCKSDB_NAMESPACE::MergeOperator&gt;*&gt;( jhandle); delete sptr_string_append_op; // delete std::shared_ptr&#125; 问题：那这个对应关系是怎么找到的呢，就是说java的接口，怎么找到c++里的这个方法的呢？ include 引入 Signature: (Ljava/lang/String;)V 函数的标记符。当从本地方法端访问Java端的方法时，会用到这个标记符。JNI中为每种数据类型也定义了标记符，标记符的规则请查看JNI标准文档。 native方法的使用方式1231. 用loadLibrary导入存在源文件目录下的*.dll文件,2. 然后定义native方法时,与c/c++实现的函数有相同的参数和返回类型．3.方法被映射为固定的形式。其中函数名的映射规则是（Java_包名_类名_方法名）。 如下rocksDB中的使用方式. 见 org.rocksdb.NativeLibraryLoader 1234567891011public synchronized void loadLibrary(final String tmpDir) throws IOException &#123; try &#123; System.loadLibrary(sharedLibraryName); &#125; catch(final UnsatisfiedLinkError ule1) &#123; try &#123; System.loadLibrary(jniLibraryName); &#125; catch(final UnsatisfiedLinkError ule2) &#123; loadLibraryFromJar(tmpDir); &#125; &#125;&#125; 那.ddl ,.so文件又是什么，怎么来的呢？先说所JNI JNIJNI是Java Native Interface的缩写，中文为JAVA本地调用.它允许Java代码和其它语言写的代码进行交互. JNI使得运行在JVM虚拟机上的JAVA代码能够操作使用其它语言编写的应用程序和库,比如C/C++以及汇编语言等. JNI的设计目的： 123 ·标准的java类库可能不支持你的程序所需的特性。 ·或许你已经有了一个用其他语言写成的库或程序，而你希望在java程序中使用它。 ·你可能需要用底层语言实现一个小型的时间敏感代码，比如汇编，然后在你的java程序中调用这些功能。 JAVA中native方法调用","tags":[{"name":"Java","slug":"Java","permalink":"https://wiki.quartz.ren/tags/Java/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"C++","slug":"平台工具/2-计算机基础/编程语言/C","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"}]},{"title":"Flink学习开篇","date":"2019-06-30T03:55:57.000Z","path":"wk/数据/数据处理/Flink/FlinkStart/","text":"Flink主要用于解决一系列数据处理相关的问题.Flink的核心点在于有状态计算(官网首页:Stateful Computations over Data Streams). Apache Flink 是一个用于对无界和有界数据流进行有状态计算的框架和分布式处理引擎。Flink 被设计为能够在所有常见的集群环境中运行，以内存速度和任意规模进行计算。 1. 应用场景Flink的应用场景主要分为以下几类: 实时数据分析/处理：网站流量分析、用户行为分析、开发实时ETL、实时监控指标分析 异常检测：金融交易场景风险评估、欺诈检测 日志分析：服务器和应用程序日志，用于故障排查、性能监控 其它:推荐系统、社交媒体、金融交易… 它的优点包括：处理实时数据的低延迟，数据一致性和准确性、大规模数据处理、复杂的事件处理、容错与恢复、流批统一 2. Flink核心2.1 Flink基本概念和架构2.2 Flink编程模型2.3 其它窗口操作、状态管理、时间处理(事件时间、处理时间、摄入时间)、容错和检查点、部署和运行、性能优化 3. Flink环境搭建4. Flink原理 任务调度和执行 数据并行处理 流处理 窗口机制 状态管理 检查点和容错 数据传输 结果输出 5. 学习资料5.1 学习方法 基础知识：分布式系统、数据结构和基本的算法 官方文档： 在线课程和教程 实践项目、研究案例 阅读相关书籍、深入理解原理 对比其他流处理框架 5.2 学习资料极客时间 Github Flink教程 《Flink官方文档》监控Wikipedia 编辑流 123456789mvn archetype:generate \\ -DarchetypeGroupId=org.apache.flink \\ -DarchetypeArtifactId=flink-quickstart-java \\ -DarchetypeVersion=1.2.0 \\ -DgroupId=wiki-edits \\ -DartifactId=wiki-edits \\ -Dversion=0.1 \\ -Dpackage=wikiedits \\ -DinteractiveMode=false","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"Flink","slug":"数据/数据处理/Flink","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/Flink/"}]},{"title":"7.Docker其他工具","date":"2019-06-25T17:13:34.000Z","path":"wk/平台工具/中间件_组件/Docker/007.Docker其他工具/","text":"docker-composepip 安装docker-compose. 1/home/zhangquanquan/anaconda3/bin/docker-compose","tags":[{"name":"Docker","slug":"Docker","permalink":"https://wiki.quartz.ren/tags/Docker/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Docker","slug":"平台工具/中间件-组件/Docker","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Docker/"}]},{"title":"01.开发使用环境","date":"2019-06-17T01:56:24.000Z","path":"wk/平台工具/MicroService/微服务架构/001.开发学习支持/","text":"elasticsearch docker 搭建es开发环境1docker run --name es-kibana -d -p 9200:9200 -p 5601:5601 nshou/elasticsearch-kibana By Dockerfile mysql docker 搭建mysql环境 1docker run --name mysql-server -p 3306:3306 -e MYSQL_ROOT_PASSWORD=quantumcs -d mysql:5.7 手动安装mysql支持监听mysql-binlog rabbitMqkafka123456# 启动容器docker run -d --name data-dev --restart always --net=host -e ADV_HOST=127.0.0.1 landoop/fast-data-dev# 创建topicbin/kafka-topics.sh --create --zookeeper 172.16.26.193:2181 --replication-factor 1 --partitions 5 --topic my-replicated-topic# 更新partition大小bin/kafka-topics.sh --alter --zookeeper 127.0.0.1:2181 --partitions 5 --topic nginx_log 对技术提升很不错的书 Spring Boot 2(一)：Spring Boot 2.0新特性 https://github.com/Bypass007/Safety-Project-Collection https://github.com/ysrc/Liudao https://github.com/momosecurity/aswan https://github.com/threathunterX/nebula_doc/blob/master/chapter2/section1/section1.","tags":[{"name":"MicroService","slug":"MicroService","permalink":"https://wiki.quartz.ren/tags/MicroService/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"微服务架构","slug":"平台工具/MicroService/微服务架构","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"}]},{"title":"01.micronaut介绍","date":"2019-06-17T01:56:24.000Z","path":"wk/平台工具/MicroService/技术框架/micronaut/README/","text":"https://micronaut.io/ https://github.com/micronaut-projects","tags":[{"name":"micronaut","slug":"micronaut","permalink":"https://wiki.quartz.ren/tags/micronaut/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"micronaut","slug":"平台工具/MicroService/技术框架/micronaut","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/micronaut/"}]},{"title":"1.决策树","date":"2019-06-15T14:55:57.000Z","path":"wk/算法/001.机器学习/机器学习实战/1.决策树/","text":"优点计算复杂度不高， 输出结果易于理解。对中间值的缺失不敏感，可以处理不相关特征数据。 缺点可能会产生过度匹配问题 适合数据类型数值型和标称型 第一个问题：当前数据集中哪个特征在划分数据分类时起决定性作用。 为了找到决定性的特征，划分出最好的结果，我们必须评估每一个特征。 决策树的流程 收集数据：可以使用任意方法 准备数据：树构造算法只适用于标称型数据，因此数值型必须离散化 分析数据：可以使用任何方法，构造树完成之后，我们应该检查图形是否符合预期 训练算法：构造树的数据结构 测试算法：使用经验树计算错误率 使用算法：此步骤可以使用任何监督学习算法，而使用决策树可以更好地理解数据的内在含义。 一些决策树算法采用二分法划分数据，这里依据某个属性划分数据将会产生4个可能的值，我们把数据划分为四块，并创建四个不同的分支。 这里使用ID3算法划分数据集。 每次划分数据集时我们只选取一个特征属性，如果训练集中存在20个特征，第一次我们选择哪个特征作为划分的参考属性呢？？ 比如：特征有，不浮出水面是否可以生存，是否有脚蹼。可以将这些动物分为两类：鱼类和非鱼类。现在想决定依据第一个特征还是第二个特征划分数据呢。 我们比如采用量化的方法判断如何划分数据 信息增益划分数据集的原则：将无序的数据变得更加有序。可以由很多种方法划分数据集，各有各的优缺点。其中一种是使用信息论度量信息。信息论是量化处理信息的分支科学。可以在划分数据集前后使用信息论量化度量信息的内容。 在划分数据集之前之后信息发生的变化称为信息增益，知道如何计算信息增益，我们就可以计算每个特征值划分数据集获得的信息增益，获得信息增益最高的特征就是最好的选择 如何计算信息增益集合信息的度量方式称为香农熵或者简称熵。这个名字来源于信息论之父克劳德·香农。 熵定义为信息的期望值。 信息：如果待分类的事物可能划分在多个分类之中，则符号xi的信息定义为l(xi)=-log2p(xi). 其中p(xi)是选择该分类的概率。 为了计算熵，我们需要计算所有类别所有可能值包含的信息期望值，通过下面的公式。H = -Ep(xi)log2p(xi).其中n为分类的数目。 1234567891011121314151617# 计算给定数据集的香农熵from math import log2pdef calcShannonEnt(dataSet): numEntries = len(dataSet) labelCounts = &#123;&#125; # 以下五行为所有可能分类创建字典 for featVec in dataSet: currentLabel = featVec[-1] if currentLabel not in labelCounts.keys(): labelCounts[currentLabel] = 0 labelCounts[currentLabel] += 1 shannonEnt = 0.0 for key in labelCounts: prob = float(labelCounts[key]) / numEntries # 以2为底求对数 shannonEnt -= prob * log(prob,2) return shannonEnt 以上，首先计算数据集中实例的总数，我们也可以在需要时再计算这个值，但是由于代码中多次用到这个值，为了提高代码效率，我们显式地声明一个变量保存实例总数。然后，创建一个数据字段，它的键值是最后一列的数值。 最后，使用所有类标签的发生频率计算类别出现的概率，我们将用这个概率计算香农熵，统计所有类标签发生的次数。 下面看看如何使用熵划分数据集。 123456789# trees.pydef createDataSet(): dataSet = [[1,1,&#x27;yes&#x27;], [1,1,&#x27;yes&#x27;], [1,0,&#x27;no&#x27;], [0,1,&#x27;no&#x27;], [0,1,&#x27;no&#x27;]]labels = [&#x27;no surfacing&#x27;, &#x27;flippers&#x27;]return dataSet, labels 12myDat, labels = trees.createDataSet()trees.calcShannonEnt(myDat) 熵越高，则混合的数据也越多，我们可以在数据集中添加更多的分类，观察熵是如何变化的。 1234# 增加一个类别myDat[0][-1] = &#x27;maybe&#x27;myDattrees.calcShannonEnt(myDat) 得到熵之后，我们就可以按照获取最大信息增益的方法划分数据集，下面具体介绍：如何划分数据集以及如何度量信息增益。 另一度量集合无序程度的方法是基尼不纯度，简单地说就是从一个数据集中随机选取子项，度量其被错误分类到其他分组里的概率。 划分数据集上面介绍了如何度量数据集的无序程度，分类算法除了需要测量信息熵，还需要划分数据集。度量划分数据集的熵，以便判断当前是否正确的划分了数据集。 我们将对每个特征划分数据集的结果计算一次信息熵，然后判断按照哪个特征划分数据集是最好的划分方式。 想象一个分部在二维空间的数据散点图，需要在数据之间画条线，将它们分为两部分，我们应该按照x轴还是y轴划线呢？ 123456789def splitDataSet(dataSet, axis, value): # 创建新的list对象 retDataSet = [] for featVec in dataSet: if featVec[axis] == value: reducedFeatVec = featVec[:axis] reducedFeatVec.extend(featVec[axis +1:]) retDataSet.append(reducedFeatVec) return retDataSet 以上输入三个参数：待划分的数据集，划分数据集的特征，需要返回的特征的值。","tags":[{"name":"TML","slug":"TML","permalink":"https://wiki.quartz.ren/tags/TML/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"机器学习实战","slug":"算法/001-机器学习/机器学习实战","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98/"}]},{"title":"1.目标检测","date":"2019-06-15T14:55:57.000Z","path":"wk/算法/003.图像识别/目标检测/001.目标检测/","text":"定义目标检测（ObjectDetection）是计算机视觉中的一项任务，其目标是在图像或视频中识别和定位图像中存在的多个物体，并为每个物体提供相应的边界框（Bounding Box）。与图像分类任务不同，目标检测不仅要求识别图像中的物体类别，还要准确标定每个物体的位置。 识别图像中的物体类别 + 准确标定每个物体的位置. 1234图像分类。是计算机视角最基本的任务之一。在图像分类的基础上，还有更复杂和有意思的任务，如目标检测，物体定位，图像分割等。 目标检测: 可以看成图像分类与定位的结合。 给定一张图片，目标检测系统要能够识别出图片的目标并给出其位置，由于图片中目标数是不定的，且要给出目标的精确位置，目标检测相比分类任务更复杂。 应用场景目标检测的一个实际应用场景就是无人驾驶，如果能够在无人车上装载一个有效的目标检测系统，那么无人车将和人一样有了眼睛，可以快速地检测出前面的行人与车辆，从而作出实时决策。 两类流行的算法近几年来，目标检测算法取得了很大的突破。 1.R-CNN系算法一类是基于Region Proposal的R-CNN系算法（R-CNN，Fast R-CNN, Faster R-CNN），它们是two-stage的，需要先使用启发式方法（selective search）或者CNN网络（RPN）产生Region Proposal，然后再在Region Proposal上做分类与回归。 2. Yolo，SSD这类one-stage算法，其仅仅使用一个CNN网络直接预测不同目标的类别与位置。第一类方法是准确度高一些，但是速度慢，但是第二类算法是速度快，但是准确性要低一些。 Yolo全称是You Only Look Once: Unified, Real-Time Object Detection. You Only Look Once说的是只需要一次CNN运算，Unified指的是这是一个统一的框架，提供end-to-end的预测，而Real-Time体现是Yolo算法速度快。这里我们谈的是Yolo-v1版本算法，其性能是差于后来的SSD算法的，但是Yolo后来也继续进行改进，产生了Yolo9000算法。本文主要讲述Yolo-v1算法的原理，特别是算法的训练与预测中详细细节，最后将给出如何使用TensorFlow实现Yolo算法。 1. 滑动窗口与CNN","tags":[{"name":"图像识别","slug":"图像识别","permalink":"https://wiki.quartz.ren/tags/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"003.图像识别","slug":"算法/003-图像识别","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"},{"name":"目标检测","slug":"算法/003-图像识别/目标检测","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/003-%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"}]},{"title":"6.EsJavaClient","date":"2019-04-28T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Elasticsearch/6.EsJavaClient/","text":"Document APIs","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Elasticsearch","slug":"数据/数据处理/DataStore/Elasticsearch","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Elasticsearch/"}]},{"title":"Nlp学习资料","date":"2019-04-22T14:55:57.000Z","path":"wk/算法/001.机器学习/NLP/NLP学习资料/","text":"系统学习NLP（三）—NLP入门综述 如何学习自然语言处理：NLP领域经典《自然语言处理综论》英文版第三版更新 阿里自然语言处理部总监分享：NLP技术的应用及思考","tags":[{"name":"NLP","slug":"NLP","permalink":"https://wiki.quartz.ren/tags/NLP/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"NLP","slug":"算法/001-机器学习/NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NLP/"}]},{"title":"分词","date":"2019-04-22T14:55:57.000Z","path":"wk/算法/001.机器学习/NLP/分词实现原理/","text":"Trie树分词 Aho Corasick自动机结合DoubleArrayTrie极速多模式匹配","tags":[{"name":"NLP","slug":"NLP","permalink":"https://wiki.quartz.ren/tags/NLP/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"NLP","slug":"算法/001-机器学习/NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NLP/"}]},{"title":"多模匹配","date":"2019-04-22T14:55:57.000Z","path":"wk/算法/001.机器学习/NLP/多模匹配/","text":"给出一个关键词列表(模式串)，和一段字符串text。输出text中存在的关键词。 以上也是多模匹配的定义， 多模的名字应该来源与模式匹配（两个字符串之间的匹配,我们常听的KMP算法） 多模匹配有以下场景： 关键字过滤, 分词, 入侵检测, 病毒检测 算法实现 AC算法实现状态机入门：从定义到使用 多模字符串匹配算法-Aho–Corasick–java AC自动机+trie树实现高效多模式匹配字典（java源码） WM（Wu-Manber）算法字符串匹配的Boyer-Moore算法（很详细） 多模匹配 Wu-Manber算法 案例说明输入：关键字数组：[“研究”, “脂肪酶”, “水平下”, “哮喘”, “正相关”, “表达式”, “研究结果”]待匹配字符：“该研究结果表明，IL-17A和IL-9高表达以及脂肪酶、CCL11水平下降与成人哮喘之间呈正相关。” 输出：匹配成功关键词组：[‘研究’, ‘研究结果’, ‘脂肪酶’, ‘水平下’, ‘哮喘’, ‘正相关’] 测试结果：TODO AC与WM对比：内存占用：WM改进算法比AC改进算法的内存小很多；预处理： WM改进算法比AC改进算法的预处理时间小很多；匹配速度：WM算法的匹配速度跟加载的模式串内容有很大的关系；AC算法跟加载的模式串内容无关；前缀：如果前缀内容大量相似，WM改进算法的Shift表和HASH表冲突比较多，匹配慢。 AC算法优化：采用双数组来优化内存占用。 多模匹配—历程","tags":[{"name":"NLP","slug":"NLP","permalink":"https://wiki.quartz.ren/tags/NLP/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"NLP","slug":"算法/001-机器学习/NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NLP/"}]},{"title":"字典树","date":"2019-04-22T14:55:57.000Z","path":"wk/算法/001.机器学习/NLP/字典树/","text":"Trie树，又称字典树，单词查找树或者前缀树，是一种用于快速检索的多叉树结构，如英文字母的字典树是一个26叉树，数字的字典树是一个10叉树。 字典树(Trie树)的实现及应用 应用场景 Trie树和DFA，确定有限状态自动机trie树实际上是一个DFA，通常用转移矩阵表示。行表示状态，列表示输入字符，（行，列）位置表示转移状态。这种方式的查询效率很高，但由于稀疏的现象严重，空间利用效率很低。也可以采用压缩的存储方式即链表来表示状态转移，但由于要线性查询，会造成效率低下。 Trie树的实现Trie树的创建要考虑的是父节点如何保存孩子节点，主要有链表和数组两种方式： 使用节点数组，因为是英文字符，可以用Node[26]来保存孩子节点(如果是数字我们可以用Node[10])，这种方式最快，但是并不是所有节点都会有很多孩子，所以这种方式浪费的空间太多 用一个链表根据需要动态添加节点。这样我们就可以省下不小的空间，但是缺点是搜索的时候需要遍历这个链表，增加了时间复杂度。 查询操作 如何构建 双数组Trie树(DoubleArrayTrie)Java实现 Trie 树的以下几个特点 根节点不包含字符，除根节点外每个节点只包含一个字符 从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。 每个节点的所有子节点包含的字符都不相同，这一点也就保证了相同的前缀能够得到复用","tags":[{"name":"NLP","slug":"NLP","permalink":"https://wiki.quartz.ren/tags/NLP/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"NLP","slug":"算法/001-机器学习/NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NLP/"}]},{"title":"Mysql数据库导入导出","date":"2019-03-26T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Mysql/Mysql数据库导入导出/","text":"导出整个数据库mysqldump -h192.168.1.34 -utest -ptest database_name &gt; data_file_name 导入整个数据库mysql -h192.168.1.35 -utest -p’test’ database_name &lt; data_file_name Docker集中化web界面管理平台-Shipyard部署记录 导入csv格式数据mysqlimport -h192.168.1.34 -utest -ptest database_name —fields-terminated-by=’\\t’ ‘filepath’ —columns=’element,element_type,index‘ —local","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Mysql","slug":"数据/数据处理/DataStore/Mysql","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Mysql/"}]},{"title":"MySQL常见命令","date":"2019-03-26T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Mysql/Mysql相关命令/","text":"创建唯一索引CREATE UNIQUE INDEX uk_content_type ON corpus(content,type_id); 修改字段类型ALTER TABLE roster ADD COLUMN del_flag int(1) DEFAULT 0 NOT NULL COMMENT ‘删除标识’; ALTER TABLE corpus add unique index uk_content(user_account_id,game_id,daily_date); ALTER TABLE roster MODIFY COLUMN del_flag COMMENT ‘0:没有删除,1:已删除’; ALTER TABLE freeze_white_list ADD column com_id bigint(20) unsigned NOT NULL DEFAULT ‘0’ COMMENT ‘公司Id’; 权限配置1234grant all privileges on *.* to nova identified by &#x27;quantumcs&#x27;;flush privileges;// 本地用户访问权限grant all privileges on *.* to nova@&#x27;127.0.0.1&#x27; identified by &#x27;quantumcs&#x27;; mysql表占用空间","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Mysql","slug":"数据/数据处理/DataStore/Mysql","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Mysql/"}]},{"title":"Awk文本处理神奇","date":"2019-03-24T01:56:24.000Z","path":"wk/项目管理/软件工程/Linux/Awk文本处理神奇/","text":"AWK工作流程是逐行扫描文件，从第一行到最后一行，寻找匹配特定模式的行，并在这些行上进行用户想要到的操作。 基本结构由模式匹配和处理过程组成. 1pattern &#123;action&#125; 离线上传mysql 网络状态查看查看某台服务器的tcp状态数 1netstat -n | awk &#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27; awk执行shell.awk -F ‘ ‘ ‘{print $NF}’ | awk ‘{cmd=”wc -l $1”;system(cmd)}’ | more awk 多条件截取.s","tags":[{"name":"linux","slug":"linux","permalink":"https://wiki.quartz.ren/tags/linux/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"软件工程","slug":"项目管理/软件工程","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"Linux","slug":"项目管理/软件工程/Linux","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/Linux/"}]},{"title":"内存查看","date":"2019-03-24T01:56:24.000Z","path":"wk/项目管理/软件工程/Linux/内存/001.内存查看/","text":"cat /proc/meminfo 可以查看系统内存使用情况 12345678910111213141516171819202122232425262728293031323334353637383940414243444546MemTotal: 8175236 kBMemFree: 3202196 kBMemAvailable: 5284992 kBBuffers: 125344 kBCached: 2060772 kBSwapCached: 0 kBActive: 3913980 kBInactive: 655548 kBActive(anon): 2412548 kBInactive(anon): 60252 kBActive(file): 1501432 kBInactive(file): 595296 kBUnevictable: 3652 kBMlocked: 3652 kBSwapTotal: 0 kBSwapFree: 0 kBDirty: 180 kBWriteback: 0 kBAnonPages: 2387064 kBMapped: 258428 kBShmem: 86964 kBSlab: 336368 kBSReclaimable: 292052 kBSUnreclaim: 44316 kBKernelStack: 10928 kBPageTables: 12948 kBNFS_Unstable: 0 kBBounce: 0 kBWritebackTmp: 0 kBCommitLimit: 4087616 kBCommitted_AS: 5205168 kBVmallocTotal: 34359738367 kBVmallocUsed: 0 kBVmallocChunk: 0 kBHardwareCorrupted: 0 kBAnonHugePages: 1951744 kBCmaTotal: 0 kBCmaFree: 0 kBHugePages_Total: 0HugePages_Free: 0HugePages_Rsvd: 0HugePages_Surp: 0Hugepagesize: 2048 kBDirectMap4k: 124784 kBDirectMap2M: 7215104 kBDirectMap1G: 3145728 kB MemTotal 是全部物理内存，我的虚拟器配置的是1G内存，MemAvailable = memfree+buffers+cached 当memfree不够时，内核会通过回写机制(pdflush线程)把cached和buffered内存回写到后备存储器，也可以通过手动方式显式释放cache内存 1echo 3 &gt; /proc/sys/vm/drop_caches 释放后，Buffers和Cached 表小了好多，MemFree变大了许多 进程内存","tags":[{"name":"linux","slug":"linux","permalink":"https://wiki.quartz.ren/tags/linux/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"软件工程","slug":"项目管理/软件工程","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"Linux","slug":"项目管理/软件工程/Linux","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/Linux/"},{"name":"内存","slug":"项目管理/软件工程/Linux/内存","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/Linux/%E5%86%85%E5%AD%98/"}]},{"title":"01.Netty服务端启动流程","date":"2019-03-17T01:56:24.000Z","path":"wk/平台工具/MicroService/技术框架/Netty/01.netty服务端启动流程/","text":"两个线程组12EventLoopGroup boosGroup = new NioEventLoopGroup();EventLoopGroup workerGroup = new NioEventLoopGroup(); EventLoopGroup的定义 1234567891011121314151617181920212223242526public class NioEventLoopGroup extends MultithreadEventLoopGroup&#123; /** * Sets the percentage of the desired amount of time spent for I/O in the child event loops. The default value is * &#123;@code 50&#125;, which means the event loop will try to spend the same amount of time for I/O as for non-I/O tasks. */ public void setIoRatio(int ioRatio) &#123; for (EventExecutor e: children()) &#123; ((NioEventLoop) e).setIoRatio(ioRatio); &#125; &#125; /** * Replaces the current &#123;@link Selector&#125;s of the child event loops with newly created &#123;@link Selector&#125;s to work * around the infamous epoll 100% CPU bug. */ public void rebuildSelectors() &#123; for (EventExecutor e: children()) &#123; ((NioEventLoop) e).rebuildSelector(); &#125; &#125; @Override protected EventExecutor newChild(ThreadFactory threadFactory, Object... args) throws Exception &#123; return new NioEventLoop(this, threadFactory, (SelectorProvider) args[0], ((SelectStrategyFactory) args[1]).newSelectStrategy(), (RejectedExecutionHandler) args[2]); &#125;&#125; 专门用于处理网络的事件 一个用于处理接受客户端的连接，一个用于进行 SocketChannel 的网络读取。 boos这个EventLoopGroup作为一个acceptor负责接收来自客户端的请求，然后分发给worker这个EventLoopGroup来处理所有的事件event和channel的IO。 引导程序ServerBootstrap. 启动NIO服务的辅助启动类. 12345678ServerBootstrap b = new ServerBootstrap() .group(boosGroup, workerGroup) .channel(NioServerSocketChannel.class) .option(ChannelOption.SO_BACKLOG, 1012) .childHandler(new ChildChannelHandler());ChannelFuture f = b.bind(port).sync(); // 绑定端口f.channel().closeFuture().sync();// 等待服务器端监听端口关闭 group方法绑定了两个NIO线程组 绑定处理消息的Handler. handler处理流程和管理流程-TODO","tags":[{"name":"Netty","slug":"Netty","permalink":"https://wiki.quartz.ren/tags/Netty/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/Netty/"}]},{"title":"01.Netty服务端启动流程","date":"2019-03-17T01:56:24.000Z","path":"wk/平台工具/MicroService/技术框架/RPC/Netty/01.netty服务端启动流程/","text":"两个线程组12EventLoopGroup boosGroup = new NioEventLoopGroup();EventLoopGroup workerGroup = new NioEventLoopGroup(); EventLoopGroup的定义 1234567891011121314151617181920212223242526public class NioEventLoopGroup extends MultithreadEventLoopGroup&#123; /** * Sets the percentage of the desired amount of time spent for I/O in the child event loops. The default value is * &#123;@code 50&#125;, which means the event loop will try to spend the same amount of time for I/O as for non-I/O tasks. */ public void setIoRatio(int ioRatio) &#123; for (EventExecutor e: children()) &#123; ((NioEventLoop) e).setIoRatio(ioRatio); &#125; &#125; /** * Replaces the current &#123;@link Selector&#125;s of the child event loops with newly created &#123;@link Selector&#125;s to work * around the infamous epoll 100% CPU bug. */ public void rebuildSelectors() &#123; for (EventExecutor e: children()) &#123; ((NioEventLoop) e).rebuildSelector(); &#125; &#125; @Override protected EventExecutor newChild(ThreadFactory threadFactory, Object... args) throws Exception &#123; return new NioEventLoop(this, threadFactory, (SelectorProvider) args[0], ((SelectStrategyFactory) args[1]).newSelectStrategy(), (RejectedExecutionHandler) args[2]); &#125;&#125; 专门用于处理网络的事件 一个用于处理接受客户端的连接，一个用于进行 SocketChannel 的网络读取。 boos这个EventLoopGroup作为一个acceptor负责接收来自客户端的请求，然后分发给worker这个EventLoopGroup来处理所有的事件event和channel的IO。 引导程序ServerBootstrap. 启动NIO服务的辅助启动类. 12345678ServerBootstrap b = new ServerBootstrap() .group(boosGroup, workerGroup) .channel(NioServerSocketChannel.class) .option(ChannelOption.SO_BACKLOG, 1012) .childHandler(new ChildChannelHandler());ChannelFuture f = b.bind(port).sync(); // 绑定端口f.channel().closeFuture().sync();// 等待服务器端监听端口关闭 group方法绑定了两个NIO线程组 绑定处理消息的Handler. handler处理流程和管理流程-TODO","tags":[{"name":"Netty","slug":"Netty","permalink":"https://wiki.quartz.ren/tags/Netty/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"RPC","slug":"平台工具/MicroService/技术框架/RPC","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/RPC/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/Netty/"}]},{"title":"线性代数的定义","date":"2019-03-09T03:55:57.000Z","path":"wk/项目管理/软件工程/数学基础/线性代数定义/","text":"对于线性代数中的线性理解一直比较模糊。大学数学学科，线性代数是最为抽象的一门课。 从中学的初等数学和初等物理一路走来，很少人去怀疑一门数学学科是不是自然规律，当学习微积分、概率统计时也从来没有怀疑过，唯独线性代数它的各种符号和运算规则太抽象太奇怪，完全对应不到生活经验。 线性代数可以理解为一门工具，通过建立的一套模型并通过符号系统完成语法和语义的映射，方便解决线性空间的几何问题。实际上，向量、矩阵、运算规则的语法和语义都是人为的设计，这和一门语言中的各种概念性质相同，它是一种创造，但是前提是必须满足语言契约。 不像初等数学，概率论，微积分都包含着一种自然现象。从应用的角度看，线性代数是一种人为设计的领域特定语言（DSL）. 线性代数好在哪里？线性代数的核心：向量模型。 123我们在初等数学中学习的坐标系属于笛卡尔所提出的解析模型，这个模型很有用，但同时也有很大的缺点。坐标系是人为加上的虚拟参考系，但是我们要解决的问题，比如求面积，图形旋转、拉伸等应用都是和坐标系无关的，建立一个虚拟的坐标系往往无助于解决问题，刚才三角形面积的例子就是这样。向量模型很好地克服了解析模型的缺点，如果说解析模型代表了某种“绝对性”的世界观，那么向量模型就代表了某种“相对性”的世界观，我推荐把向量模型和解析模型看作对立的两种模型。 向量模型中定义了向量和标量的概念。向量具有大小和方向，满足线性组合法则；标量是只有大小没有方向的量（注：标量的另一种更深刻的定义是在旋转变换下保持不变的量）。向量模型的优点之一是其坐标系无关性，也就是相对性，它在定义向量和运算规则的时候从一开始就抛开了坐标系的束缚，不管你坐标轴怎么旋转，我都能适应，向量的线性组合、内积、叉积、线性变换等等运算全部都是坐标系无关的。注意，所谓坐标系无关性不是说就没有坐标系了，还是有的，刚才三角形例子的顶点就是用坐标表示的，只是在解决问题的时候不同的坐标系不会构成影响。用一个比喻，Java号称平台无关，不是说Java就是空中楼阁，而是说你用Java编程时底层是Linux还是Windows往往对你没有影响。 学术界严格的定义线性线性关系 L(x)具有以下两个性质：可加性： { L(x+t)=L(x)+L(t)} { L(x+t)=L(x)+L(t)}一次齐次性： { L(mx)=mL(x)} { L(mx)=mL(x)} 线性，通俗地说，就是变量只有两种运算，数乘与加减。数乘就是kx，把x放缩为原来的k倍；加减就是x±y±z，不能有x²，xy或者sin(x)这种花里胡哨的形式。因此，线性组合的定义，就是ax+by+cz+…，其中abc…为常数，xyz…为变量。 什么是线性和非线性 线性与非线性的区别什么是线性和非线性 线性与非线性的区别 在数学上，线性关系是指自变量x与因变量yo之间可以表示成y=ax+b ,（a,b为常数），即说x与y之间成线性关系。 不能表示成y=ax+b ,（a,b为常数），即非线性关系，非线性关系可以是二次，三次等函数关系，也可能是没有关系。 机器学习中线性模型和非线性的区别机器学习中线性模型和非线性的区别 线性模型与非线性模型判别 【神经网络】线性模型非线性模型，感知机与神经网络 神经网络是非线性的解释 线性模型可以是用曲线拟合样本，但是分类的决策边界一定是直线的，例如logistics模型 区分是否为线性模型：最简单判别一个模型是否为线性的，只需要判别决策边界是否是直线，也就是是否能用一条直线来划分 区分是否为线性模型，主要是看一个乘法式子中自变量x前的系数w,如果w只影响一个x，那么此模型为线性模型。或者判断决策边界是否是线性的 神经网络是非线性 浅谈机器学习中的非线性 程序观点下的线性代数","tags":[{"name":"数学","slug":"数学","permalink":"https://wiki.quartz.ren/tags/%E6%95%B0%E5%AD%A6/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"软件工程","slug":"项目管理/软件工程","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"数学基础","slug":"项目管理/软件工程/数学基础","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"}]},{"title":"线性代数的相关概念","date":"2019-03-09T03:55:57.000Z","path":"wk/项目管理/软件工程/数学基础/线性代数概念/","text":"矩阵线性变换、关系式(n个变量、m个变量)、系数、矩阵、对角矩阵、单位矩阵、 投影变换、选择变换 线性运算：矩阵加法与数乘矩阵统称为矩阵的线性运算 左乘、右乘 结合律和分配律、 对称矩阵 应该注意，方阵与行列式是两个不同的概念，n 阶方阵是 n方 个数按一定方式排成的数表，而 n 阶行列式则是这些数（也就是数表 A）按一定的运算法则所确定的一个数 delA 或者 |A| 单位矩阵 倒数 -&gt; 逆矩阵(逆阵) 对于 n 阶矩阵 A，如果有一个 n 阶矩阵 B，使 A B = B A = E 伴随矩阵：行列式︳A︳的各个元素的代数余子式Aij所构成的如下的矩阵。 1AA * =A *A =︳A︳E 错题伴随矩阵是 沿对角线 转置。 （由代数余子式构成的 转置矩阵）","tags":[{"name":"数学","slug":"数学","permalink":"https://wiki.quartz.ren/tags/%E6%95%B0%E5%AD%A6/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"软件工程","slug":"项目管理/软件工程","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"数学基础","slug":"项目管理/软件工程/数学基础","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"}]},{"title":"实体Bean与Map之间的转换","date":"2019-03-09T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Java/BeanToMap/","text":"反射方式 Introspector 方式 123456789101112131415161718192021222324public static Object convertMap(Class type, Map map) throws IntrospectionException, IllegalAccessException, InstantiationException, InvocationTargetException &#123; BeanInfo beanInfo = Introspector.getBeanInfo(type); // 获取类属性 Object obj = type.newInstance(); // 创建 JavaBean 对象 // 给 JavaBean 对象的属性赋值 PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors(); for (int i = 0; i&lt; propertyDescriptors.length; i++) &#123; PropertyDescriptor descriptor = propertyDescriptors[i]; String propertyName = descriptor.getName(); if (map.containsKey(propertyName)) &#123; // 下面一句可以 try 起来，这样当一个属性赋值失败的时候就不会影响其他属性赋值。 Object value = map.get(propertyName); Object[] args = new Object[1]; args[0] = value; descriptor.getWriteMethod().invoke(obj, args); &#125; &#125; return obj;&#125; 1234567891011121314151617181920// 反射方式/** * Java Map反射成POJO(ResourcesBean ) */private static ResourcesBean mapToObject(Map&lt;String, Object&gt; map, String ObjectBeanPath) &#123; ResourcesBean resourcesBean = new ResourcesBean(); try &#123; Class clazz = Class.forName(ObjectBeanPath); for (Map.Entry&lt;String, Object&gt; entry : map.entrySet()) &#123; Field filed = clazz.getDeclaredField(entry.getKey()); filed.setAccessible(true); filed.set(resourcesBean, entry.getValue() != null ? String .valueOf(entry.getValue()) : &quot;&quot;); &#125; &#125; catch (Exception e) &#123; log.error(e); &#125; return resourcesBean;&#125; | 530277 | 79773174 | 1 | 1 | 4 |","tags":[{"name":"Java","slug":"Java","permalink":"https://wiki.quartz.ren/tags/Java/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Java","slug":"平台工具/2-计算机基础/编程语言/Java","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"}]},{"title":"jdk下载镜像","date":"2019-03-09T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Java/Jdk镜像/","text":"下载镜像 安装下载指定版本后解压。 配置环境变量： 123export JAVA_HOME=/opt/middleware/jdk1.8.0_181export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib","tags":[{"name":"Java","slug":"Java","permalink":"https://wiki.quartz.ren/tags/Java/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Java","slug":"平台工具/2-计算机基础/编程语言/Java","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"}]},{"title":"函数式接口-FunctionalInterface","date":"2019-03-09T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Java/函数式接口-FunctionalInterface/","text":"什么是函数式接口其实之前在讲Lambda表达式的时候提到过，所谓的函数式接口，当然首先是一个接口，然后就是在这个接口里面只能有一个抽象方法。 这种类型的接口也称为SAM接口，即Single Abstract Method interfaces。 用途它们主要用在Lambda表达式和方法引用（实际上也可认为是Lambda表达式）上 12345@FunctionalInterfaceinterface GreetingService &#123; void sayMessage(String message);&#125; 那么就可以使用Lambda表达式来表示该接口的一个实现(注：JAVA 8 之前一般是用匿名类实现的)： 1GreetingService greetService1 = message -&gt; System.out.println(&quot;Hello &quot; + message); 关于@FunctionalInterface注解Java 8为函数式接口引入了一个新注解@FunctionalInterface，主要用于编译级错误检查，加上该注解，当你写的接口不符合函数式接口定义的时候，编译器会报错。 提醒：加不加@FunctionalInterface对于接口是不是函数式接口没有影响，该注解知识提醒编译器去检查该接口是否仅包含一个抽象方法 函数式接口里允许定义默认方法函数式接口里是可以包含默认方法，因为默认方法不是抽象方法，其有一个默认实现，所以是符合函数式接口的定义的； 123456789101112131415@FunctionalInterfaceinterface GreetingService&#123; void sayMessage(String message); default void doSomeMoreWork1() &#123; // Method body &#125; default void doSomeMoreWork2() &#123; // Method body &#125;&#125; JDK中的函数式接口举例java.lang.Runnable,java.awt.event.ActionListener,java.util.Comparator,java.util.concurrent.Callablejava.util.function包下的接口，如Consumer、Predicate、Supplier等 Java 8 函数式接口 - Functional Interface","tags":[{"name":"Java","slug":"Java","permalink":"https://wiki.quartz.ren/tags/Java/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Java","slug":"平台工具/2-计算机基础/编程语言/Java","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"}]},{"title":"HashMap扩容","date":"2019-03-09T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Java/HashMap/HashMap扩容/","text":"HashMap的扩容机制—-resize()","tags":[{"name":"Java","slug":"Java","permalink":"https://wiki.quartz.ren/tags/Java/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Java","slug":"平台工具/2-计算机基础/编程语言/Java","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"},{"name":"HashMap","slug":"平台工具/2-计算机基础/编程语言/Java/HashMap","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/HashMap/"}]},{"title":"线程状态说明及状态流转","date":"2019-03-09T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Java/多线程/001.线程状态/","text":"Java中线程的状态分为6种。 各个状态怎么流转来的就绪状态 调用线程的start()方法 当前线程sleep()方法结束 其他线程join()结束 等待用户输入完毕 某个线程拿到对象锁 当前线程时间片用完了，调用当前线程的yield()方法 锁池里的线程拿到对象锁后，进入就绪状态 运行中从可运行池中选择一个线程作为当前线程时线程所处的状态。 这也是线程进入运行状态的唯一一种方式 阻塞状态 线程阻塞在进入synchronized关键字修饰的方法 或synchronized代码块(获取锁)时的状态 等待 WAITING不会被分配CPU执行时间. 它们要等待被显式地唤醒. 否则会处于无限期等待的状态 超时等待不会被分配CPU执行时间 不过无须无限期等待 被其他线程显示地唤醒. 达到一定时间后会自动唤醒 终止状态 当线程的run()方法完成时。或者主线程的main()方法完成时。 线程对象也许是活的，但是已经不是单独执行的了，一旦终止，不能复生 在一个终止的线程上调用start()方法，会抛出java.lang.IllegalThreadStateException异常。 等待队列 调用obj的wait(), notify()方法前，必须获得obj锁，也就是必须写在synchronized(obj) 代码段内。 LockSupport.park()/LockSupport.parkNanos(long nanos),LockSupport.parkUntil(long deadlines) 等 Java线程的6种状态及切换","tags":[{"name":"Java","slug":"Java","permalink":"https://wiki.quartz.ren/tags/Java/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Java","slug":"平台工具/2-计算机基础/编程语言/Java","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"},{"name":"多线程","slug":"平台工具/2-计算机基础/编程语言/Java/多线程","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"02.Netty的NioEventLoop","date":"2019-03-08T17:13:34.000Z","path":"wk/平台工具/MicroService/技术框架/Netty/002.Netty中的NioEventLoop/","text":"几点简单的概述 是一个基于JDK NIO的异步事件循环类; 负责处理一个Channel的所有事件在这个Channel的生命周期期间 整个生命周期只会依赖于一个单一的线程来完成 一个NioEventLoop可以分配给多个Channel NioEventLoop通过JDK Selector来实现I/O多路复用; 以对多个Channel进行管理。 如果调用Channel操作的线程是EventLoop所关联的线程，那么该操作会被立即执行;否则会将该操作封装成任务放入EventLoop的任务队列中 所有提交到NioEventLoop的任务都会先放入队列中，然后在线程中以有序(FIFO)/连续的方式执行所有提交的任务。 NioEventLoop的事件循环主要完成了：a)已经注册到Selector的Channel的监控，并在感兴趣的事件可执行时对其进行处理；b)完成任务队列(taskQueue)中的任务，以及对可执行的定时任务和周期性任务的处理(scheduledTaskQueue中的可执行的任务都会先放入taskQueue中后，再从taskQueue中依次取出执行)。","tags":[{"name":"Netty","slug":"Netty","permalink":"https://wiki.quartz.ren/tags/Netty/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/Netty/"}]},{"title":"02.Netty的NioEventLoop","date":"2019-03-08T17:13:34.000Z","path":"wk/平台工具/MicroService/技术框架/Netty/02.Netty的NioEventLoop/","text":"NioEventLoop1234567891011121314151617181920212223public final class NioEventLoop extends SingleThreadEventLoop &#123; private Selector selector; private Selector unwrappedSelector; private SelectedSelectionKeySet selectedKeys; private final SelectorProvider provider; /** * Boolean that controls determines if a blocked Selector.select should * break out of its selection process. In our case we use a timeout for * the select method and the select method will block for that time unless * waken up. */ private final AtomicBoolean wakenUp = new AtomicBoolean(); private final SelectStrategy selectStrategy; private volatile int ioRatio = 50; private int cancelledKeys; private boolean needsToSelectAgain; ...&#125; NioEventLoop 是Netty的核心类。 NioEventLoop 的首要职责就是为注册在它上的 channels 服务，发现这些 channels 上发生的新连接事件、读写等 I/O 事件，然后将事件转交 channel 流水线处理。 NioEventLoop 的职责 核心逻辑NioEventLoop最核心的地方在于事件循环，具体代码在NioEventLoop.java在run方法中，如下逻辑： 首先根据默认的选择策略DefaultSelectStrategy判断本次循环是否select，具体逻辑为：如果当前有任务则使用selectNow立刻查询是否有准备就绪的I/O；如果当前没有任务则返回SelectStrategy.SELECT，并将wakenUp设置为false，并调用select()进行查询。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960switch (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) &#123; // &#x27;if (wakenUp.get()) &#123; ... &#125;&#x27;. (OK) case SelectStrategy.CONTINUE: continue; case SelectStrategy.SELECT: select(wakenUp.getAndSet(false)); // &#x27;wakenUp.compareAndSet(false, true)&#x27; is always evaluated // before calling &#x27;selector.wakeup()&#x27; to reduce the wake-up // overhead. (Selector.wakeup() is an expensive operation.) // // However, there is a race condition in this approach. // The race condition is triggered when &#x27;wakenUp&#x27; is set to // true too early. // // &#x27;wakenUp&#x27; is set to true too early if: // 1) Selector is waken up between &#x27;wakenUp.set(false)&#x27; and // &#x27;selector.select(...)&#x27;. (BAD) // 2) Selector is waken up between &#x27;selector.select(...)&#x27; and // In the first case, &#x27;wakenUp&#x27; is set to true and the // following &#x27;selector.select(...)&#x27; will wake up immediately. // Until &#x27;wakenUp&#x27; is set to false again in the next round, // &#x27;wakenUp.compareAndSet(false, true)&#x27; will fail, and therefore // any attempt to wake up the Selector will fail, too, causing // the following &#x27;selector.select(...)&#x27; call to block // unnecessarily. // // To fix this problem, we wake up the selector again if wakenUp // is true immediately after selector.select(...). // It is inefficient in that it wakes up the selector for both // the first case (BAD - wake-up required) and the second case // (OK - no wake-up required). if (wakenUp.get()) &#123; selector.wakeup(); &#125; // fall through default:&#125;cancelledKeys = 0;needsToSelectAgain = false;final int ioRatio = this.ioRatio;if (ioRatio == 100) &#123; try &#123; processSelectedKeys(); &#125; finally &#123; // Ensure we always run tasks. runAllTasks(); &#125;&#125; else &#123; final long ioStartTime = System.nanoTime(); try &#123; processSelectedKeys(); &#125; finally &#123; // Ensure we always run tasks. final long ioTime = System.nanoTime() - ioStartTime; runAllTasks(ioTime * (100 - ioRatio) / ioRatio); &#125;&#125; SelectStrategySelectStrategy selectStrategy12345678final class DefaultSelectStrategy implements SelectStrategy &#123; static final SelectStrategy INSTANCE = new DefaultSelectStrategy(); private DefaultSelectStrategy() &#123; &#125; @Override public int calculateStrategy(IntSupplier selectSupplier, boolean hasTasks) throws Exception &#123; return hasTasks ? selectSupplier.get() : SelectStrategy.SELECT; &#125;&#125; Netty源码笔记 Reactor线程模型详解(二)NioEventLoop的执行 Netty源码分析之NioEventLoop","tags":[{"name":"Netty","slug":"Netty","permalink":"https://wiki.quartz.ren/tags/Netty/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/Netty/"}]},{"title":"03.Netty之Channel","date":"2019-03-08T17:13:34.000Z","path":"wk/平台工具/MicroService/技术框架/Netty/03.Netty之Channel/","text":"Netty之Channel*","tags":[{"name":"Netty","slug":"Netty","permalink":"https://wiki.quartz.ren/tags/Netty/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/Netty/"}]},{"title":"02.Netty的NioEventLoop","date":"2019-03-08T17:13:34.000Z","path":"wk/平台工具/MicroService/技术框架/Netty/总结/001.网络-Netty、Tomcat、安全/","text":"1. 几种网络IO介绍下(BIO、NIO、AIO)网络中，客户端与请求的集中关系： 客户端阻塞，请求同步(时刻检测服务端是否给出响应), 发请求后，一直等待响应 客户端非阻塞，请求同步： client发送请求后。轮询服务端是否给出响应 客户端阻塞，请求异步（服务端完成之后，通知客户端），client发请求后，一直等待服务端返回响应 客户端非阻塞，请求异步： client发送请求后，去执行别的任务，服务端给出响应后，通知客户端. NIO 是同步非阻塞IO. 使用NIO读取数据时， 线程不会阻塞，需要线程主动去查询是否有IO事件。（selector） AIO NIO2.0，异步非阻塞IO，使用AIO读取数据时，线程不会阻塞，并当有数据可读时会通知给线程，不需要主动查询 适用于连接较多、操作时间长. 例如相册服务. 2. NIO的核心组件 channel、buffer、selector 每个channel对应一个buffer缓冲区，buffer的内容通过channel进行传递 channel注册到selector,selector根据channel上发送的读写事件，将请求交给空闲线程. buffer和channel都是可读可写的. 3. select、epoll、poll的区别 select模型，维护一个通道（FD）的集合(FD_set), 扫描这些所有的fd, 将fd复制到内核空间，由内核空间激活，再通过socket连接完成io 12使用 数组 来存储Socket，容量固定，通过轮询来判断是否发送IO事件，开销比较大、需要数据零拷贝，容量受限制 poll模型，使用链表存储FD(socket), 1机制和select差不多，将FD_set结构进行优化，但是也需要拷贝fd epoll模型，EventPoll, 时间通知模型（事件驱动）， 不再扫描所有fd, 将用户关心的事件存放再一个内核的事件表中，当socket发送IO事件后，应用程序才进行IO操作，不主动轮询 12epoll事件回调，红黑树，无上限，IO效率高.???? 红黑树的作用&gt;&gt; 4. 零拷贝避免让cpi执行大量数据拷贝任务，应用程序再需要把内核中的一块区域数据转移到另外一块内核区域时，不需要先复制到用户空间。 5. Netty和TomcatNetty,基于NIO的异步网络通信框架、性能高、封装了原生NIO. 12封装的是IO模型，关注网络数据的传输，不关心具体的协议异步、高性能、高扩展、高可定制化、易用性 Tomcat，一个web服务器，Servlet容器，内部只会运行Servlet程序，处理HTTP请求. 6.Netty高性能体现在哪些方面 NIO模型，用最少资源做更多事情 内存零拷贝，减少不必要的内存拷贝 内存池设计，申请的内存可以复用，主要指直接内存 串行化处理读写，避免使用锁带来的性能开销，消息的处理尽可能再同一个线程内完成。 不做线程却换，避免多线程竞争和同步锁. 12表面上看串行化设计的CPU利用率不高，并发程度不高，但是通过调整NIO线程池的线程参数，可以同时启动多个串行化的线程并行运行重点： 这种局部无锁化的串行线程设计比一个队列，多个工作线程模型性能更有 高性能序列化协议，支持protobuf等高性能序列化协议 高效并发编程，大量使用volatile; CAS和原子类 的广泛应用；线程安全容器；通过读写锁提升并发性能. 7.Netty线程模型 支持Reactor单线程模型，Reactor多线程模型、主从多线程模型. 可通过参数切换 8.Tomcat为什么要使用自定义类加载器. 部署多个应用. 9. Tomcat优化 两方面：内存和线程. 10.跨域请求.11. CSRF攻击12. OAuth2.013. JWT令牌14.SSO15. 认证和授权16. RBAC分类17. 如何设计一个开放授权平台18. 嵌入式服务器网络","tags":[{"name":"网络","slug":"网络","permalink":"https://wiki.quartz.ren/tags/%E7%BD%91%E7%BB%9C/"},{"name":"Netty","slug":"Netty","permalink":"https://wiki.quartz.ren/tags/Netty/"},{"name":"Tomcat","slug":"Tomcat","permalink":"https://wiki.quartz.ren/tags/Tomcat/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/Netty/"},{"name":"总结","slug":"平台工具/MicroService/技术框架/Netty/总结","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/Netty/%E6%80%BB%E7%BB%93/"}]},{"title":"03.Netty之Channel","date":"2019-03-08T17:13:34.000Z","path":"wk/平台工具/MicroService/技术框架/RPC/Netty/03.Netty之Channel/","text":"Netty之Channel*","tags":[{"name":"Netty","slug":"Netty","permalink":"https://wiki.quartz.ren/tags/Netty/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"RPC","slug":"平台工具/MicroService/技术框架/RPC","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/RPC/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/Netty/"}]},{"title":"02.Netty的NioEventLoop","date":"2019-03-08T17:13:34.000Z","path":"wk/平台工具/MicroService/技术框架/RPC/Netty/02.Netty的NioEventLoop/","text":"NioEventLoop1234567891011121314151617181920212223public final class NioEventLoop extends SingleThreadEventLoop &#123; private Selector selector; private Selector unwrappedSelector; private SelectedSelectionKeySet selectedKeys; private final SelectorProvider provider; /** * Boolean that controls determines if a blocked Selector.select should * break out of its selection process. In our case we use a timeout for * the select method and the select method will block for that time unless * waken up. */ private final AtomicBoolean wakenUp = new AtomicBoolean(); private final SelectStrategy selectStrategy; private volatile int ioRatio = 50; private int cancelledKeys; private boolean needsToSelectAgain; ...&#125; NioEventLoop 是Netty的核心类。 NioEventLoop 的首要职责就是为注册在它上的 channels 服务，发现这些 channels 上发生的新连接事件、读写等 I/O 事件，然后将事件转交 channel 流水线处理。 NioEventLoop 的职责 核心逻辑NioEventLoop最核心的地方在于事件循环，具体代码在NioEventLoop.java在run方法中，如下逻辑： 首先根据默认的选择策略DefaultSelectStrategy判断本次循环是否select，具体逻辑为：如果当前有任务则使用selectNow立刻查询是否有准备就绪的I/O；如果当前没有任务则返回SelectStrategy.SELECT，并将wakenUp设置为false，并调用select()进行查询。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960switch (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) &#123; // &#x27;if (wakenUp.get()) &#123; ... &#125;&#x27;. (OK) case SelectStrategy.CONTINUE: continue; case SelectStrategy.SELECT: select(wakenUp.getAndSet(false)); // &#x27;wakenUp.compareAndSet(false, true)&#x27; is always evaluated // before calling &#x27;selector.wakeup()&#x27; to reduce the wake-up // overhead. (Selector.wakeup() is an expensive operation.) // // However, there is a race condition in this approach. // The race condition is triggered when &#x27;wakenUp&#x27; is set to // true too early. // // &#x27;wakenUp&#x27; is set to true too early if: // 1) Selector is waken up between &#x27;wakenUp.set(false)&#x27; and // &#x27;selector.select(...)&#x27;. (BAD) // 2) Selector is waken up between &#x27;selector.select(...)&#x27; and // In the first case, &#x27;wakenUp&#x27; is set to true and the // following &#x27;selector.select(...)&#x27; will wake up immediately. // Until &#x27;wakenUp&#x27; is set to false again in the next round, // &#x27;wakenUp.compareAndSet(false, true)&#x27; will fail, and therefore // any attempt to wake up the Selector will fail, too, causing // the following &#x27;selector.select(...)&#x27; call to block // unnecessarily. // // To fix this problem, we wake up the selector again if wakenUp // is true immediately after selector.select(...). // It is inefficient in that it wakes up the selector for both // the first case (BAD - wake-up required) and the second case // (OK - no wake-up required). if (wakenUp.get()) &#123; selector.wakeup(); &#125; // fall through default:&#125;cancelledKeys = 0;needsToSelectAgain = false;final int ioRatio = this.ioRatio;if (ioRatio == 100) &#123; try &#123; processSelectedKeys(); &#125; finally &#123; // Ensure we always run tasks. runAllTasks(); &#125;&#125; else &#123; final long ioStartTime = System.nanoTime(); try &#123; processSelectedKeys(); &#125; finally &#123; // Ensure we always run tasks. final long ioTime = System.nanoTime() - ioStartTime; runAllTasks(ioTime * (100 - ioRatio) / ioRatio); &#125;&#125; SelectStrategySelectStrategy selectStrategy12345678final class DefaultSelectStrategy implements SelectStrategy &#123; static final SelectStrategy INSTANCE = new DefaultSelectStrategy(); private DefaultSelectStrategy() &#123; &#125; @Override public int calculateStrategy(IntSupplier selectSupplier, boolean hasTasks) throws Exception &#123; return hasTasks ? selectSupplier.get() : SelectStrategy.SELECT; &#125;&#125; Netty源码笔记 Reactor线程模型详解(二)NioEventLoop的执行 Netty源码分析之NioEventLoop","tags":[{"name":"Netty","slug":"Netty","permalink":"https://wiki.quartz.ren/tags/Netty/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"RPC","slug":"平台工具/MicroService/技术框架/RPC","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/RPC/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/Netty/"}]},{"title":"NLP_ability","date":"2019-03-06T14:55:57.000Z","path":"wk/算法/001.机器学习/NLP/001.Readme/","text":"NLP_abilityNLP_ability","tags":[{"name":"NLP","slug":"NLP","permalink":"https://wiki.quartz.ren/tags/NLP/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"NLP","slug":"算法/001-机器学习/NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NLP/"}]},{"title":"FastText","date":"2019-03-06T14:55:57.000Z","path":"wk/算法/001.机器学习/NLP/FastText/","text":"ngramfastText可以在词向量的训练和句子分类上取得非常好的表现，尤其表现在对罕见词进行字符粒度上的处理。 每个单词除了单词本身外还被表示为多个字符级别的n-grams(有时候也称为N元模子) 例如对于单词 matter. 当n=3时， fasttext对该词对字符ngram就表示为 1&lt;ma, mat, att, tte, ter, er&gt; 其中&lt; 和 &gt; 是作为边界符号被添加，来将一个单词的ngrams与单词本身区分开来。 再举一个例子，如果单词mat属于我们的词汇表，则会被表示为 . 这么做刚好让一些短词以其他词的ngram出现，有助于更好的学习到这些短词的含义。 从本质上讲，这可以帮助你捕捉后缀/前缀的含义。 minn,maxn可以通过-minn和-maxn这两个参数来控制ngrams的长度，这两个标志分别决定了ngrams的最小和最大字符数，也即控制了ngrams的范围。 这个模型被认为是一个词袋模型，因为除了用于选择n-gram的滑动窗口外,它并没有考虑对单词的内部结构进行特征选择。 它只要求字符落在窗口以内，但并不关心ngrams的顺序。 你可以将这两个值都设为0来完全关闭n-gram. 也就是不产生n-gram符号，单纯用单词作为输入. 当您的模型中的“单词”不是特定语音的单词时或者说字符级别的n-gram没有意义的时候，这会变得很有用。最常见的例子是当您将id作为您的单词输入。 在模型更新期间，fastText会学习到每个ngram以及整个单词符号的权重。 读取数据虽然fastText的训练是多线程的，但是读取数据却是通过单线程来完成。而文本解析和分词则在读取输入数据时就被完成了。让我们来看看具体是怎么做到的: FastText通过-input参数获取一个文件句柄用于输入数据。FastText不支持从stdin读取数据，它初始化两个向量word2int_和words_来跟踪输入信息。 word2int_是一个字符串到数值的映射集，索引键是单词字符串，根据字符串哈希值可以得到一个数值作为它的值，同时这个数值恰好就对应到了words_数组(std:::vector)的索引。 words_数组在读取输入时根据单词出现的顺序递增创建索引，每个索引对应的值是一个结构体entry，这个entry封装了单词的所有信息。条目包含以下信息: 123456struct entry &#123; std::string word; int64_t count; entry_type type; std::vector&lt;int32_t&gt; subwords;&#125;; https://baijiahao.baidu.com/s?id=1606667200878009384&amp;wfr=spider&amp;for=pc","tags":[{"name":"NLP","slug":"NLP","permalink":"https://wiki.quartz.ren/tags/NLP/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"NLP","slug":"算法/001-机器学习/NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NLP/"}]},{"title":"简单线性回归实现","date":"2019-03-03T15:55:57.000Z","path":"wk/算法/001.机器学习/机器学习100天/002.简单线性回归实现/","text":"第一步：数据预处理12345678910import pandas as pdimport numpy as npimport matplotlib.pyplot as pltdataset = pd.read_csv(&#x27;studentscores.csv&#x27;)X = dataset.iloc[ : , : 1 ].valuesY = dataset.iloc[ : , 1 ].valuesfrom sklearn.model_selection import train_test_splitX_train, X_test, Y_train, Y_test = train_test_split( X, Y, test_size = 1/4, random_state = 0) 第二步：训练集使用简单线性回归模型来训练123from sklearn.linear_model import LinearRegressionregressor = LinearRegression()regressor = regressor.fit(X_train, Y_train) 第三步：预测结果1Y_pred = regressor.predict(X_test) 第四步：可视化123456789101112131415161718192021222324252627import pandas as pdimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.model_selection import KFoldfrom sklearn.model_selection import train_test_splitdataset = pd.read_csv(&#x27;~/Documents/100-Days-Of-ML-Code/datasets/studentscores.csv&#x27;)X = dataset.iloc[ : , : 1 ].valuesY = dataset.iloc[ : , 1 ].valuesX_train, X_test, Y_train, Y_test = train_test_split( X, Y, test_size = 1/4, random_state = 0) from sklearn.linear_model import LinearRegressionregressor = LinearRegression()regressor = regressor.fit(X_train, Y_train)Y_pred = regressor.predict(X_test)plt.scatter(X_train , Y_train, color = &#x27;red&#x27;)plt.plot(X_train , regressor.predict(X_train), color =&#x27;blue&#x27;)plt.show()plt.scatter(X_test , Y_test, color = &#x27;red&#x27;)plt.plot(X_test , regressor.predict(X_test), color =&#x27;blue&#x27;)plt.show()","tags":[{"name":"TML","slug":"TML","permalink":"https://wiki.quartz.ren/tags/TML/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"机器学习100天","slug":"算法/001-机器学习/机器学习100天","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0100%E5%A4%A9/"}]},{"title":"数据预处理","date":"2019-02-28T15:55:57.000Z","path":"wk/算法/001.机器学习/机器学习100天/001.数据预处理/","text":"导入需要的包numpy, pandas 导入数据集数据集通常为.csv格式. 使用Pandas的read_csv方法读取本地csv文件为一个数据帧。 然后，从数据帧中制作自变量和因变量的矩阵和向量。 处理丢失数据集大多数据集是不完整的，为了不降低机器学习模型的性能，需要处理数据。 可以使用整列的平均值或中间值替换丢失的数据。我们使用sklean.preprocssing库中的Imputer类完成这项任务。 解析分类数据分类数据指的是含有标签值而不是数字值的变量。取值范围通常是固定的。例如”Yes”和“No”.不能用于模型的数学计算，所以需要解析成数字。 为了实现这一功能，我们从sklearn.preprocesing库中导入LabelEncoder类。 拆分数据集为测试集合和训练集合一般比例为80:20 导入sklearn.crossvalidation库中的train_test_split()方法。 特征缩放大部分模型算法使用两点间的欧式距离表示，但此特征在幅度、单位和范围姿态问题上变化很大。 在距离计算中，高幅度的特征比低幅度特征权重更大。可用特征标准化或Z值归一化解决。 导入sklearn.preprocessing库中的StandardScalar类。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#Day 1: Data Prepocessing#Step 1: Importing the librariesimport numpy as npimport pandas as pd#Step 2: Importing datasetdataset = pd.read_csv(&#x27;../datasets/Data.csv&#x27;)X = dataset.iloc[ : , :-1].valuesY = dataset.iloc[ : , 3].valuesprint(&quot;Step 2: Importing dataset&quot;)print(&quot;X&quot;)print(X)print(&quot;Y&quot;)print(Y)#Step 3: Handling the missing datafrom sklearn.preprocessing import Imputerimputer = Imputer(missing_values = &quot;NaN&quot;, strategy = &quot;mean&quot;, axis = 0)imputer = imputer.fit(X[ : , 1:3])X[ : , 1:3] = imputer.transform(X[ : , 1:3])print(&quot;---------------------&quot;)print(&quot;Step 3: Handling the missing data&quot;)print(&quot;step2&quot;)print(&quot;X&quot;)print(X)#Step 4: Encoding categorical datafrom sklearn.preprocessing import LabelEncoder, OneHotEncoderlabelencoder_X = LabelEncoder()X[ : , 0] = labelencoder_X.fit_transform(X[ : , 0])#Creating a dummy variableonehotencoder = OneHotEncoder(categorical_features = [0])X = onehotencoder.fit_transform(X).toarray()labelencoder_Y = LabelEncoder()Y = labelencoder_Y.fit_transform(Y)print(&quot;---------------------&quot;)print(&quot;Step 4: Encoding categorical data&quot;)print(&quot;X&quot;)print(X)print(&quot;Y&quot;)print(Y)#Step 5: Splitting the datasets into training sets and Test setsfrom sklearn.model_selection import train_test_splitX_train, X_test, Y_train, Y_test = train_test_split( X , Y , test_size = 0.2, random_state = 0)print(&quot;---------------------&quot;)print(&quot;Step 5: Splitting the datasets into training sets and Test sets&quot;)print(&quot;X_train&quot;)print(X_train)print(&quot;X_test&quot;)print(X_test)print(&quot;Y_train&quot;)print(Y_train)print(&quot;Y_test&quot;)print(Y_test)#Step 6: Feature Scalingfrom sklearn.preprocessing import StandardScalersc_X = StandardScaler()X_train = sc_X.fit_transform(X_train)X_test = sc_X.transform(X_test)print(&quot;---------------------&quot;)print(&quot;Step 6: Feature Scaling&quot;)print(&quot;X_train&quot;)print(X_train)print(&quot;X_test&quot;)print(X_test)","tags":[{"name":"特征","slug":"特征","permalink":"https://wiki.quartz.ren/tags/%E7%89%B9%E5%BE%81/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"机器学习100天","slug":"算法/001-机器学习/机器学习100天","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0100%E5%A4%A9/"}]},{"title":"nebula容器化","date":"2019-02-28T15:55:57.000Z","path":"wk/算法/004.NLP/003.知识图谱/存储/nebula/001.nebula容器化/","text":"des 部署方式有多种方式可以部署 Nebula Graph. Docker Compose. Docker Compose 是最快的方式. Docker Compose 方式安装.使用 Docker Compose 部署 Nebula Graph 123git clone -b v3.0.0 https://github.com/vesoft-inc/nebula-docker-compose.gitcd nebula-docker-compose/docker-compose up -d docker-compose.yaml 的解读见下一篇文章. 安装后 使用 nebula client 链接nebula-console 12# 进入容器docker run --rm -ti --network nebula-docker-compose_nebula-net --entrypoint=/bin/sh vesoft/nebula-console 1nebula-console -u root -p 123 --address=172.18.0.10 --port=9669 1. 相关命令2. nGQL3. 图构建4. 图建模 以性能为目标进行建模 没有完美的建模方法， 如何建模取决于想从数据中挖掘的内容。分析数据并根据业务模型创建方便直观的数据模型，测试模型并优化，逐渐适应业务。为了更好的性能， 可以多次更改或重新设计模型. 合理设置边属性.","tags":[{"name":"Graph","slug":"Graph","permalink":"https://wiki.quartz.ren/tags/Graph/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"004.NLP","slug":"算法/004-NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/"},{"name":"003.知识图谱","slug":"算法/004-NLP/003-知识图谱","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/003-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"},{"name":"存储","slug":"算法/004-NLP/003-知识图谱/存储","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/003-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E5%AD%98%E5%82%A8/"},{"name":"nebula","slug":"算法/004-NLP/003-知识图谱/存储/nebula","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/003-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E5%AD%98%E5%82%A8/nebula/"}]},{"title":"nebula应用","date":"2019-02-28T15:55:57.000Z","path":"wk/算法/004.NLP/003.知识图谱/存储/nebula/002.nebula应用例子/","text":"总结nebula应用场景及流程.","tags":[{"name":"Graph","slug":"Graph","permalink":"https://wiki.quartz.ren/tags/Graph/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"004.NLP","slug":"算法/004-NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/"},{"name":"003.知识图谱","slug":"算法/004-NLP/003-知识图谱","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/003-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"},{"name":"存储","slug":"算法/004-NLP/003-知识图谱/存储","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/003-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E5%AD%98%E5%82%A8/"},{"name":"nebula","slug":"算法/004-NLP/003-知识图谱/存储/nebula","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/004-NLP/003-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/%E5%AD%98%E5%82%A8/nebula/"}]},{"title":"规则引擎入门","date":"2019-02-24T01:56:24.000Z","path":"wk/平台工具/中间件_组件/Drools/001.规则引擎入门/","text":"Drools Documentation Drools概述业务决策自动化 任何一家组织或企业都面临着作出决定或决策性的问题，这些问题通常比较复杂，一般都需要算法分析大量决策相关的数据，例如当前一些热门的话题，如物联网、人工智能、认知计算都基于算法分析海量数据，产生有用信息的过程。Drools 作为一个开源的推理引擎，有 20 年历史，基于规则匹配算法非常适用与与这一场景。 用于业务规则管理，业务资源优化和复杂事件处理（CEP）。 构建一个全面的业务自动化平台 语法见Documennt 复杂规则编写: 条件元素，比较运算符,两种dialect的比较 CEP复杂时间处理. 复杂时间是多事件的事件处理概念，目标是在事件集合（事件流，事件云）中识别用户定义的有意义事件，CEP采用诸如检测许多事件的复杂模式，事件关联和抽象以及事件层的流程。 丢失包裹检测 规则设计要求： 设计规则检测如果一个包裹在通过 CHECK_IN 位置 10 分钟以后是否通过 SORTING 位置，如果否则说明规则丢失。 包裹数统计 编写规则统计最近一小时内经过 SORTING 位置的包裹总数。 包裹重量统计 编写规则统计统计过去通过 CHECK_IN 的 5 个包裹的平均重量。 统计包裹从 CHECK_IN 到 SORTING 的平均时间 包裹扫描系统需要统计过去 5 个连续的包裹从 CHECK_IN 到 SORTING 的平均处理时间。 Entry Point 插入事件 编辑规则可以获取不同位置的包裹。 规则整合通过不同的方式来管理获取规则 优化问题LABS本部分通过实验来验证 Drools 相关的理论及概念。 drools-examples doc drools-examples github 业务规则的定义抽象.规则有哪些元素组成. 规则的执行流程多个规则的智行顺序和规则管理","tags":[{"name":"规则引擎","slug":"规则引擎","permalink":"https://wiki.quartz.ren/tags/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Drools","slug":"平台工具/中间件-组件/Drools","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Drools/"}]},{"title":"Redis的安装及集群配置","date":"2019-02-24T01:56:24.000Z","path":"wk/平台工具/中间件_组件/组件安装配置/ActiveMQ/","text":"ActiveMQ官方下载地址 安装启动 第一步：把ActiveMQ 的压缩包上传到Linux系统 第二步：解压缩 第三步：启动12345678910使用bin目录下的activemq命令启动：[root@localhost bin]# ./activemq start关闭：[root@localhost bin]# ./activemq stop查看状态：[root@localhost bin]# ./activemq status进入管理后台：http://IP:8161/admin用户名：admin密码：admin 登录用户名密码可在 conf/jetty-realm.properties 文件中修改","tags":[{"name":"组件安装配置","slug":"组件安装配置","permalink":"https://wiki.quartz.ren/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"组件安装配置","slug":"平台工具/中间件-组件/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}]},{"title":"Elasticsearch","date":"2019-02-24T01:56:24.000Z","path":"wk/平台工具/中间件_组件/组件安装配置/ElasticSearch/","text":"ElasticsearchElasticsearch是一个基于Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域，Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。但是，Lucene只是一个库。想要使用它，你必须使用Java来作为开发语言并将其直接集成到你的应用中，更糟糕的是，Lucene非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。 Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。不过，Elasticsearch不仅仅是Lucene和全文搜索，我们还能这样去描述它： 分布式的实时文件存储，每个字段都被索引并可被搜索 分布式的实时分析搜索引擎 可以扩展到上百台服务器，处理PB级结构化或非结构化数据 官方网址 官方Github 官方中文权威指南 官方Java API文档 推荐学习资源 Elasticsearch Java API 手册 Elasticsearch权威指南 安装环境 CentOS7 依赖 Java 8+ 安装Elasticsearch 官方下载地址 解压安装包 # tar zxvf elasticsearch-5.6.2.tar.gz 运行elasticsearch脚本启动 # cd /elasticsearch-5.6.2/bin # ./elasticsearch 后台启动：# ./elasticsearch -d 踩坑解决错误 内存不足 Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000085330000, 2060255232, 0) failed; error=&#39;Cannot allocate memory&#39; (errno=12) 因个人服务器只有1g内存，需配置 elasticsearch/config/jvm.options，只有根据服务器改小分配堆空间的最大值了(或者启用Swap交换分区)： 123456789################################################################# Xms represents the initial size of total heap space# Xmx represents the maximum size of total heap space-Xms128m-Xmx128m################################################################ root账号错误 [WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler] [] uncaught exception in thread [main] org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:125) ~[elasticsearch-5.2.0.jar:5.2.0] at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:112) ~[elasticsearch-5.2.0.jar:5.2.0] at ... 6 more 由于ElasticSearch可以接收用户输入的脚本并且执行，为了系统安全考虑，建议创建一个单独的用户用来运行ElasticSearch 创建elsearch用户组及elsearch用户 groupadd es useradd es -g es -p es 更改Elasticsearch文件夹及内部文件的所属用户及组为es:es chown -R es:es /usr/local/elasticsearch 切换到elsearch用户再启动 su es cd elasticsearch/bin ./elasticsearch 最大虚拟内存过小错误 ERROR: bootstrap checks failed max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144] 切换至root用户：su root 修改虚拟内存配置至提示的最低值：sysctl -w vm.max_map_count=262144 日志权限错误 进入 elasticsearch/logs 文件夹下修改文件权限：chmod 744 * 外网无法访问 http://你的服务器IP:9200/ 修改 elasticsearch/config/elasticsearch.yml 配置文件：network.host: 0.0.0.0 123456789101112# ---------------------------------- Network -----------------------------------## Set the bind address to a specific IP (IPv4 or IPv6):#network.host: 0.0.0.0# Set a custom port for HTTP:#http.port: 9200## For more information, consult the network module documentation.## --------------------------------- Discovery ---------------------------------- 测试是否启动成功访问 http://127.0.0.1:9200 插件Elasticsearch-head安装Head-GitHub官网 依赖：Git Node.js 官网安装教程 1234git clone git://github.com/mobz/elasticsearch-head.gitcd elasticsearch-headnpm installnpm run start 打开浏览器输入：IP:9100 正常的话可以看到已经连接了ES，但是看不到连接信息，这时候需要在在 es 的 elasticsearch.yml 里添加如下配置： http.cors.enabled: true http.cors.allow-origin: &quot;*&quot; 插件Elasticsearch-Analysis-IK安装IK Analysis-GitHub官网 预编译安装包下载(注意需下载对应Elasticsearch版本的IK插件) 官网安装教程 解压预编译包 elasticsearch-analysis-ik-&#123;version&#125;.zip 后拷贝至elasticsearch安装目录plugins文件夹下，重命名解压后的文件夹名为ik： your-es-root/plugins/ik 重启Elasticsearch即可（关闭ES：杀进程：ps -aux|grep elasticsearch、kill -9 进程ID号","tags":[{"name":"组件安装配置","slug":"组件安装配置","permalink":"https://wiki.quartz.ren/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"组件安装配置","slug":"平台工具/中间件-组件/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}]},{"title":"JRebel 安装使用","date":"2019-02-24T01:56:24.000Z","path":"wk/平台工具/中间件_组件/组件安装配置/JRebel/","text":"IntelliJ IDEA - JRebel 安装使用JRebel能做什么 以前Tomcat中解决方案： 修改server.xml的配置：&lt;Context path=&quot;/helloapp&quot; docBase=&quot;helloapp&quot; reloadable=&quot;true&quot;/&gt; 但改 java代码后果是tomcat会重启整个项目。 JRebel是一款热部署插件。当你的Java-Web项目在Tomcat中run/debug的时候，修改某一个java文件时，JRebel就可以解决在项目运行状态run/debug状态下任意修改java文件并动态反馈实时更新到运行的项目中。 JRebel插件获取与安装 插件安装 IDEA中 File-Settings-Plugin 中搜索JRebel下载安装后重启IDEA 激活 网友分享激活链接 JRebel使用 普通Spring Web应用添加Tomcat等服务器容器配置时，VM option 下方都勾选Update classes and resources，Spring Boot项目忽略此步骤，但IDEA编译器需设置自动编译 左下角勾选要使用热部署的项目模块，在IDEA上方菜单栏中找到JRebel按钮选择以JRebel启动项目 添加热部署的模块可在 resource 中看到 rebel.xml 配置文件，打开可看到其监听的文件夹，当然可根据自己需求修改","tags":[{"name":"组件安装配置","slug":"组件安装配置","permalink":"https://wiki.quartz.ren/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"组件安装配置","slug":"平台工具/中间件-组件/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}]},{"title":"Linux常用命令","date":"2019-02-24T01:56:24.000Z","path":"wk/平台工具/中间件_组件/组件安装配置/Linux常用命令/","text":"Linux常用命令 查看内存使用情况：free -h -h：显示可用mb单位 修改文件权限：chmod 777 * 切换用户： su root 解压 tar包：tar -xvf file.tar 解压tar.gz：tar -xzvf file.tar.gz 解压tar.xz：tar xvJf file.tar.xz 解压rar：unrar e file.rar 解压zip：unzip file.zip 下载网络文件 wget http://file.zip 改变文件所有者 chown [选项] [所有者]:[组] file -R 处理指定目录以及其子目录下的所有文件 查看进程 ps -ef | grep java 或 ps -aux | grep java -aux 显示所有状态 查看端口 netstat -nap|grep 端口号 终止进程 kill -9 [PID] Tomcat查看日志 cd logs tail -f catalina.out yum -y install 包名（支持*） ：自动选择y，全自动 yum install 包名（支持*） ：手动选择y or n yum remove 包名（不支持*） rpm -ivh 包名（支持*）：安装rpm包 rpm -e 包名（不支持*）：卸载rpm包JAVA开发环境常用软件安装及配置 更新yum：yum update JDK1.8安装 查看可安装JDK版本： yum list java* 安装指定1.8版本： yum -y install java-1.8.0-openjdk* 查看是否安装成功：java -version MariaDB(MySQL)数据库安装 注：默认CentOS7已没有MySQL源, MySQL隶属的sun公司被甲骨文收购，担心闭源的社区人员维护的一个新的分支 安装：yum install mariadb-server 配置初始化 启动服务 service mariadb start 初始化命令 mysql_secure_installation12345678910111213Set root password? [Y/n] &lt;– 是否设置root用户密码，建议yNew password: &lt;– 设置root用户的密码Re-enter new password: &lt;– 确认你设置的密码其他配置Remove anonymous users? [Y/n] &lt;– 是否删除匿名用户，建议yDisallow root login remotely? [Y/n] &lt;–是否禁止root远程登录，建议yRemove test database and access to it? [Y/n] &lt;– 是否删除test数据库，建议yReload privilege tables now? [Y/n] &lt;– 是否重新加载权限表，建议y 新增远程管理用户 登录数据库：mysql -u root -p 输入密码，回车 使用mysql数据库：use mysql 新增用户，name用户名，pwd密码，%代表任何客户端机器上能以该用户登录到MySQL服务器：CREATE USER &#39;name&#39;@&#39;%&#39; IDENTIFIED BY &#39;pwd&#39;; 授权123456//grant 普通 DBA 管理某个 MySQL 数据库的权限grant all privileges on 你的某个db名 to 用户名;//grant 高级 DBA 管理 MySQL 中所有数据库的权限 建议grant all on *.* to 用户名;//刷新权限flush privileges;­ 输入exit或Ctrl+c退出，重启MySQL：service mariadb restart 设置开机启动：systemctl enable mariadb Maven安装(可不用安装) 官网 找到较新版本下载地址：wget http://mirror.bit.edu.cn/apache/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz 解压：tar -zvxf apache-maven-3.5.2-bin.tar.gz 打开/etc/profile，配置环境变量，在末尾加入：12345MAVEN_HOME=/usr/local/maapache-maven-3.5.2PATH=$PATH:$MAVEN_HOME/binexport PATH MAVEN_HOME 使更改生效：soucre /etc/profile mvn -v Git安装 yum -y install git git --version Nodejs安装1 推荐 安装更新一些依赖：yum -y install gcc gcc-c++ openssl-devel make 官网 找到较新版本下载地址：wget https://nodejs.org/dist/v8.9.1/node-v8.9.1.tar.gz 解压：tar -zvxf node-v8.9.1.tar.gz 进入解压后文件夹后执行：./configure 编译安装：make &amp;&amp; make install node -v Nodejs安装2 yum -y install nodejs node -v 文件上传安装 yum -y install lrzsz 更换阿里yum源 默认源：ll /etc/yum.repos.d 备份 /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 下载新的CentOS-Base.repo 到/etc/yum.repos.d/123456CentOS 5wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repoCentOS 6wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repoCentOS 7wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 生成缓存：yum makecache 端口开放与关闭 以防火墙开放3306端口为例 firewall-cmd --add-port=3306/tcp --permanent 关闭3306端口为例 firewall-cmd --remove-port=3306/udp --permanent 重启防火墙 firewall-cmd --reload 防火墙 开启firewall：systemctl start firewalld.service 停止firewall：systemctl stop firewalld.service 禁止firewall开机启动：systemctl disable firewalld.service 查看默认防火墙状态：firewall-cmd --state 创建swap空间 通常创建物理内存2~2.5倍大小的文件作为交换区，创建2G的swap交换区空白文件名为swapfile dd if=/dev/zero of=/root/swapfile bs=1M count=2048 格式化文件为swap文件系统 mkswap swapfile 启用：swapon swapfile 设置开机自动启用swap文件交换区，修改/etc/fstab，增加一行 /root/swapfile swap swap defaults 0 0 关闭swap：swapoff swapfile","tags":[{"name":"组件安装配置","slug":"组件安装配置","permalink":"https://wiki.quartz.ren/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"组件安装配置","slug":"平台工具/中间件-组件/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}]},{"title":"Maven的安装配置使用","date":"2019-02-24T01:56:24.000Z","path":"wk/平台工具/中间件_组件/组件安装配置/Maven安装配置使用/","text":"Maven的安装配置使用 下载maven 官方网站 Maven是使用java开发，需要安装JDK1.6以上 安装maven 第一步：安装JDK1.6及以上 第二步：将maven下载的压缩包进行解压缩 第三步：配置maven的环境变量MAVEN_HOME 第四步：配置maven的环境变量PATH 第五步：测试maven是否安装成功，在系统命令行中执行命令：mvn –v 配置maven 在maven中有两个配置文件：用户配置、全局配置（默认） 全局配置 在maven安装目录的conf里面有一个settings.xml文件，这个文件就是maven的全局配置文件。 该文件中配置来maven本地仓库的地址 默认在系统的用户目录下的m2/repository中，该目录是本地仓库的目录。 Maven命令的使用 Maven的命令要在pom.xml所在目录中去执行，可在pom.xml所在文件夹中按住shift右键，点击“在此处启动命令窗口” mvn compile编译的命令 mvn clean清除命令，清除已经编译好的class文件，具体说清除的是target目录中的文件 mvn test测试命令，该命令会将test目录中的源码进行编译 mvn package打包命令 Mvn install安装命令，会将打好的包，安装到本地仓库 组合命令 mvn clean compile 先清空再编译 mvn clean test 先执行clean，再执行test，通常应用于测试环节 mvn clean package 先执行clean，再执行package，将项目打包，通常应用于发布前执行过程： 清理————清空环境 编译————编译源码 测试————测试源码 打包————将编译的非测试类打包 mvn clean install 查看仓库，当前项目被发布到仓库中 组合指令，先执行clean，再执行install，将项目打包，通常应用于发布前 执行过程： 清理————清空环境 编译————编译源码 测试————测试源码 打包————将编译的非测试类打包 部署————将打好的包发布到资源仓库中 IDEA中Maven配置","tags":[{"name":"组件安装配置","slug":"组件安装配置","permalink":"https://wiki.quartz.ren/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"组件安装配置","slug":"平台工具/中间件-组件/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}]},{"title":"Redis-client安装配置","date":"2019-02-24T01:56:24.000Z","path":"wk/平台工具/中间件_组件/组件安装配置/Redis-clinet/","text":"Redis-client安装配置下载 https://redis.io/download 1234wget http://download.redis.io/releases/redis-5.0.7.tar.gztar xzf redis-5.0.7.tar.gzcd redis-5.0.7make src/redis-cli","tags":[{"name":"组件安装配置","slug":"组件安装配置","permalink":"https://wiki.quartz.ren/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"组件安装配置","slug":"平台工具/中间件-组件/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}]},{"title":"Redis的安装及集群配置","date":"2019-02-24T01:56:24.000Z","path":"wk/平台工具/中间件_组件/组件安装配置/Redis安装及集群配置/","text":"Redis的安装及集群配置官方下载地址 Redis的安装Redis是c语言开发的，安装需要c语言的编译环境,如果没有gcc需要在线安装: yum install gcc-c++ 安装步骤： 第一步：Redis的源码包上传到Linux 第二步：解压缩: tar -xvf redis-3.0.0.tar.gz -C /usr/local 第三步：编译 进入redis源码目录: make 第四步：安装: make install PREFIX=/usr/local/redis PREFIX参数指定redis的安装目录,一般软件安装到/usr目录下 Redis的启动： 前端启动：在redis的安装目录下直接启动redis-server[root@localhost bin]# ./redis-server 后台启动： 123把 /root/redis-3.0.0/redis.conf 复制到 /usr/local/redis/bin 目录下 cp redis.conf /usr/local/redis/bin/修改 redis.conf 文件 设置 daemonize yes启动时添加配置文件 ./redis-server redis.conf 关闭：[root@localhost bin]# ./redis-cli shutdown Redis-cli连接 默认连接localhost运行在6379端口的redis服务[root@localhost bin]# ./redis-cli 自定义连接端口[root@localhost bin]# ./redis-cli -h 192.168.25.153 -p 6379 -h：连接的服务器的地址 -p：服务的端口号 远程连接：注释掉 redis.conf 中 bind 127.0.0.1 设置 protected-mode no 重启redis 设置密码：配置文件中添加 requirepass 你的密码 重启redisRedis-cluster集群搭建由于容错机制，Redis集群中至少应该有三个节点。要保证集群的高可用，需要每个节点有一个备份机，因此，Redis集群至少需要6台服务器。 由于个人只有一台服务器，只有搭建伪分布式：一台服务器运行6个redis实例，需要修改Redis的端口号7001-7006 集群搭建环境 使用Ruby脚本搭建集群,需要Ruby的运行环境,安装Ruby yum install ruby yum install rubygems 安装Ruby脚本运行使用的包 上传所需Ruby库文件redis-3.0.0.gem 安装执行： [root@localhost ~]# gem install redis-3.0.0.gem 进入 redis-3.0.0/src 会找到redis-trib.rb文件，为了方便可将其拷贝至下一步创建的 redis-cluster 文件夹中 搭建Redis集群 拷贝创建6个Redis实例，方便管理将刚复制的6个Redis拷贝至创建 redis-cluster 文件夹，每个实例运行在不同的端口。需要修改redis.conf配置文件：把 cluster-enabled yes 前的注释去掉，并且分别修改端口 port 7001~7006 创建开启集群的脚本： 123456789101112131415161718192021[root@localhost redis-cluster]# vim start-all.shcd redis01./redis-server redis.confcd ..cd redis02./redis-server redis.confcd ..cd redis03./redis-server redis.confcd ..cd redis04./redis-server redis.confcd ..cd redis05./redis-server redis.confcd ..cd redis06./redis-server redis.confcd ..//修改脚本文件可执行权限[root@localhost redis-cluster]# chmod u+x start-all.sh 执行脚本启动每个redis实例 使用ruby脚本搭建集群 ./redis-trib.rb create --replicas 1 123.207.121.135:7001 123.207.121.135:7002 123.207.121.135:7003 123.207.121.135:7004 123.207.121.135:7005 123.207.121.135:7006 连接集群 [root@localhost redis-cluster]# redis01/redis-cli -p 7002 -c 关闭集群 杀进程：ps -aux|grep redis kill -9 进程ID 踩坑解决问题 重启服务器后重新启动ruby脚本报错1[ERR] Node 123.207.121.135:7001 is not empty. Either the node already knows other nodes (check with CLUSTER NODES) or contains some key in database 0. 由于非正常关闭集群，需删除每个节点中的数据文件aof、rdb、nodes.conf，实在不行就只有重装一遍… 强制停止redis快照导致，redis运行用户没有权限写rdb文件或者磁盘空间满了1MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error. 解决办法：修改配置文件 stop-writes-on-bgsave-error no","tags":[{"name":"组件安装配置","slug":"组件安装配置","permalink":"https://wiki.quartz.ren/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"组件安装配置","slug":"平台工具/中间件-组件/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}]},{"title":"SpringMVC总结","date":"2019-02-24T01:56:24.000Z","path":"wk/平台工具/中间件_组件/组件安装配置/SpringMvc总结/","text":"SpringMVC总结@Controller 通过@controller标注即可将class定义为一个controller类 @RestController 组合注解@Controller和@ResponseBody @RequestMapping value 表示需要匹配的url的格式 method 表示所需处理请求的http 协议(如get,post,put,delete等) 1@RequestMapping(value = &quot;/member/add&quot;,method = RequestMethod.POST) params 格式为”paramname=paramvalue” 或 “paramname!=paramvalue”。 表示参数必须等于某值，或者不等于才进入此映射方法。不填写的时候表明不限制。所以当请求/testParams.do?param1=value1&amp;param2=value2 的时候能够正确访问到该testParams 方法： 12345@RequestMapping (value= &quot;testParams&quot; , params=&#123; &quot;param1=value1&quot; , &quot;param2&quot; , &quot;!param3&quot; &#125;) public String testParams() &#123; System. out .println( &quot;test Params...........&quot; ); return &quot;testParams&quot; ; &#125; headers 用来限定对应的reqeust请求的headers中必须包括的内容，例如headers={“Connection=keep-alive”}, 表示请求头中的connection的值必须为keep-alive。当请求/testHeaders.do 的时候只有当请求头包含Accept 信息，且请求的host 为localhost 的时候才能正确的访问到testHeaders 方法： 1234@RequestMapping (value= &quot;testHeaders&quot; , headers=&#123; &quot;host=localhost&quot; , &quot;Accept&quot; &#125;) public String testHeaders() &#123; return &quot;headers&quot; ; &#125; produces指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回1234@RequestMapping (value= &quot;testProduces&quot; , produces=&quot;text/plain;charset=utf-8&quot;)@RequestMapping (value= &quot;testProduces&quot; , produces=&quot;application/json;charset=utf-8&quot;)@RequestMapping (value= &quot;testProduces&quot; , produces=&quot;application/xml;charset=utf-8&quot;) @DeleteMapping 映射HTTP的delete请求，等同于@RequestMapping(value = &quot;/member/add&quot;,method = RequestMethod.DELETE)，以下同理 @GetMapping @PostMapping @PutMapping @RequestParam value 对应表单name空间的值 required 是否允许为空 defaultValue 默认值 1234@RequestMapping ( &quot;requestParam&quot; ) public String testRequestParam( @RequestParam(required=false) String name, @RequestParam ( &quot;age&quot; ) int age) &#123; return &quot;requestParam&quot; ;&#125; @PathVariable 获得地址栏中传的参数 例如： 1234@RequestMapping(value=&quot;/&#123;groupId&#125;.do&quot;)public void detail(@PathVariable long groupId)&#123; groupRepository.selectOne(groupId);&#125; @RequestBody 用来将指定的客户端发送过来的请求参数的数据格式转换成Java实体 1234@RequestMapping(value = &quot;/xxxxx.do&quot;)public void create(@RequestBody() String host)&#123; System.out.println(&quot;-----------&quot; + host);&#125; @ResponseStatus返回一个指定的http response状态码。 12345@ResponseStatus(reason=&quot;no reason&quot;,value=HttpStatus.BAD_REQUEST)@RequestMapping(&quot;/responsestatus&quot;)public void responseStatusTest()&#123; &#125; @CookieValue可以把Requestheader中关于cookie的值绑定到方法的参数上。 例如有如下Cookie值： JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84，即把JSESSIONID的值绑定到参数cookie上。 123@RequestMapping(&quot;/displayHeaderInfo.do&quot;) public void displayHeaderInfo(@CookieValue(&quot;JSESSIONID&quot;) String cookie) &#123; &#125; @ExceptionHandler 123456789@RequestMapping(&quot;/exception&quot;) public void ExceptionTest() throws Exception&#123; throw new Exception(&quot;i don&#x27;t know&quot;); &#125; @ExceptionHandler public String handleException(Exception e,HttpServletRequest request)&#123; System.out.println(e.getMessage()); return &quot;helloworld&quot;; &#125;","tags":[{"name":"组件安装配置","slug":"组件安装配置","permalink":"https://wiki.quartz.ren/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"组件安装配置","slug":"平台工具/中间件-组件/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}]},{"title":"Swagger2安装使用","date":"2019-02-24T01:56:24.000Z","path":"wk/平台工具/中间件_组件/组件安装配置/Swagger2安装使用/","text":"Swagger2安装使用 Maven依赖安装 1234567891011&lt;!-- swagger2 --&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt;&lt;/dependency&gt; Swagger的Java配置文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package cn.exrick.swagger;import io.swagger.annotations.ApiOperation;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.EnableWebMvc;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.service.ApiInfo;import springfox.documentation.service.Contact;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;import springfox.documentation.swagger2.annotations.EnableSwagger2;/** * Created by Exrick on 2017/8/15. */@Configuration //让Spring来加载该类配置@EnableWebMvc //非SpringBoot需启用@EnableSwagger2 //启用Swagger2public class Swagger2Config &#123; static final Logger log= LoggerFactory.getLogger(Swagger2Config.class); @Bean public Docket createRestApi() &#123; log.info(&quot;加载Swagger2&quot;); return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()).select() //扫描指定包中的swagger注解 //.apis(RequestHandlerSelectors.basePackage(&quot;cn.exrick.controller&quot;)) //扫描所有有注解的api，用这种方式更灵活 .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) .paths(PathSelectors.any()) .build(); &#125; private ApiInfo apiInfo() &#123; return new ApiInfoBuilder() .title(&quot;XMall Api Documentation&quot;) .description(&quot;XMall商城API接口文档&quot;) .termsOfServiceUrl(&quot;http://blog.exrick.cn&quot;) .contact(new Contact(&quot;Exrick&quot;, &quot;http://blog.exrick.cn&quot;, &quot;1012139570@qq.com&quot;)) .version(&quot;1.0.0&quot;) .build(); &#125;&#125; Controller中API文档说明注解添加 1234567891011121314151617181920212223242526272829303132333435363738package cn.exrick.controller;import cn.exrick.common.utils.XMallResult;import cn.exrick.pojo.DataTablesResult;import cn.exrick.pojo.TbMember;import cn.exrick.service.MemberService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;/** * Created by Exrick on 2017/8/11. */@RestController@Api(description= &quot;会员列表信息&quot;)public class MemberController &#123; @Autowired private MemberService memberService; /** * 分页搜索查询会员 * @param draw * @param start * @param length * @param search * @return */ @RequestMapping(value = &quot;/member/list&quot;,method = RequestMethod.GET) @ResponseBody @ApiOperation(value = &quot;分页搜索获取会员列表&quot;) public DataTablesResult getMemberList(int draw, int start, int length, @RequestParam(&quot;search[value]&quot;) String search)&#123; DataTablesResult result=memberService.getMemberList(draw,start,length,search); return result; &#125;&#125; 按常规, 现在访问 http://localhost:8090/swagger-ui.html 应该能看到效果了, 但出现404 处理方法：在 GitHub 上下载 SwaggerUI 项目，建议下载2.0分支版本，界面清爽点，将dist下所有内容拷贝到本地项目resource/static/swagger下面, 并修改 index.html12//url = &quot;http://petstore.swagger.io/v2/swagger.json&quot;; url = &quot;http://localhost:8888/v2/api-docs&quot;; 然后访问 http://localhost:8888/static/swagger/index.html 使用总结 12345678@ApiOperation(value = &quot;获取图片资源&quot;,response = byte[].class,produces = &quot;application/json;charset=UTF-8&quot;) @ApiResponses(&#123; @ApiResponse(code=404,message=&quot;没有找到该图片&quot;) &#125;) @GetMapping(value = &quot;/files/images/&#123;id&#125;&quot;,produces = &quot;image/jpeg;image/png;image/gif&quot;) public ResponseEntity&lt;String&gt; getImg(@PathVariable(&quot;id&quot;) long id) &#123; return new ResponseEntity&lt;String&gt;(fileService.getFileBydId(id), HttpStatus.OK); &#125;","tags":[{"name":"组件安装配置","slug":"组件安装配置","permalink":"https://wiki.quartz.ren/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"组件安装配置","slug":"平台工具/中间件-组件/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}]},{"title":"ZooKeeper","date":"2019-02-24T01:56:24.000Z","path":"wk/平台工具/中间件_组件/组件安装配置/Zookeeper/","text":"ZooKeeperZookeeper是Apacahe Hadoop的子项目，是一个树型的目录服务，支持变更推送，适合作为Dubbo服务的注册中心，工业强度较高，可用于生产环境，并推荐使用。 可以作为集群的管理工具使用。 可以集中管理配置文件。 注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小。 官方下载地址 Zookeeper的安装 安装环境： Linux：CentOS JDK:1.7以上版本 Zookeeper是Java开发的可以运行在windows、linux环境。需要先安装JDK。安装步骤： 第一步：安装jdk 第二步：把zookeeper的压缩包上传到linux系统。 第三步：解压缩压缩包 tar -zxvf zookeeper-3.4.6.tar.gz 第四步：进入zookeeper-3.4.6目录，创建data文件夹。 第五步：把zoo_sample.cfg改名为zoo.cfg [root@localhost conf]# mv zoo_sample.cfg zoo.cfg 第六步：修改data属性：dataDir=/root/zookeeper-3.4.6/data 第七步：启动zookeeper [root@localhost bin]# ./zkServer.sh start 关闭：[root@localhost bin]# ./zkServer.sh stop 查看状态：[root@localhost bin]# ./zkServer.sh status 注意：需要关闭服务器防火墙 systemctl stop firewalld.service #停止firewall systemctl disable firewalld.service #禁止firewall开机启动","tags":[{"name":"组件安装配置","slug":"组件安装配置","permalink":"https://wiki.quartz.ren/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"组件安装配置","slug":"平台工具/中间件-组件/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}]},{"title":"Ngix安装","date":"2019-02-24T01:56:24.000Z","path":"wk/平台工具/中间件_组件/组件安装配置/nginx/","text":"Ngix安装(Linux)官方下载地址 安装与启动 gcc环境 yum install gcc-c++ 第三方的开发包 PCRE yum install -y pcre pcre-devel zlib yum install -y zlib zlib-devel openssl yum install -y openssl openssl-devel 安装 解压 [root@localhost ~]# tar zxf nginx-1.8.0.tar.gz 进入解压后文件夹复制执行以下命令./configure --prefix=/usr/local/nginx --sbin-path=/usr/local/nginx/sbin/nginx --conf-path=/usr/local/nginx/conf/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx/nginx.pid --lock-path=/var/lock/nginx.lock --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-http_gzip_static_module --http-client-body-temp-path=/var/tmp/nginx/client/ --http-proxy-temp-path=/var/tmp/nginx/proxy/ --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi --http-scgi-temp-path=/var/tmp/nginx/scgi --with-pcre [root@localhost nginx-1.8.0]# make [root@localhost nginx-1.8.0]# make install [root@localhost sbin]# mkdir /var/tmp/nginx/client -p 进入目录 cd /usr/local/nginx/ 启动 [root@localhost sbin]# ./nginx 配置文件目录nginx/conf/nginx.conf 重新加载配置文件 避免重启sbin/nginx -s reload 配置 配置虚拟主机与反向代理 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687worker_processes 1;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; upstream resume&#123; server 123.207.121.135:8080; &#125; server &#123; listen 80; server_name localhost; location / &#123; proxy_pass http://resume; index index.html index.htm; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; server &#123; listen 80; server_name www.img.exrick.cn; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; root html81; index index.html index.htm; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; server &#123; listen 80; server_name www.xmall.exrick.cn; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; root html; index index.html index.htm; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125; 负载均衡（直接添加server即可） 123456789...http &#123; ... upstream resume&#123; server 123.207.121.135:8080; server 123.207.121.135:8081; &#125; ...&#125; 权重调节（weight） 123456789...http &#123; ... upstream resume&#123; server 123.207.121.135:8080; server 123.207.121.135:8081 weight=2; &#125; ...&#125; 压缩文件 12345gzip on;gzip_min_length 1k;gzip_buffers 4 16k;gzip_comp_level 9;gzip_types text/plain application/x-javascript application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png eventsource script png; 解决代理IP地址 123456789101112131415161718192021server &#123; listen 80; server_name xmall.exrick.cn; location / &#123; proxy_pass http://xmall; index index.html index.htm; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125; error_page 404 /50x.html; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; 踩坑解决问题 [emerg]: getpwnam(“nginx”) failed 解决方法1：在nginx.conf中 把user nobody的注释去掉既可 解决方法2：错误的原因是没有创建nginx这个用户，应该在服务器系统中添加nginx用户组和用户nginx，如下命令：/usr/sbin/groupadd -f nginx/usr/sbin/useradd -g nginx nginx [emerg] mkdir() “/var/temp/nginx/client” failed (2: No such file or directory)root下手动创建即可：mkdir -p /var/temp/nginx/client 重启服务器后启动提示/var/run/nginx找不到1nginx: [error] open() &quot;/var/run/nginx.pid&quot; failed (2: No such file or directory) 进入/var/run新建nginx文件夹：mkdir nginx","tags":[{"name":"组件安装配置","slug":"组件安装配置","permalink":"https://wiki.quartz.ren/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"组件安装配置","slug":"平台工具/中间件-组件/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"}]},{"title":"TODO_LIST","date":"2019-02-24T01:56:24.000Z","path":"wk/项目管理/[2]发展规划/TODOLIST/TODOList/","text":" 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"},{"name":"todo","slug":"todo","permalink":"https://wiki.quartz.ren/tags/todo/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[2]发展规划","slug":"项目管理/2-发展规划","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/2-%E5%8F%91%E5%B1%95%E8%A7%84%E5%88%92/"},{"name":"TODOLIST","slug":"项目管理/2-发展规划/TODOLIST","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/2-%E5%8F%91%E5%B1%95%E8%A7%84%E5%88%92/TODOLIST/"}]},{"title":"系统思维.","date":"2019-02-24T01:56:24.000Z","path":"wk/项目管理/[3]生活学习/[4]思维/001.系统思维/","text":"如何学习系统思维 什么是系统思维 什么是系统系：指联系。 统：指统一。 所谓系统，是指由相互之间具有联系的各种元素组成的统一整体。 例如社会、国家、公司、家庭以及我们的身体，都是系统。 系统的三个特征 系统是由各种元素组成的。 元素可以是有形的实体，例如公司系统中的办公楼、员工、办公用品等，也可以是无形的状态，例如规章、制度、命令、文化等。 系统中的元素存在各种联系。 例如员工根据领导安排， 服从公司制度，通过办公用品，出售自己时间，产出工作成果，获得工作报酬等。 系统有自己的目的或功能。 什么是系统思维 如何学习系统思维？","tags":[{"name":"生活学习","slug":"生活学习","permalink":"https://wiki.quartz.ren/tags/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[4]思维","slug":"项目管理/3-生活学习/4-思维","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/4-%E6%80%9D%E7%BB%B4/"}]},{"title":"时间和注意力.","date":"2019-02-24T01:56:24.000Z","path":"wk/项目管理/[3]生活学习/[4]思维/002.时间和注意力/","text":"人最宝贵的是时间和注意力. 高效能人士的七个习惯.","tags":[{"name":"生活学习","slug":"生活学习","permalink":"https://wiki.quartz.ren/tags/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[4]思维","slug":"项目管理/3-生活学习/4-思维","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/4-%E6%80%9D%E7%BB%B4/"}]},{"title":"对世界的认识.","date":"2019-02-24T01:56:24.000Z","path":"wk/项目管理/[3]生活学习/[4]思维/003.对世界的认识/","text":"37df3367815823fa6a74ef48ceb506656c45f502704257fc33ab5a021d9f84fef9644164648214ab712c867367bcd50f1f37e922b862a407696abcae1b627dcf7c95253d6a01d23fe9f3f3c56200a1c79d8d5fab1741dceb0465fc1c953093b93cb73214d4be5b16ba14fc61c07910d9fe7203ccf3bb2d82a1c92e0a5a1179b6753888b4a1fd1e99d0ea74602b4d2f82ab26b5bc33a12e6912020f27e43410c9e432fa631ca5584c73e6dbd483e61c52f7c643ccfcd2afbf6d5df2946a012470cc8f06b4f9a475edb6cfa1034fcccf76bcb5766d8800424f274013b09ef4787769bae57203fa908f79524fcbcc531b671f33e7dac5bf7617686c46eb2766b85f21bf0000be6dd7fcf7b523c0a601b5afad7469a4e3b4d283ddba54aa1399293a002992d8758f706d637776fb6055b5d949d8535f59f0180a00d8f4c1d0c7645852a6492500df362848b0ad683db93441e12a99ab9eac72669c31eb184a97bcd8f879c0e0ede0564eacea2a395c59c7754b533b46ea46e683e7270005d18231b6b15775148e186295f1bb8e352099c8f871dffe4c0af21dcf499ed568d91451ac9529881bc7a659eb661dd78f69859c9ae060678a4b0ba5c9567642c77e6c218f66c6ecc4d8fb48c05cd82f6ac393978fbbb448980e01b8d70983bf7100673544827f6aceebbd08ff37f76956b427319ca59433be57a54e64e3dc1f1e003a11a9c68e64cfc960a419cd62ab77f4f43291e3511aa34deaf262d0d901a30c543b7908e3ac4f446ada3beb64825f7ce180604648c9d9f3f581f96faeb25ed73e91ce4cf55f9b06a7560733d94566433d4a26cefe43c72c4c3894515eacce9402a1a0e999e37496adc273c2ffd67b29de3272aa4f0d55306f9567af4263331cf10b8b9b4e5882013d37b6108cad50dfb422330cf71426a4fdc4356f7b7a610601974a62b950007e151d73496a7264e95b9348cc8c49912bf63a850e9378b94ef8368066e040bccb75f55e6c698eeb955783b092d6c43671c17817a84340e148c17be949cfc8e87e195657e2e97849b0349a1fbcf9dcac6c67d793d8689647bc8ace65906b5f6e07535f7d08b5433905362eb6230fc48aca20bb4ea5f498ee41fe944efe2a27119fa469fd86557967bb74ee4f40c46fb78ff10268be7e90574e4f1f9dfacb354779a53070fb867ec30ad5f3d5586306c993ebe801c2f5b8760d5967d98609cef470e18cf20d043974f9104ba6c5f4b9afd22842b97a419a5185f7294ed310b8a5f72eb652270b024d50d1179c00e62fc658f6e9afbe3638856613623a3932a10a9f33b93bdf68896a44258634077f3e95aec3799e89714d64872e65a3602fa40b2eb6366e4cc81221321fe33ce51b61b5b4566d3a6ebd03e8ecfbb317fef7c0aad465eacbc8125eeeaa4739c6ac5b71cc2eea5d03344d4837081f7a7a458e8a18132553ebabdf31dff9a1bd9b0901e6a62ccf5d4ea7b1df6d4b2d8eb54f079d108e8caf55e9cc44a184df59a36bda6ef490cd6c295c321fcf4fc176e24d67ef7c259a560d0325bbba40b577d573ab954feffb8447267284a394149455306528c06eb982588b82342ec1b6b41850f1bf075d6ea0986d59bb8e25a879eee37c1448a23dcd8f3c21e5960b90e068de3d325b3a6cf9a29f75eecfe163511b824c3c77dbbb511a84364b04a513459d18fba24e1a70cfc79bb1aa7686d56d8522b029fe09ac22a2830a7f757289ecf482ee8f06660c8e8094810ab74bdfd1c0af84a519bbf98869704ccf347e97d8044e1b3646ca4b45822d4d4dc84cc3a03ffe2cac47dcdca48759d4f0411db101b244a4a35f74e0cb91051286a17477ade3140489dcc450b7d84298d412cd43847953ff15f7bdc318621d7114e61a53bf05d03f20079753f107c0e24dbc19ea13ced95c91c0da0ac37d7574b7461640c29fd2c8a4cbabd4113c3559a7a8eb731fea015b20e76898408c2e7b00762ccc69a085f1da25092fbeb48dc09d013d4d80e2cc9cce45c72f1e196a698e8de10419f7a381032d297962e608ebd37ef223b7ccc1acc2d35c43805c955dd5218c76c7b9d17b1694c395e91a8392ad9a23adcde9e7eb5bfc0cf410dc7b77d3f1fbe187321342bd60c5518b750271488c09f8e8be72d591f97ecca13a02c4f9dcc82ad2bb2ffe36acc4915c8f0da2e9cd24748c354740e195949e7e1915a01bf34d8cb8dbb560c019ed79b575ebcd551f786c0864d494a1a1cd8570b8cb400fa4393c1d1d567329b19ae79a2e316ea28758c945fe8f0ca0754a2da1d60e733f19d04f011e7130d51cefe41f3559df73932c63d43ff1aea0d3932d7049b97185ae87a8b42b3d7ccd43926dd9094d8e772df4691597f488af3e02d9042aef73405db3192526bf3ffb66fbb6368b451e4c6d94a6138ad5b193691e753a17e15b833ce402a48452896d64455f335b986c2f37698715758619ea0d6579fe44ee8bbce11bea9067f452236ec7d920c358afe62e599182be51ea111dd464d9518356d931cebcd7f417fc70b893434b239806c1b517a480c8bcbafb5fa124e75f9eaca1912a7fce5e320e95d327af36c1b559ffa8d15e079cecea66ad079ff2b90be73a71e27ee3a8853a1aee9e9b3c15b0fb4b3cb87469041c4403036612924827820986b6f71c064d98c48a40a9adbb42a30a4bedeec3bf10dc4ae94b86040336562af100827c64a77d2ab2eff4af86e921befc6ba15b1b954fba5864bae2f58e1b89d8041f87920a209ab3caf31e9f5dbbeb44d97762b53348ded25378b54131a39661254222bcb4b541192882fe8df72cafc18d624ea9c21807a987e794f8f4db9aee4289526fa11626128e7cca95aa8cb4d07e08d5dcc46377975572ca8c8bd4ef15b60088c78cc72f55113607415ad2fec3c5ebad61f6bad3fe711c708c8714e2c45a10ae0acd0be463bb9df9523535811d728c53f9051b910ef585941f469a7dd8c3920849be0b76f8d139de535e8a21a47c689d30c57559d92b1a2e3520fe2a8119be93ece22b1dd7e7fc92553dc9c8c51c408c0e33b34d3ad14951e5ed6579c5a884d79019feadb7bd167b9347d878c7a32d8ea34f691af5808ffe086a127e8a9d2b1bf969263d116c21d1d14ee8ae077b7e952bc56c563209ba89cff78b5a923ff59650f782ecdcbcded3fd7186961803d8b3364a72a2217c769a227e150378fc40fcad20bd4ca14595f5e779b696551dcf1c271015014c9aa34133e96cfa42af83e7daa3be80b55b6ad0ac3a819c12c0582f778c5c3175d52e26ce3fdc96eac1daf50cc030285626697587760b747ed06f6fe439dc45f2224d77a49583bcf05ce320e3 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"生活学习","slug":"生活学习","permalink":"https://wiki.quartz.ren/tags/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[4]思维","slug":"项目管理/3-生活学习/4-思维","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/4-%E6%80%9D%E7%BB%B4/"}]},{"title":"After美西","date":"2019-02-24T01:56:24.000Z","path":"wk/项目管理/[3]生活学习/旅行/2019美西之行/","text":"2019年也算是幸运的一年. 虽然工作懒散了. 也没有想着升值加薪. 首先感觉很nice的是十一去了泰国，虽然玩的不是很理想，但是就像那句话: 旅行是即不舒适又不安全的，但它能带给我们流光溢彩、繁花似锦的世界. 看到了一个不一样的国家, 见到了大学学习很好的同学. 真的对生活有了一些新的认识. 12月底有有机会去了美国， 从面签到期待已久的行程。 美国的行程还是满心欢喜的，虽然去之前想着都是领导可能会不好玩。但当第一天晚上在旧金山的 希尔顿联合广场酒店（Cityscape Lounge ）看到旧金山的夜景的时候, 感觉美国行还是很快乐. 洛杉矶的海滩, 斯台普斯球馆. 当时还不知道斯台普斯球馆 是什么，只是看到大家都去拍照，后来才知道是NBA常用的体育馆.ß 1.便宜坊的烤鸭，天外天，1949全鸭季，全聚德2.火锅，海底捞3.宇宙中心的串串（成都的串串）。付小姐在成都【这个】4.烧烤-木屋烧烤。猪蹄很好吃，很辣。羊蝎子5.313羊庄，铁锅烀羊肉。清汤的很鲜，不同的口味汤真的很好喝。【这个】6.海鲜7.炸酱面8.稻香村的点心9.眉州东坡 北戴河，厦门，深圳，台湾 最大的感受就是 那边的中国人的餐馆。 从他们身上可以看到一种异国他乡的艰辛和服务态度，还有对现在生活的踏实和一丝的满足(就是那种经历过一些艰辛之后的收获，不管是物质还是精神上的收获)。 也看到一些对祖国的一些感慨和自豪吧。问他们说会考虑回去生活吗。 他们说是回不去了，那边已经没有家了。 一定程度上美国的生活还是很不错，物质上的比如人少，生活环境很好。发达国家的那种生活状态。国内一些地方还是不能比的（比如国内一线城市的拥挤，二三线城市的也是拥挤和四五线的落后相比）","tags":[{"name":"生活学习","slug":"生活学习","permalink":"https://wiki.quartz.ren/tags/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"旅行","slug":"项目管理/3-生活学习/旅行","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%E6%97%85%E8%A1%8C/"}]},{"title":"在看的书和文章","date":"2019-02-24T01:56:24.000Z","path":"wk/项目管理/[3]生活学习/这些都是历史/在看的书和文章/","text":"个人博客 Docker — 从入门到实践 学习java设计模式 设计模式之禅（第2版） hadoop-notebook gitee-pages 有趣的文章Web应用架构演进及系统性能、稳定性所需要解决的问题 dubbo学习过程、使用经验分享及实现原理简单介绍","tags":[{"name":"生活学习","slug":"生活学习","permalink":"https://wiki.quartz.ren/tags/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"这些都是历史","slug":"项目管理/3-生活学习/这些都是历史","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%E8%BF%99%E4%BA%9B%E9%83%BD%E6%98%AF%E5%8E%86%E5%8F%B2/"}]},{"title":"ubunut 挂载samba","date":"2019-02-24T01:56:24.000Z","path":"wk/项目管理/软件工程/Linux/ubuntu挂载samba/","text":"ubunut 挂载smbubuntu18.04挂载smblinux挂载samba文件系统的方法12sudo apt install cifs-utilssudo mount -t cifs -o username=xxx,password=xxx //$&#123;ip&#125;/deploy/download /mnt/download sslocal -s 108.160.129.222 -p 25002 -k ‘2018vultr@lgqsb’ -l 1080 -t 600 -m aes-256-cfb -d $1 —pid-file /tmp/vpn-agent.pid —log-file /tmp/vpn-agent.log export GIO_EXTRA_MODULES=/usr/lib/x86_64-linux-gnu/gio/modules/ if [ $1 == ‘stop’ ];then gsettings set org.gnome.system.proxy mode ‘none’ echo ‘stop 1232.’else gsettings set org.gnome.system.proxy.http host ‘127.0.0.1’ gsettings set org.gnome.system.proxy.http port 1080 gsettings set org.gnome.system.proxy mode ‘manual’ echo ‘start 22222.’fi","tags":[{"name":"linux","slug":"linux","permalink":"https://wiki.quartz.ren/tags/linux/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"软件工程","slug":"项目管理/软件工程","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"Linux","slug":"项目管理/软件工程/Linux","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/Linux/"}]},{"title":"体制-公务员","date":"2019-02-24T01:56:24.000Z","path":"wk/项目管理/[3]生活学习/[3]综合能力/关于体制/001.公务员/","text":"6529a249a0af82b27e00ec9fb492a1653aa7ce88a63d3953f1dd93a79373fb4897e23058f24717524a49d6645607730af38d8be97c6cb24c35f1afe3b1f13104ec08824ad3586e6a175cb54689424b7f5364d3f6426a44998e5a8e7bb0b738cee4bd93e183913ade410fb6acf41c0768600bbba9aba1dd9cc69ce2c278c6b355d72845fd231019c07fd7c4ab91bead1558b95ec3c3fe26c2d4ea9b8e0c9db320bce01692cfa5cc12cec0927e59a6b3523ab6a3d23411d9312b4979a73e2895b11d8f0f581bdd694f67a211758da3bdd453841b9e9695b792b95ffe730a2067eeb9f60a923e4e0fbf0a5dfa4ae0f1c4d51a12a5589b15c31743d8856fd43a02466f7ccbbea60df31fc305608c6368e3165ffb576535db5f13a3549b91e1374783c3ea6ba37152402a80d79e5dcf32cd4b0a00820ff0842362a0d175a083c522b0d0386ec4b6b3a13892bdce841a2e8da19a37758536c395ec4010b01fe572f4ac83d98afbe9cd906634717394d4231866350efcea38c14cf6df83713927b090b6c8dc1e14ac25f12f9c13a70a61443316f86d03cd7b245d74708342872de2a8f4f8359bf220aded5de3e09b6042b88f31f316391fecf5be3e81d7e4fddb86909969f89a09d91d248e098ed79358147a23ece542812b6dbf23f4981dcebf712d4e61baab1d35f3ca89c09c96268cc4047f8b5ef22aec041fc23fbd0a72b082f936afadee16e254d7fa1fa12a779e80df1c967756e478f21ef4fc27e9247d1da3b4d75a0975a10c6d830ce850332261812bfaa58520531d999255aa5c94c97bd9252ff3794f28859782fe8d2cffcb5c9e11155cd310f0e2c0b5f4878be9e8803ce426d3b8e7e7a8d1993c7154d280dfc79db85771e00df17bc6ac82df2e4fb86202c73963a747371405a52142ae33fc0794 当前文章暂不对外可见，请输入密码后查看！","tags":[{"name":"private","slug":"private","permalink":"https://wiki.quartz.ren/tags/private/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[3]综合能力","slug":"项目管理/3-生活学习/3-综合能力","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"},{"name":"关于体制","slug":"项目管理/3-生活学习/3-综合能力/关于体制","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/3-%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/%E5%85%B3%E4%BA%8E%E4%BD%93%E5%88%B6/"}]},{"title":"金融","date":"2019-02-24T01:56:24.000Z","path":"wk/项目管理/[3]生活学习/这些都是历史/了解点金融/未来十年,买房还是买股/","text":"回看历史，以个人或家庭投资和股市为例，两者可谓是冰火两重天 的不同经济命运， 放假在过去的二十年翻了20倍.而股市的综合指数十年原地踏步。国内波澜壮阔的房地产牛市坚定了一批又一批的投资者买房才是硬道理的信念。 不过看看欧美发达国家，你不禁会发现富人都是把投资股票作为首选，并且很多的普通家庭选择了租房方式，为什么会有这样的差异呢？ 一轮经济周期里几乎每一类资产都有上涨机会，包括衰退初期的债券，衰退后期的股票，复苏初期的房地产和大宗商品。 一.我国房地产牛市的根本原因经济高速发展带动城市化率的快速提升。 人口红利的持续释放。","tags":[{"name":"生活学习","slug":"生活学习","permalink":"https://wiki.quartz.ren/tags/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"这些都是历史","slug":"项目管理/3-生活学习/这些都是历史","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%E8%BF%99%E4%BA%9B%E9%83%BD%E6%98%AF%E5%8E%86%E5%8F%B2/"},{"name":"了解点金融","slug":"项目管理/3-生活学习/这些都是历史/了解点金融","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%E8%BF%99%E4%BA%9B%E9%83%BD%E6%98%AF%E5%8E%86%E5%8F%B2/%E4%BA%86%E8%A7%A3%E7%82%B9%E9%87%91%E8%9E%8D/"}]},{"title":"HBase伪集群模式安装","date":"2019-02-16T04:56:24.000Z","path":"wk/数据/数据处理/组件安装配置/Hadoop组件安装/3.HBase伪集群模式安装/","text":"同Hadoop安装，到CDH版下载地址下载hbase。选择 hbase-1.0.0-cdh5.4.0.tar.gz hbase伪分布式模式是基于hdfs环境的 因此，在安装hadoop的前提下，我们配置Hbase的伪分布式模式如下： 1.下载并解压 2.配置环境变量（可选） 123456vi ~/.bashrc#添加export PATH=$PATH:/opt/app/skyeye/hbase-1.0.0-cdh5.4.0/bin. ~/.bashrc#验证hbase version 伪集群模式配置 1.配置 conf/hbase-env.sh将JAVA_HOME变量设置为本机jdk路径。如下： 12export JAVA_HOME=/opt/tools/jdk1.8.0_131 #配置本机的java安装根目录export HBASE_MANAGES_ZK=true #配置使用hbase自带的zookeeper，不使用自己搭建的zookeeper 如果使用 export HBASE_MANAGES_ZK=true， 即配置不使用hbase自带的zookeeper，使用自己搭建的zookeeper hbase可以使用自定义zookeeper管理，也可以使用自带的zookeeper。 2.配置conf/hbase-site.xml修改hbase.rootdir,将其指向hdfs，并指定Hbase在HDFS上的存储路径。将hbase.cluster.distributed设置为true。添加zk的节点地址。如下： 1234567891011121314151617181920&lt;configuration&gt; &lt;property&gt; &lt;name&gt;hbase.cluster.distributed&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hbase.rootdir&lt;/name&gt; &lt;value&gt;hdfs://localhost:9000/hbase&lt;/value&gt; &lt;/property&gt; &lt;!--以下信息只有在使用自己搭建的zk时添加--&gt; &lt;property&gt; &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt; &lt;value&gt;cdhnode1,cdhnode2,cdhnode3&lt;/value&gt; &lt;/property&gt; &lt;!--默认为/tmp/目录下--&gt; &lt;property&gt; &lt;name&gt;hbase.tmp.dir&lt;/name&gt; &lt;value&gt;/opt/app/skyeye/data/hbasetmp/&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 3.启动HBase 完成上述操作之后，启动HBase，需要先启动Hadoop。 启动及检查： 123456789zbm@node3:~$ start-all.sh zbm@node3:~$ jps9250 ResourceManager9683 Jps9365 NodeManager9110 SecondaryNameNode8935 DataNode8795 NameNode 上述则Hadoop启动成功。 当前版本。使用start-all.sh启动hadoop时会提示以下信息，所以建议分别启动hdfs和yarn。 1This script is Deprecated. Instead use start-dfs.sh and start-yarn.sh 之后启动HBase，启动及检查 123456789101112start-hbase.sh # 启动Hbasezbm@node3:~$ jps # 检查3728 Jps3123 HRegionServer2407 NodeManager1961 DataNode2298 ResourceManager3004 HMaster1852 NameNode2158 SecondaryNameNode2943 HQuorumPeer 以上几个进程说明Hbase启动成功。 4.Hbase操作 可以进入shell模式，通过命令行操作查看hbase数据库信息。 12345hbase shell #进入shell模式list # 查看当前数据库所有表信息describe &#x27;member&#x27; # 查看表结构# 创建一个member表，其拥有member_id,address,info三个列族create &#x27;member&#x27;,&#x27;member_id&#x27;,&#x27;address&#x27;,&#x27;info&#x27; 5.查看HDFS的HBase数据库文件 12345678910zbm@node3:～$ hadoop fs -ls /hbase17/10/28 20:45:14 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicableFound 6 itemsdrwxr-xr-x - nova supergroup 0 2017-10-28 00:03 /hbase/.tmpdrwxr-xr-x - nova supergroup 0 2017-10-28 00:03 /hbase/WALsdrwxr-xr-x - nova supergroup 0 2017-10-28 00:03 /hbase/data-rw-r--r-- 3 nova supergroup 42 2017-10-28 00:03 /hbase/hbase.id-rw-r--r-- 3 nova supergroup 7 2017-10-28 00:03 /hbase/hbase.versiondrwxr-xr-x - nova supergroup 0 2017-10-28 00:14 /hbase/oldWALs 6.停止HBase 1stop-hbase.sh #停止Hbase 问题：停止hbase时，HRegionServer进程不能停止。会导致下次启动hbase时出错。 原因: HBase的用户界面 yarn: http://192.168.1.20:8088/cluster hdfs状态: http://192.168.1.20:50070/dfshealth.html#tab-overview Master: http://192.168.1.20:60010/master.jsp","tags":[{"name":"hadoop","slug":"hadoop","permalink":"https://wiki.quartz.ren/tags/hadoop/"},{"name":"hbase","slug":"hbase","permalink":"https://wiki.quartz.ren/tags/hbase/"}],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"组件安装配置","slug":"数据/数据处理/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"Hadoop组件安装","slug":"数据/数据处理/组件安装配置/Hadoop组件安装","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/Hadoop%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85/"}]},{"title":"伪集群模式安装","date":"2019-02-16T04:56:24.000Z","path":"wk/数据/数据处理/组件安装配置/Hadoop组件安装/2.伪集群模式安装/","text":"搭建hadoop-2.6.0-cdh5.4.7伪分布式 CDH版下载地址 先来看看什么是CDH，为什么选择CHD版的Hadoop。 CDH属于Hadoop的一个发行版。 Hadoop有以下发行版： Apache Hadoop Cloudera’s Distribution Including Apache Hadoop（CDH） Hortonworks Data Platform (HDP) MapR EMR CDH版有以下优点： 版本划分清晰 版本更新速度快 支持Kerberos安全认证 文档清晰 支持多种安装方式（Cloudera Manager方式） 安装hadoop-2.6.0-cdh5.4.0首先到指定网站下载安装包CDH版下载地址 解压下载的安装包 配置伪集群 1、进入 hadoop-2.6.0-cdh5.4.0/etc/hadoop 2、编辑 hadoop-env.sh1vi hadoop-env.sh 3、修改JAVA_HOME的配置为1export JAVA_HOME=/opt/tools/jdk1.8.0_131 4、编辑core-site.xml,添加如下配置： 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://node2:9000&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; node2说明，如果没有配置hosts，请将node2换成IP地址:wp保存并退出。 5、编辑hdfs-site.xml,添加如下配置 1234567891011121314151617181920212223242526&lt;configuration&gt; &lt;property&gt; &lt;!--开启web hdfs--&gt; &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;value&gt;/opt/cdh/hadoop/name&lt;/value&gt; &lt;description&gt; namenode 存放name table(fsimage)本地目录（需要修改）&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.edits.dir&lt;/name&gt; &lt;value&gt;$&#123;dfs.namenode.name.dir&#125;&lt;/value&gt; &lt;description&gt;namenode存放 transactionfile(edits)本地目录（请自行修改）&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;value&gt;/opt/cdh/hadoop/data&lt;/value&gt; &lt;description&gt;datanode存放block本地目录（请自行修改）&lt;/description&gt; &lt;/property&gt;&lt;/configuration&gt; 以上配置完成，还需要创建文件夹 12mkdir -p cdh/hadoop/namemkdir cdh/hadoop/data 6、配置mapred-site.xml 12345678cp mapred-site.xml.template mapred-site.xml之后加入以下配置&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 7、编辑yarn-site.xml 1234567&lt;configuration&gt; &lt;!-- Site specific YARN configuration properties --&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 到此，所有配置都已完成。 格式化HDFS1bin/hdfs namenode -format 看到如下信息： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263************************************************************/15/09/22 14:59:46 INFO namenode.NameNode: registered UNIX signal handlers for [TERM, HUP, INT]15/09/22 14:59:46 INFO namenode.NameNode: createNameNode [-format]15/09/22 14:59:48 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable15/09/22 14:59:49 WARN common.Util: Path /opt/cdh/hadoop/name should be specified as a URI in configuration files. Please update hdfs configuration.15/09/22 14:59:49 WARN common.Util: Path /opt/cdh/hadoop/name should be specified as a URI in configuration files. Please update hdfs configuration.Formatting using clusterid: CID-41ea6672-a32e-4b16-b704-962381ed409a15/09/22 14:59:49 INFO namenode.FSNamesystem: No KeyProvider found.15/09/22 14:59:49 INFO namenode.FSNamesystem: fsLock is fair:true15/09/22 14:59:49 INFO blockmanagement.DatanodeManager: dfs.block.invalidate.limit=100015/09/22 14:59:49 INFO blockmanagement.DatanodeManager: dfs.namenode.datanode.registration.ip-hostname-check=true15/09/22 14:59:49 INFO blockmanagement.BlockManager: dfs.namenode.startup.delay.block.deletion.sec is set to 000:00:00:00.00015/09/22 14:59:49 INFO blockmanagement.BlockManager: The block deletion will start around 2015 九月 22 14:59:4915/09/22 14:59:49 INFO util.GSet: Computing capacity for map BlocksMap15/09/22 14:59:49 INFO util.GSet: VM type = 64-bit15/09/22 14:59:49 INFO util.GSet: 2.0% max memory 966.7 MB = 19.3 MB15/09/22 14:59:49 INFO util.GSet: capacity = 2^21 = 2097152 entries15/09/22 14:59:50 INFO blockmanagement.BlockManager: dfs.block.access.token.enable=false15/09/22 14:59:50 INFO blockmanagement.BlockManager: defaultReplication = 115/09/22 14:59:50 INFO blockmanagement.BlockManager: maxReplication = 51215/09/22 14:59:50 INFO blockmanagement.BlockManager: minReplication = 115/09/22 14:59:50 INFO blockmanagement.BlockManager: maxReplicationStreams = 215/09/22 14:59:50 INFO blockmanagement.BlockManager: shouldCheckForEnoughRacks = false15/09/22 14:59:50 INFO blockmanagement.BlockManager: replicationRecheckInterval = 300015/09/22 14:59:50 INFO blockmanagement.BlockManager: encryptDataTransfer = false15/09/22 14:59:50 INFO blockmanagement.BlockManager: maxNumBlocksToLog = 100015/09/22 14:59:50 INFO namenode.FSNamesystem: fsOwner = root (auth:SIMPLE)15/09/22 14:59:50 INFO namenode.FSNamesystem: supergroup = supergroup15/09/22 14:59:50 INFO namenode.FSNamesystem: isPermissionEnabled = true15/09/22 14:59:50 INFO namenode.FSNamesystem: HA Enabled: false15/09/22 14:59:50 INFO namenode.FSNamesystem: Append Enabled: true15/09/22 14:59:50 INFO util.GSet: Computing capacity for map INodeMap15/09/22 14:59:50 INFO util.GSet: VM type = 64-bit15/09/22 14:59:50 INFO util.GSet: 1.0% max memory 966.7 MB = 9.7 MB15/09/22 14:59:50 INFO util.GSet: capacity = 2^20 = 1048576 entries15/09/22 14:59:50 INFO namenode.NameNode: Caching file names occuring more than 10 times15/09/22 14:59:50 INFO util.GSet: Computing capacity for map cachedBlocks15/09/22 14:59:50 INFO util.GSet: VM type = 64-bit15/09/22 14:59:50 INFO util.GSet: 0.25% max memory 966.7 MB = 2.4 MB15/09/22 14:59:50 INFO util.GSet: capacity = 2^18 = 262144 entries15/09/22 14:59:50 INFO namenode.FSNamesystem: dfs.namenode.safemode.threshold-pct = 0.999000012874603315/09/22 14:59:50 INFO namenode.FSNamesystem: dfs.namenode.safemode.min.datanodes = 015/09/22 14:59:50 INFO namenode.FSNamesystem: dfs.namenode.safemode.extension = 3000015/09/22 14:59:50 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.window.num.buckets = 1015/09/22 14:59:50 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.num.users = 1015/09/22 14:59:50 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.windows.minutes = 1,5,2515/09/22 14:59:50 INFO namenode.FSNamesystem: Retry cache on namenode is enabled15/09/22 14:59:50 INFO namenode.FSNamesystem: Retry cache will use 0.03 of total heap and retry cache entry expiry time is 600000 millis15/09/22 14:59:50 INFO util.GSet: Computing capacity for map NameNodeRetryCache15/09/22 14:59:50 INFO util.GSet: VM type = 64-bit15/09/22 14:59:50 INFO util.GSet: 0.029999999329447746% max memory 966.7 MB = 297.0 KB15/09/22 14:59:50 INFO util.GSet: capacity = 2^15 = 32768 entries15/09/22 14:59:50 INFO namenode.NNConf: ACLs enabled? false15/09/22 14:59:50 INFO namenode.NNConf: XAttrs enabled? true15/09/22 14:59:50 INFO namenode.NNConf: Maximum size of an xattr: 1638415/09/22 14:59:51 INFO namenode.FSImage: Allocated new BlockPoolId: BP-314159059-192.168.1.3-144290519105615/09/22 14:59:51 INFO common.Storage: Storage directory /opt/cdh/hadoop/name has been successfully formatted.15/09/22 14:59:51 INFO namenode.NNStorageRetentionManager: Going to retain 1 images with txid &gt;= 015/09/22 14:59:51 INFO util.ExitUtil: Exiting with status 015/09/22 14:59:51 INFO namenode.NameNode: SHUTDOWN_MSG: /************************************************************SHUTDOWN_MSG: Shutting down NameNode at node2/192.168.1.3************************************************************/ 如果不报错，则格式化成功。 然后分别启动HDFS和Yarn： 12sbin/start-dfs.shsbin/start-yarn.sh 启动过程没有错误则启动成功。 验证 使用jps可以查看相关进程 显示如下： 1234567nova@ubuntu208:~$ jps7667 Jps28532 DataNode28742 SecondaryNameNode29319 NodeManager28376 NameNode29018 ResourceManager 管理地址 yarn: http://192.168.1.34:8088/cluster hdfs状态: http://192.168.1.34:50070/dfshealth.html#tab-overview","tags":[{"name":"hadoop","slug":"hadoop","permalink":"https://wiki.quartz.ren/tags/hadoop/"}],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"组件安装配置","slug":"数据/数据处理/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"Hadoop组件安装","slug":"数据/数据处理/组件安装配置/Hadoop组件安装","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/Hadoop%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85/"}]},{"title":"常用操作命令与问题记录","date":"2019-02-16T04:56:24.000Z","path":"wk/数据/数据处理/组件安装配置/Hadoop组件安装/4.常用操作与问题记录/","text":"启动hadoop12start-dfs.shstart-yarn.sh 停止hadoop12stop-dfs.shstop-yarn.sh 启动或停止所有，即：HDFS和Yarn 问题记录一、dfs的端口9000不通原因：忘记格式化hdfs。 启动顺序 1.启动hdfs 2.启动yarn 3.启动hbase 二、查看hbase在hdfs中目录时使用hadoop fs -ls /hbase查看hbase目录，出现以下信息： 117/10/28 22:25:28 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable hbase 可以配置使用本地文件系统（一般单击模式），也可以使用hdfs（伪集群或集群模式） hbase 可以配置使用自己安装的zk，也可以使用自带的zk。 hadoop的name、data文件夹下存放什么？","tags":[{"name":"hadoop","slug":"hadoop","permalink":"https://wiki.quartz.ren/tags/hadoop/"},{"name":"hbase","slug":"hbase","permalink":"https://wiki.quartz.ren/tags/hbase/"}],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"组件安装配置","slug":"数据/数据处理/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"Hadoop组件安装","slug":"数据/数据处理/组件安装配置/Hadoop组件安装","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/Hadoop%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85/"}]},{"title":"Reactive","date":"2019-01-08T03:55:57.000Z","path":"wk/平台工具/[3]编程领域/响应式编程/","text":"响应式编程基于事件驱动(事件模式，或者订阅者模式)，类似于Netty异步事件编程模型． 对不同的事件做不同的处理．所有信息都通过一个编程模型处理． 好处传统模型相比 JavaWeb开发，基于Servlet. Servlet3.0之前 线程阻塞模型，只有当业务处理完成并返回后时结束Servlet线程． 3.0规范新特性，支持异步处理－Servlet线程将耗时操作委派给另一个线程完成.在不生成响应的情况下返回至容器．（问题） Guava的EventBus实现订阅者模式，观察者模式 1234567891011121314151617public class EventBusDemo &#123; @Subscribe public void sendMessageByMail(String message) &#123; System.out.println(&quot;邮件发送一条信息：&quot; + message); &#125; @Subscribe public void sendMessageByPhone(String message) &#123; System.out.println(&quot;短信发送一条信息:&quot; + message); &#125; public static void main(String[] args) &#123; EventBus eventBus = new EventBus(); eventBus.register(new EventBusDemo()); eventBus.post(&quot;hi, boys&quot;); &#125;&#125; Mono和Flux常用API都是数据反应式编程的核心组件． Reactor是JVM的完全非阻塞响应式编程基础，具有高效的需求管理（以管理”背压”的形式）它直接与Java 8功能的API，特别是整合CompletableFuture，Stream和 Duration Flux 相当于一个 RxJava Observable 观察者 WebFluxSpring WebFlux是随Spring 5推出的响应式Web框架。 Spring WebFlux快速上手——响应式Spring的道法术器 微服务,部署包大小,应用占用内存大小. Rsocket用于响应式应用程序的新网络协议(应用层协议)． 提供Java，JavaScript，C ++和Kotlin等实现 它是一种基于Reactive Streams背压的双向，多路复用，基于消息的二进制协议 语言无关. 目的该协议专门设计用于与Reactive风格应用配合使用，这些应用程序基本上是非阻塞的，并且通常（但不总是）与异步行为配对 所谓Reactive背压: 即发布者无法向订户发送数据直到该订户已经准备就绪的想法，这是与“异步”的关键区别。（服务端主动） 问题: 很多个客户端对于同一个消息，准备好的时间层次不一，服务端怎么控制这个(这个消息需要一直保存着吗，什么时候清理)． 反应式编程(响应式reactive)是 Java 中高效应用的下一个前沿。但有两个主要障碍 -数据访问和网络。RSocket旨在解决后一个问题，而R2DBC旨在解决前者问题。 响应式应用新协议RSocket iPhone和Andriod手机，与后端服务交互，提供数据统计，所有这些互动模型，http并不是为此设计． http. 超文本传输协议,用于从WWW服务器传输超文本到本地浏览器的传输协议。它可以使浏览器更加高效，使网络传输减少. rest. 基于HTTP的REST服务. restTemplate. 获取http资源, 通过指定的一些格式(json等)． 数据统计收集 消息推送 异步响应 RSocket、. Envoy和. Istio从微服务治理的角度看RSocket、. Envoy和. Istio 重点是把反应流的实现，提升到应用层上来。其实在底层的协议中，就有反应流的实现，tcp的滑动窗口就是很好的例子。 很大一部分的线上故障是由于阻塞链接造成的. 简单的例子是如果所有的通讯都是反应式的，那就不用容断了. 与http不同的四种交互模式 （重点） Fire-and-Forget优化请求/响应，在不需要响应时非常有用，例如非关键事件日志记录。 请求/响应当您发送一个请求并收到一个响应时，就像HTTP一样。即使在这里，该协议也具有优于HTTP的优点，因为它是异步和多路复用的。 请求/流类似于返回集合的请求/响应，集合被回送而不是查询直到完成，因此例如发送银行帐号，用实时的帐户事务流进行响应。 频道允许任意交互模型的双向消息流。 Unix网络编程模型中，底层操作系统的通道都是全双工的，同时支持读写操作． 多路复用的Selector不短的轮询注册在其上的Channel.如果某个Channel上面发生读或者写事件，这个Channel就处于就绪状态，会被Selector轮询出来．然后通过SelectionKey可以获取就绪的Channel的集合，进行后续的I/O操作. TomcatNio 针对网络IO层面的异步－多路复用.(读写) Rsocket是交互模式的异步.(或者说Rsocket的请求和响应与Http的请求和响应有什么区别，优点在那里.) Http的异步通过callBack回调实现.(比如短信交互流程) 客户端使用http发送，短信平台和网关再到运营商都是长链接协议.短信平台受到同一链路上的送达之后．会callBack客户端.客户端收到后，处理回调．如果回调资源处理不当(处理不过来),会导致回调消息丢失． (Rsocket回压场景) 这种http的异步是通过应用程序多次请求实现.再就是客户端层面控制异步. 将请求后的等待丢进线程池或者队列来存储 AsyncCall，然后去做其他的事情． 将 AsycnCall 添加到队列中。将任务交给 Dispatcher 去执行。比如 OKHTTP实现的异步请求． 使用线程池处理异步任务（这种开销太大，很少做）.真正的异步执行者 AsyncCall 使用队列.将 AsycnCall 添加到队列中。将任务交给 Dispatcher 去执行 在使用 Dispatcher 会将 AsyncCall 交给指定的线程去执行，而 AsyncCall 是 NamedRunnable 的子类 OKHTTP异步和同步请求简单分析 Rsocket的异步，理解为没有收到响应，链接保持，但可以做其他事情，受到响应后再做处理.Rsocket天然支持? 深度解读Tomcat中的NIO模型 异步编程：协作性多任务处理","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[3]编程领域","slug":"平台工具/3-编程领域","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/3-%E7%BC%96%E7%A8%8B%E9%A2%86%E5%9F%9F/"}]},{"title":"Vue项目采坑记录","date":"2019-01-08T03:55:57.000Z","path":"wk/平台工具/[3]编程领域/vue/Vue项目问题记录-采坑记/","text":"npm install 失败. 应该是系统某个软件占用了翻墙，导致翻墙失败，在无法翻墙的情况下，安装CNPM 或 直接安装，都无法成功。 使用安装cnpm: npm install -g cnpm —registry=https://registry.npm.taobao.org 然后使用 cnpm install","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[3]编程领域","slug":"平台工具/3-编程领域","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/3-%E7%BC%96%E7%A8%8B%E9%A2%86%E5%9F%9F/"},{"name":"vue","slug":"平台工具/3-编程领域/vue","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/3-%E7%BC%96%E7%A8%8B%E9%A2%86%E5%9F%9F/vue/"}]},{"title":"Vue特性","date":"2019-01-08T03:55:57.000Z","path":"wk/平台工具/[3]编程领域/vue/Vue特性/","text":"声明式渲染Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统： 文本插值 数据和 DOM 建立关联，所有东西都是响应式的。 绑定元素特性 v-bind 特性被称为指令。指令带有前缀 v-，以表示它们是 Vue 提供的特殊特性 条件与循环 控制切换一个元素是否显示 我们不仅可以把数据绑定到 DOM 文本或特性，还可以绑定到 DOM 结构。此外，Vue 也提供一个强大的过渡效果系统，可以在 Vue 插入/更新/移除元素时自动应用过渡效果。 还有其它很多指令，每个都有特殊的功能。例如，v-for 指令可以绑定数组的数据来渲染一个项目列表： 1234567&lt;div id=&quot;app-4&quot;&gt; &lt;ol&gt; &lt;li v-for=&quot;todo in todos&quot;&gt; &#123;&#123; todo.text &#125;&#125; &lt;/li&gt; &lt;/ol&gt;&lt;/div&gt; 处理用户输入 为了让用户和你的应用进行交互，我们可以用 v-on 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法： Vue 还提供了 v-model 指令，它能轻松实现表单输入和应用状态之间的双向绑定。 组件化应用构建组件系统是 Vue的另一个重要概念， 因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树： 在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。在 Vue 中注册组件很简单：","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[3]编程领域","slug":"平台工具/3-编程领域","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/3-%E7%BC%96%E7%A8%8B%E9%A2%86%E5%9F%9F/"},{"name":"vue","slug":"平台工具/3-编程领域/vue","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/3-%E7%BC%96%E7%A8%8B%E9%A2%86%E5%9F%9F/vue/"}]},{"title":"开发工具","date":"2019-01-08T03:55:57.000Z","path":"wk/平台工具/中间件_组件/IDE/开发工具/","text":"好用的开发工具dbeaver https://nosqlbooster.com/downloads","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"IDE","slug":"平台工具/中间件-组件/IDE","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/IDE/"}]},{"title":"前端框架选择方案","date":"2019-01-08T03:55:57.000Z","path":"wk/平台工具/中间件_组件/前端方案/前端框架记录/","text":"*后台方案 Github上 10 个开源免费且优秀的后台控制面板（接私活必备哦）java钢铁侠-马克51号 链接 AntVAntV 是蚂蚁金服全新一代数据可视化解决方案，致力于提供一套简单方便、专业可靠、无限可能的数据可视化最佳实践。 比较完善的各个场景的方案。 G2可视化引擎 G6图可视化方案 G2Plot开箱即用的图表库 L7 空间数据可视分析. 图表魔方,图表的生成ChartCube 将用户的gps信息 使用flink统计保存。然后将坏人的信息保存。 AntV文档 AntD Adminhttps://antd-admin.zuiidea.com/zh/dashboard 中后台解决方案. 中后台解决方案Fusion Adminui后台管理系统。基于Bootstrap3.3.6。 echartsjs图可视化方案. element-ui重点https://ruoyi.setworld.net/system/userhttps://gitee.com/fuzui/RuoYi-Antdv?_from=gitee_search https://gitee.com/big-hedgehog/aidex-sharp 深度关系探索、关联分析、路径搜索、特征抽取、数据聚类、社区检测、 知识图谱等，适用业务领域有如网络安全、电信诈骗、金融风控、广告推荐、社交网络和智能机器人 fantastic-admin [推荐指数 *] 半付费.Vue中后台管理系统框架. 兼容PC、移动端.https://gitee.com/hooray/fantastic-admin Vue 更适合 中后台项目. react 适合大型前端项目, 性能更好些.","tags":[{"name":"后台系统方案","slug":"后台系统方案","permalink":"https://wiki.quartz.ren/tags/%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E6%96%B9%E6%A1%88/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"前端方案","slug":"平台工具/中间件-组件/前端方案","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/%E5%89%8D%E7%AB%AF%E6%96%B9%E6%A1%88/"}]},{"title":"ssh免密登录","date":"2019-01-08T03:55:57.000Z","path":"wk/数据/数据处理/组件安装配置/Hadoop组件安装/1.配置ssh免密登录/","text":"1.首先查看电脑的SSH Keys是否存在 1ls -al ~/.ssh 2.存在以下文件则说明key已生成 12-rw------- 1 zbm zbm 1675 Oct 28 11:04 id_rsa-rw-r--r-- 1 zbm zbm 399 Oct 28 11:04 id_rsa.pub 3.否则生成key: 1ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 4.之后配置免密登陆：即将pub key put到远程服务器。输入密码，之后每次就可免密登陆。 1ssh-copy-id -i ~/.ssh/id_rsa.pub &lt;romte_ip&gt;","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"组件安装配置","slug":"数据/数据处理/组件安装配置","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"},{"name":"Hadoop组件安装","slug":"数据/数据处理/组件安装配置/Hadoop组件安装","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/Hadoop%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85/"}]},{"title":"1.ES介绍","date":"2018-12-15T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Elasticsearch/1.ES介绍/","text":"es核心介绍 Elasticsearch Clients Kibana 用户手册 Es介绍 elasticsearch百科 Elasticsearch－基础介绍及索引原理分析 推荐google浏览器的json浏览工具:chrome://extensions/ JSON Viewer0.18.0","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Elasticsearch","slug":"数据/数据处理/DataStore/Elasticsearch","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Elasticsearch/"}]},{"title":"5.Logstash安装","date":"2018-12-15T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Elasticsearch/5.Logstash安装/","text":"logstash是做数据采集的，类似于flume。 官网logstash介绍 下载地址 解压后执行一下命令,查看效果: 1bin/logstash -e &#x27;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&#x27; 安装logstash-input-jdbc参考 logstash-input-jdbc插件是logstash 的一个个插件。 使用ruby语言开发. 安装gem, 替换淘宝镜像 123456安装gemsudo apt install gemsudo apt install rubygem -vgem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/gem sources -l RubyGems镜像站 查看logstash可用插件 1bin/logstash-plugin list --verbose 以上找到对应的版本. 查看相应的文档https://www.elastic.co/guide/en/logstash-versioned-plugins/current/v4.3.9-plugins-inputs-jdbc.html 安装命令 1bin/logstash-plugin install logstash-input-jdbc 使用实现mysql数据同步到Elasticsearch 需要一个mysql驱动包，sql文件,以及conf配置文件 sql文件 bank_sync.sql 1234567SELECT t.id, t.`code`, t.`name`, t.per_day_limitFROM tb_bank_type t mysql.conf文件 12345678910111213141516171819202122232425262728293031323334353637input &#123; jdbc &#123; # mysql jdbc connection string to our backup databse jdbc_connection_string =&gt; &quot;jdbc:mysql://127.0.0.1:3306/carinsurance&quot; # the user we wish to excute our statement as jdbc_user =&gt; &quot;carinsurance&quot; jdbc_password =&gt; &quot;123456&quot; # the path to our downloaded jdbc driver jdbc_driver_library =&gt; &quot;/opt/elasticsearch/logstash-6.2.2/sql/mysql-connector-java-5.1.40.jar&quot; # the name of the driver class for mysql jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot; jdbc_paging_enabled =&gt; &quot;true&quot; jdbc_page_size =&gt; &quot;50000&quot; statement_filepath =&gt; &quot;/opt/elasticsearch/logstash-6.2.2/sql/bank_sync.sql&quot; schedule =&gt; &quot;*/1 * * * *&quot; type =&gt; &quot;jdbc&quot; &#125;&#125;filter &#123; json &#123; source =&gt; &quot;message&quot; remove_field =&gt; [&quot;message&quot;] &#125;&#125;output &#123; elasticsearch &#123; hosts =&gt; &quot;127.0.0.1:9200&quot; index =&gt; &quot;bank&quot; document_id =&gt; &quot;%&#123;id&#125;&quot; &#125; stdout &#123; codec =&gt; json_lines &#125;&#125; 上面配置文件中的sql文件和mysql驱动注意路径正确 启动logstash 123bin/logstash -f mysql.conf 后台启动: nohup ./logstash -f mysql.conf &gt; /dev/null 2&gt;&amp;1 &amp;nohup bin/logstash -f sync-data/mysql.conf &amp; 注意: es需要外网访问,同kibana,需要配置如下: 1network.host: 0.0.0.0 配置以上后出现问题: 系统最大文件描述符限制,最大虚拟内存限制 解决: 12345678vi /etc/security/limits.conf 将65535 改为65536root用户执行以下:vi /etc/sysctl.conf 添加一下配置vm.max_map_count=655360使其生效sysctl -p 应用【技术实验】mysql准实时同步数据到Elasticsearch 全文搜索引擎 Elasticsearch （三）logstash-input-jdbc同步数据 到elasticsearch","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Elasticsearch","slug":"数据/数据处理/DataStore/Elasticsearch","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Elasticsearch/"}]},{"title":"Redis常用操作","date":"2018-12-14T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Redis/Redis常用操作/","text":"Redis开发运维实践指南 monitor1redis-cli -p 6380 monitor info123456789101112131415Server：运行的redis实例一些信息，包括：redis版本，操作系统信息，端口，GCC版本，配置文件路径等；Clients：redis客户端信息，包括：已连接客户端数量，阻塞客户端数量等；Memory：使用内存，峰值内存，内存碎片率，内存分配方式。这几个参数都非常重要；Persistence：AOF和RDB持久化信息；Stats：一些统计信息，最重要三个参数：OPS(instantaneous_ops_per_sec)，keyspace_hits和keyspace_misses两个参数反应缓存命中率；Replication：redis集群信息；CPU：CPU相关信息；Keyspace：redis中各个DB里key的信息； configconfig是一个非常有价值的命令，主要体现在对redis的运维。因为生产环境一般是不允许随意重启的，不能因为需要调优一些参数就修改conf配置文件并重启。redis作者早就想到了这一点，通过config命令能热修改一些配置，不需要重启redis实例，可以通过如下命令查看哪些参数可以热修改： 1config get * 热修改就比较容易了，执行如下命令即可： 1config set 这样修改的话，如果以后由于某些原因redis实例故障需要重启，那通过config热修改的参数就会被配置文件中的参数覆盖，所以我们需要通过一个命令将config热修改的参数刷到redis配置文件中持久化，通过执行如下命令即可：1config rewrite","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Redis","slug":"数据/数据处理/DataStore/Redis","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Redis/"}]},{"title":"5.docker系统镜像[D]","date":"2018-12-14T13:55:57.000Z","path":"wk/平台工具/中间件_组件/Docker/005.系统镜像/","text":"Ubuntu镜像地址 拉取镜像 启动镜像 在镜像中操作1docker run -i -t ubuntu bash CentOS下载镜像1docker pull centos:6.8 启动容器1docker run -ti --name centos001 centos:6.8 /bin/bash 安装软件12345vi 、 sshdyum install viyum install openssh-server 查看是否启动 123/etc/init.d/sshd statusservice sshd start","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Docker","slug":"平台工具/中间件-组件/Docker","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Docker/"}]},{"title":"2.Ubuntu16安装Docker[D]","date":"2018-12-12T03:55:57.000Z","path":"wk/平台工具/中间件_组件/Docker/002.Docker环境-Ubuntu16安装Docker环境/","text":"之前每次安装都是上网查查资料，每次待找半天。所以在这里总结下。首先Docker在Ubuntu下的安装分为以下几个步骤： 添加Docker源 安装aufs驱动linux-image-extra 安装Docker 安装后的设置 Docker更新 添加Docker源解释一下。使用Ubuntu在命令行可以直接安装Docker，但是一般都是老一些的版本，而且下载缓慢。所以换Docker源很有必要。 具体操作如下： 123456789101112131415sudo apt-get update# 增加CA证书sudo apt-get install apt-transport-https ca-certificates# 添加GPG Key(一种加密手段)sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D# 添加docker的源echo &quot;deb https://apt.dockerproject.org/repo ubuntu-xenial main&quot; &gt; /etc/apt/sources.list.d/docker.list或echo &quot;deb https://apt.dockerproject.org/repo ubuntu-xenial main&quot; | sudo tee /etc/apt/sources.list.d/docker.list# 再次更新源sudo apt-get update# 清除过时源（以防万一）sudo apt-get purge lxc-docker# 验证APT是从正确的库源下载应用apt-cache policy docker-engine 安装aufs驱动linux-image-extraFor Ubuntu Trusty, Wily, and Xenial, it’s recommended to install the linux-image-extra kernel package. The linux-image-extra package allows you use the aufs storage driver可以实现容器间可执行文件和运行库的共享。 1sudo apt-get install linux-image-extra-$(uname -r) 安装Docker12sudo apt-get updatesudo apt-get install docker-engine 安装后的设置将用户添加到docker组中，避免每次都是用sudo。 1sudo usermod -aG docker $&#123;user&#125; Docker更新1234# 更新Dockersudo apt-get upgrade docker-engine# 卸载Dockersudo apt-get purge docker-engine","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Docker","slug":"平台工具/中间件-组件/Docker","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Docker/"}]},{"title":"4.Dockerfile语法","date":"2018-12-12T03:55:57.000Z","path":"wk/平台工具/中间件_组件/Docker/004.Dockerfile语法/","text":"Dockerfile创建镜像 Dockerfile 1234567891011121314151617181920212223242526# This dockerfile uses the ubuntu image# VERSION 2 - EDITION 1# Author: docker_user# Command format: Instruction [arguments / command] ..# Base image to use, this must be set as the first lineFROM ubuntu# Maintainer: docker_user &lt;docker_user at email.com&gt; (@docker_user)MAINTAINER docker_user docker_user@email.com# Commands to update the image#RUN echo &quot;deb http://archive.ubuntu.com/ubuntu/ raring main universe&quot; &gt;&gt; /etc/apt/sources.list#RUN apt-get update &amp;&amp; apt-get install -y nginx#RUN echo &quot;\\ndaemon off;&quot; &gt;&gt; /etc/nginx/nginx.conf# Commands when creating a new container#CMD /usr/sbin/nginxENV JAVA_HOME=/opt/tools/jdk1.8.0_131ENV PATH=$JAVA_HOME/bin:$PATHENV CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar# docker build -t nova/jdk .# docker run -it --name my-java -d java","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Docker","slug":"平台工具/中间件-组件/Docker","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Docker/"}]},{"title":"3.Docker环境其他中间件使用","date":"2018-12-12T03:55:57.000Z","path":"wk/平台工具/中间件_组件/Docker/003.Docker环境其他中间件使用/","text":"1. Docker镜像仓库搭建123456789101112mkdir -p /opt/data/registry //创建目录docker run -d \\ -p 5000:5000 \\ --restart=always \\ --name docker-registry \\ -v /data/docker-registry:/var/lib/registry \\ registry:2-d : 让容器可以后台运行-p ：指定映射端口（前者是宿主机的端口号，后者是容器的端口号）-v ：数据挂载（前者是宿主机的目录，后者是容器的目录）--name : 为运行的容器命名 2. redis12docker run --name some-redis -d redis docker run -d --name redis-server -p 6379:6379 redis --requirepass &quot;mypassword&quot; 3. mysql阿里云镜像仓库地址 配置docker使用阿里云镜像地址 获取镜像1docker pull mysql 启动镜像 1docker run --name mysql-server -p 3306:3306 -e MYSQL_ROOT_PASSWORD=zhangquanquan -d mysql 参数指定root用户密码 验证 进入容器，登录mysql，可以看到123456789Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 3Server version: 5.7.20 MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners. mysql创建用户并授权1234create database ibase4j; create user ibase; grant all privileges on ibase4j.* to ibase@&#x27;192.168.1.7&#x27; identified by &#x27;ibase&#x27;; flush privileges; 4. elasticsearch1docker run -d elasticsearch es的python 客户端 Elasticsearch Clients Elasticsearch集群和索引常用命令 5. zookeeper1docker run --name some-zookeeper -p 2181:2181 --restart always -d zookeeper 6. nexusnexus官方镜像 1docker pull registry.cn-hangzhou.aliyuncs.com/nichozuo/nexus 123456789docker run \\ --detach \\ --name nexus \\ --restart always \\ --publish 8081:8081 \\ --env CONTEXT_PATH=/nexus \\ --volume /opt/tools/nexus:/sonatype-work \\ --volume /etc/localtime:/etc/localtime:ro \\ registry.cn-hangzhou.aliyuncs.com/nichozuo/nexus 镜像启动见链接以上地址 7. neo4j1docker run -d --name neo4j-server -p 7474:7474 -p 7687:7687 -v /home/neo4j/data:/data -v /home/neo4j/logs:/logs -v /home/neo4j/conf:/var/lib/neo4j/conf -v /home/neo4j/import:/var/lib/neo4j/import --env NEO4J_AUTH=neo4j/zhangquanquan neo4j 8. phpmyadmin12docker run --name myadmin -d -e PMA_HOST=172.17.0.2 phpmyadmin/phpmyadmin docker run --name yst_myadmin -d -e PMA_HOST=10.10.73.109 phpmyadmin/phpmyadmin 9. pika12345678docker pull pikadb/pika:v3.2.2# 或者 docker pull wxstc/pika-alpine [镜像小一些]docker run -p 6399:9221 --name pika-server --hostname pika \\-d pikadb/pika:v3.2.2 \\./bin/pika -c conf/pika.conf Docker 搭建Pika分片多主集群 10. rabbitmq123docker run -d --hostname my-rabbit --name some-rabbit rabbitmqdocker run -d --hostname rabbit001 --name myrabbit -e RABBITMQ_DEFAULT_USER=admin \\-e RABBITMQ_DEFAULT_PASS=admin123 -p 5672:5672 rabbitmq 11. nacos","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Docker","slug":"平台工具/中间件-组件/Docker","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Docker/"}]},{"title":"6.Docker NetWork","date":"2018-12-12T03:55:57.000Z","path":"wk/平台工具/中间件_组件/Docker/006.Docker网络/","text":"docker容器跨主机互联小实验 docker 多种跨主机访问选择哪一种 理解Docker跨多主机容器网络 Docker rabbit12docker run -d --hostname my-rabbit --name rabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=password -p 15672:15672 -p 5672:5672 -p 25672:25672 -p 61613:61613 -p 1883:1883 rabbitmq:management Docker redis1docker run -d --name redis-server -p 6379:6379 redis --requirepass &quot;password&quot;","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Docker","slug":"平台工具/中间件-组件/Docker","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Docker/"}]},{"title":"ELK","date":"2018-12-09T03:55:57.000Z","path":"wk/数据/数据处理/数据收集/ELK/","text":"Docker快速搭建elk服务镜像","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"数据收集","slug":"数据/数据处理/数据收集","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86/"}]},{"title":"Python常用函数","date":"2018-12-09T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Python/基础操作/","text":"shape读取矩阵的长度. shape函数是numpy.core.fromnumeric中的函数，它的功能是读取矩阵的长度，比如shape[0]就是读取矩阵第一维度的长度。shape的输入参数可以是一个整数（表示维度），也可以是一个矩阵。以下例子可能会好理解一些： Python numpy函数：shape用法 mat创建矩阵 python中的mat的操作","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"平台工具/2-计算机基础/编程语言/Python","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"}]},{"title":"其他算法","date":"2018-12-07T14:55:57.000Z","path":"wk/算法/001.机器学习/机器学习100天/5.其他算法/","text":"Java中的字符串相似度","tags":[],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"机器学习100天","slug":"算法/001-机器学习/机器学习100天","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0100%E5%A4%A9/"}]},{"title":"Tcp,Ip及其应用","date":"2018-12-04T15:11:57.000Z","path":"wk/项目管理/软件工程/计算机网络/TCP-IP及应用问题/","text":"SocketRead问题针对线程处于 at java.net.SocketInputStream.socketRead0(Native Method) , java.lang.Thread.State: RUNNABLE. 123456789&quot;http-nio-10251-exec-1213&quot; #86023 daemon prio=5 os_prio=0 tid=0x00007f838c0f8000 nid=0x1f9 runnable [0x00007f83693bd000] java.lang.Thread.State: RUNNABLE at java.net.SocketInputStream.socketRead0(Native Method) at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) at java.net.SocketInputStream.read(SocketInputStream.java:171) at java.net.SocketInputStream.read(SocketInputStream.java:141) at sun.security.ssl.InputRecord.readFully(InputRecord.java:465)... 关于TCP交互流程与客户端服务端状态 TimeWait,CloseWait 有没有问题","tags":[],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"软件工程","slug":"项目管理/软件工程","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"计算机网络","slug":"项目管理/软件工程/计算机网络","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"Kafka问题总结","date":"2018-12-04T15:11:57.000Z","path":"wk/数据/数据处理/DataStore/Kafka/关于最近kafka的几个问题/","text":"consumer提交offset失败使用spring-kafka, 配置auto.commit =true 会使用kafka.client的 自动提交机制(5秒钟提交一次-具体细节TODO). 然而一定时间取出的消息没有处理完,长时间没能提交成功??? 现象: offset没有提交成功, consumer的协调者处于dead状态, 恢复后但还能正常消费,但offset一直未能提交. Socket一个线程导致消费挂起现象: Socket一直处于read状态,导致往队列push消息失败,取出来的消息也没有处理, 没有提交offset. 可能1. socket read timeout 设置后, 其他线程就处于 Timewait 状态,但是 实际设置connect 超时时间在 socket 超时时间之后, 所以没有超时时间相当于.","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Kafka","slug":"数据/数据处理/DataStore/Kafka","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Kafka/"}]},{"title":"机器学习认识","date":"2018-12-02T14:55:57.000Z","path":"wk/算法/001.机器学习/009.一些杂文/1.机器学习认识/","text":"传统上认为，让计算机完成某一件事情的唯一方法，就是详细的记录某个算法（就是一系列的指令，告诉计算机能做什么），并解释其如何运行。 但机器学习算法不一样：通过从数据中推断，计算机自己会弄明白该怎么做。掌握的数据越多，它们的工作就越顺利。现在我们不给计算机编程。它们自己给自己编程。 机器学习是以数据为依据，数据越多，能学的也越多、没有数据，那就什么也学不到。有了大数据？那就有太多的东西可以学习。 只要有足够的数据，一段只有几百行代码的程序可以轻易生成几百万代码的程序。而且可以不同问题持续的去编写不同的程序。 机器学习有时会和人工智能混淆。严格来说，机器学习是人工智能的子集，但机器学习发展如此壮大且成功，现已超越以前它引以为傲的母领域。人工智能的目标是教会计算机做现在人类能做的事，并且做的更好。而机器学习可以说就是其中最重要的事：不持续学习。计算机就永远无法跟上人类的步伐，有了学习，一切都与时俱进。 知乎-机器学习该怎么入门 机器学习入门资源不完全汇总","tags":[{"name":"机器学习","slug":"机器学习","permalink":"https://wiki.quartz.ren/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"009.一些杂文","slug":"算法/001-机器学习/009-一些杂文","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/009-%E4%B8%80%E4%BA%9B%E6%9D%82%E6%96%87/"}]},{"title":"Logistic回归","date":"2018-12-02T14:55:57.000Z","path":"wk/算法/001.机器学习/机器学习100天/3.Logistic回归/","text":"概述回归: 假设有一组数据点,用一条直线对这些点进行拟合,这个拟合过程就是回归.回归一词源于最佳拟合,表示要找到最佳拟合参数. 训练分类器的做法就是寻找最佳拟合参数. 使用的一些优化算法: 梯度上升法,最小二乘法. 最优化算法1. 最小二乘法向量运算进行参数求解过程 损失函数,给定数据X,Y, 根据aX 的出的Y1 与Y之间的偏差,称为损失.怎么将这个损失降到最低. 首先定义这损失,线性空间的距离,通过欧几里得距离定义这个损失. 损失最小化: 对损失函数求导,得到参数方程. 进行参数计算. 2. 梯度下降为什么梯度下降是必须的? 最小二乘法参数计算的问题: 矩阵是否满秩 运算性能 梯度下降不仅限于线性回归. 经过多次的重复, 比直接运算(参数计算)的优点.","tags":[{"name":"TML","slug":"TML","permalink":"https://wiki.quartz.ren/tags/TML/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"机器学习100天","slug":"算法/001-机器学习/机器学习100天","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0100%E5%A4%A9/"}]},{"title":"Nlp认识","date":"2018-12-02T14:55:57.000Z","path":"wk/算法/001.机器学习/NLP/Nlp认识/","text":"七大NLP技术 技术1：文本嵌入（Text Embeddings）在传统的NLP中，我们将单词视为离散符号，然后可以用one-hot向量表示。向量的维度是整个词汇表中单词的数量。单词作为离散符号的问题在于，对于one-hot向量来说，没有自然的相似性概念。因此，另一种方法是学习在向量本身中编码相似性。核心思想是一个词的含义是由经常出现在其旁边的单词给出的。 技术2：机器翻译机器翻译是语言理解的经典测试。它由语言分析和语言生成组成。大型机器翻译系统具有巨大的商业用途。 1.端到端训练2.分布式表示的优势3.更好地探索上下文4.更流利的文本生成 技巧3：Dialogue和Conversations技术4：情绪分析用于情感分析的现代深度学习方法可用于形态学、语法和逻辑语义，其中最有效的是递归神经网络。顾名思义，递归神经网络开发的主要假设递归是描述语言的自然方式。递归在消歧方面很有用，有助于某些任务引用特定的短语，并且对于使用语法树结构的任务非常有效。 技术5：问答系统问答（QA）系统的想法是直接从文档、对话、在线搜索和其他地方提取信息，以满足用户的信息需求。QA系统不是让用户阅读整个文档，而是更喜欢简短而简洁的答案。如今，QA系统可以非常容易地与其他NLP系统结合使用，并且一些QA系统甚至超越了对文本文档的搜索，并且可以从图片集合中提取信息。 强大的深度学习架构（称为动态内存网络（DMN））已针对QA问题进行了专门开发和优化。给定输入序列（知识）和问题的训练集，它可以形成情节记忆，并使用它们来产生相关答案。该体系结构具有以下组件： ·语义内存模块（类似于知识库）被用来创建从输入句子的嵌入字序列预先训练手套载体。 ·输入模块处理与问题有关的输入矢量称为事实。该模块使用门控循环单元实现，GRU使网络能够了解当前正在考虑的句子是否相关或与答案无关。 ·问题模块逐字处理疑问词，并且使用输出相同权重的GRU输入模块的向量。事实和问题都被编码为嵌入。 ·情景记忆模块接收从输入中提取和编码的嵌入事实和问题载体。这使用了一个受大脑海马体启发的想法，它可以检索由某些反应触发的时间状态，如景点或声音。 ·答案生成模块，通过适当的响应，情景记忆应该包含回答问题所需的所有信息。该模块使用另一个GRU，使用正确序列的交叉熵错误分类进行训练，然后可以将其转换回自然语言。 技术6：文本摘要人类很难手动汇总大型文本文档。文本摘要是NLP为源文档创建简短、准确和流畅的摘要问题。随着推送通知和文章摘要获得越来越多的注意力，为长文本生成智能且准确摘要的任务每天都在增长。 文本摘要有两种基本方法：提取和抽象。前者从原始文本中提取单词和单词短语以创建摘要。后者是学习内部语言表示以生成更像人类的摘要，解释原始文本的意图。","tags":[{"name":"NLP","slug":"NLP","permalink":"https://wiki.quartz.ren/tags/NLP/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"NLP","slug":"算法/001-机器学习/NLP","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NLP/"}]},{"title":"数据处理相关","date":"2018-12-02T03:55:57.000Z","path":"wk/数据/数据处理/技术文章/Start/","text":"https://www.iteblog.com/archives/1947.html 事件驱动编程、消息驱动编程、数据驱动编程 不错的概念解释","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"技术文章","slug":"数据/数据处理/技术文章","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"}]},{"title":"sbt了解","date":"2018-12-02T03:55:57.000Z","path":"wk/平台工具/中间件_组件/Builder/sbt/","text":"下载安装:https://www.scala-sbt.org/download.html sbt是类似ANT、MAVEN的构建工具，全称为Simple build tool，是Scala事实上的标准构建工具。 主要特性: 原生支持编译Scala代码和与诸多Scala测试框架进行交互； 使用Scala编写的DSL（领域特定语言）构建描述 使用Ivy作为库管理工具 持续编译、测试和部署 整合scala解释器快速迭代和调试 支持Java与Scala混合的项目 加速 SBT 下载依赖库的速度 sbt介绍与构建Scala项目","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Builder","slug":"平台工具/中间件-组件/Builder","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Builder/"}]},{"title":"AdaBoost算法","date":"2018-12-02T03:55:57.000Z","path":"wk/算法/001.机器学习/009.一些杂文/4.利用AdaBoost元算法提高分类性能/","text":"组合相似的分类器来提高分类性能 应用AdaBoost算法 处理非均衡分类问题 概述元算法: 对其他算法进行组合的一种方式. 代表-AdaBoost 不同分类器的集成方法: boosting方法(代表-AdaBoost) 非均衡分类问题 基于数据集多重抽样的分类器学习了常见的分类算法:KNN,决策树,朴素贝叶斯,logistic回归.他们各有优缺点,可以将不同的分类器进行组合,而这种组合结果就被称为集成方法或者元算法. 1. bagging基于数据随机重抽样的分类器构建方法 是从原始数据集选择S次后得到S个数据集的一种技术,新数据集和原数据集的大小相等. 一种先进的bagging方法 - 随机森林 2. boosting类似bagging技术. 不管是boosting还是bagging,所使用的多个分类器的类型都是一致的,但是在前者当中,不同分类器是通过串行训练而获得的,每个新分类器都根据已训练出的分类器的性能进行训练. boosting是通过集中关注被已有分类器错分的那些数据来获得新的分类器. 由于boosting分类的结果是基于所有分类器的加权求和结果的,因此boosting与bagging不太一样. bagging中的分类器权重是相等的,而boosting中的分类器权重并不相等,每个权重代表的是其对应分类器在上一轮迭代中的成功度. boosting方法拥有多个版本,本文只关注一个最流行的版本AdaBoost. AdaBoost一般流程 1234561. 收集数据2. 准备数据: 依赖于所使用的弱分类器类型,比如单层决策树,这种分类器可以处理任何数据类型.(作为弱分类器,简单分类器的效果更好)3. 分析数据4. 训练算法: AdaBoost的大部分时间都用在训练上,分类器将多次在同一数据集上训练弱分类器5. 测试算法: 计算分类的错误率6. 使用算法:同SVM一样,AdaBoost预测两个类别中的一个.如果想把它应用到多个类别的场合,那么就要像多累SVM中的做法一样对AdaBoost进行修改 关于分类性能度量指标:正确率\\召回率及ROC曲线. 128p. 基于代价函数的分类器决策控制. p131 处理非均衡问题的数据抽样方法 p132 代码:https://github.com/quantumcs/Machine-Learning-In-Action/tree/master/Ch07","tags":[{"name":"TML","slug":"TML","permalink":"https://wiki.quartz.ren/tags/TML/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"009.一些杂文","slug":"算法/001-机器学习/009-一些杂文","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/009-%E4%B8%80%E4%BA%9B%E6%9D%82%E6%96%87/"}]},{"title":"KNN","date":"2018-12-02T03:55:57.000Z","path":"wk/算法/001.机器学习/机器学习100天/2.KNN/","text":"概述简单的说,K-近邻算法采用测量不同特征值之间的距离方法进行分类. 工作原理: 存在一个样本数据集合, 也称作训练样本集, 并且样本集中的每个数据都存在标签(即我们知道样本集中每一数据与所属分类的对应关系),输入没有标签的新数据后.将新数据的每个特征与样本集中数据对应的特征进行比较,然后算法提取样本集中特征最相似数据(最近邻)的分类标签. 特性: 优点: 精度高,对异常值不敏感,无数据输入假设 缺点,计算复杂度高,空间复杂度高 使用数据范围: 数值型和标称型. 举例使用KNN 分类爱情片和动作片.基于电影中出现的亲吻,打斗出现的次数,使用k-近邻构造程序. 训练样本集: A 打斗镜头: 3 接吻镜头: 104 电影类型 : 爱情片B 打斗镜头: 2 接吻镜头: 100 电影类型 : 爱情片C 打斗镜头: 1 接吻镜头: 81 电影类型 : 爱情片D 打斗镜头: 101 接吻镜头: 10 电影类型 : 动作片E 打斗镜头: 99 接吻镜头: 5 电影类型 : 动作片F 打斗镜头: 98 接吻镜头: 2 电影类型 : 动作片G 打斗镜头: 18 接吻镜头: 90 电影类型 : ? 已知类型电影 (A,B,C,D,E,F) 与 未知类型电影(G) 的距离如下. 距离怎么定义的?? (二维空间的绝对距离?) A 与 G 的距离 : 20.5B 与 G 的距离 : 18.7C 与 G 的距离 : 19.2D 与 G 的距离 : 115.3E 与 G 的距离 : 117.4F 与 G 的距离 : 118.9 现在得到了样本集中所有电影与未知电影的距离,按照距离递增排序, 可以找到k个距离最近的电影.假设k=3, 则最近的三个电影依次为: F,E,D. 而 这三个都是爱情片, 因此我们判断未知电影为爱情片. 算法实现 收集数据 准备数据: 距离计算所需要的数值,最好是结构化的数据格式 分析数据 训练算法: k近邻不适用 测试算法: 计算错误率 使用算法 这里只介绍最后的算法使用步骤:实施KNN分类算法. 主要函数功能为: 使用k-近邻算法将每组数据划分到某个类别中.步骤如下 123456对未知类别属性的数据集中的每个点依次执行以下操作:1. 计算已知类别数据集中的点与当前点之间的距离2. 按照距离递增次序排序3. 选取与当前点距离最小的k个点4. 确定前k个点所在类别的出现频率 5. 返回前k个点出现频率最高的类别作为当前点的预测分类. python函数如下: 1234567891011121314def classify0(inX, dataSet, labels, k): dataSetSize = dataSet.shape[0] // 距离计算 diffMat = tile(inX, (dataSetSize, 1)) - dataSet sqDiffMat = diffMat ** 2 sqDistances = sqDiffMat.sum(axis=1) disstances = sqDistances.argsort() classCount=&#123;&#125; // 选择距离最小的k个点 for i in rang(k): voteIlabel = labels[sortedDistIndicies[i]] classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1 sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(1), reverse=True) return sortedClassCount[0][0] 其它代码见:https://github.com/quantumcs/Machine-Learning-In-Action 算法测试有关数据收集 文本数据的转换及处理etc. 其它的一些应用 约会网站的配对 手写识别系统 问题1. 一个简单的模型,存在的问题现有一个模型, 针对每个新的句子,使用相似度算出与已知样本集中每个句子的相似度. 而已知样本集只有一个类别(也就是说都是负样本). 取最大的相似度值,和阈值比较,大于阈值的定义同一个类别,小于阈值的定为不同类别. 存在的问题: 1. 没有考虑正样本,这个策略效果肯定存在提升. 2. 另外的提升思路: 对句子做预处理,去除变化较大的实体,降低对相似性的影响.","tags":[{"name":"TML","slug":"TML","permalink":"https://wiki.quartz.ren/tags/TML/"}],"categories":[{"name":"算法","slug":"算法","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/"},{"name":"001.机器学习","slug":"算法/001-机器学习","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"机器学习100天","slug":"算法/001-机器学习/机器学习100天","permalink":"https://wiki.quartz.ren/categories/%E7%AE%97%E6%B3%95/001-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0100%E5%A4%A9/"}]},{"title":"Kafak监控","date":"2018-12-02T03:55:57.000Z","path":"wk/数据/数据处理/DataStore/Kafka/Kakfa监控/","text":"推荐的监控工具kafka-offset-monitor Python实现监控123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196topics = [&#x27;heimdallr-dev&#x27;]# 要监控的groupidmonitor_group_ids = [&#x27;heimdallr&#x27;]# broker-listservers = &#x27;localhost:9092&#x27;# 监控数据上报间隔 秒time_interval = 10# 历史全量数据上报间隔history_time_interval = 5 * 60# -*- coding:utf-8 -*-import timeimport sysfrom kafka.client import KafkaClientfrom kafka.protocol.commit import OffsetFetchRequest_v1, OffsetFetchResponse_v1, OffsetFetchRequest_v0, \\ OffsetFetchResponse_v0from kafka.protocol.offset import OffsetRequest_v0, OffsetResponse_v0#from monitor_constants import *duration = 0client = Noneconn = Nonepartition_cache = &#123;&#125;brokers_cache = []kafka_type = [&#x27;heimdallr&#x27;]zk_type = []def get_brokers(): if not brokers_cache: brokers = client.cluster.brokers() if brokers: brokers_cache.extend([x.nodeId for x in brokers]) return brokers_cachedef get_partitions(topic): if not partition_cache or topic not in partition_cache: partitions = client.cluster.available_partitions_for_topic(topic) if partitions: partition_cache[topic] = [x for x in partitions] else: return [] return partition_cache[topic]def get_logsize(): &quot;&quot;&quot; 获取topic 下每个partition的logsize(各个broker的累加) :return: &quot;&quot;&quot; tp = &#123;&#125; # topic : partition_dict brokers = get_brokers() for topic in topics: partitions = get_partitions(topic) pl = &#123;&#125; # partition : logsize for broker in brokers: # 这里取笛卡尔积可能有问题,但是不影响parse中解析了 for partition in partitions: client.send(broker, OffsetRequest_v0(replica_id=-1, topics=[(topic, [(partition, -1, 1)])])) responses = client.poll() pdict = parse_logsize(topic, partition, responses) append(pl, pdict) tp[topic] = pl return tpdef append(rdict, pdict): if rdict: # 已经有记录,累加 for k, v in pdict.items(): if k in rdict: rdict[k] = rdict[k] + v else: rdict[k] = v else: rdict.update(pdict)def parse_logsize(t, p, responses): &quot;&quot;&quot; 单个broker中单个partition的logsize :param responses: :param p: :param t: :return: &quot;&quot;&quot; for response in responses: if not isinstance(response, OffsetResponse_v0): return &#123;&#125; tps = response.topics topic = tps[0][0] partition_list = tps[0][1] partition = partition_list[0][0] # 异步poll来的数据可能不准 if topic == t and partition == p and partition_list[0][1] == 0: logsize_list = partition_list[0][2] logsize = logsize_list[0] return &#123;partition: logsize&#125; return &#123;&#125;def parse_offsets(t, responses): dr = &#123;&#125; for response in responses: if not isinstance(response, (OffsetFetchResponse_v1, OffsetFetchResponse_v0)): return &#123;&#125; tps = response.topics topic = tps[0][0] partition_list = tps[0][1] if topic == t: for partition_tunple in partition_list: if partition_tunple[3] == 0: offset = partition_tunple[1] dr[partition_tunple[0]] = offset return drdef get_offsets(): # &#123;gid: dict&#125; gd = &#123;&#125; for gid in monitor_group_ids: td = &#123;&#125; # &#123;topic:dict&#125; for topic in topics: pd = &#123;&#125; # &#123;partition:dict&#125; for broker in get_brokers(): partitions = get_partitions(topic) if not partitions: return &#123;&#125; else: responses = optionnal_send(broker, gid, topic, partitions) dr = parse_offsets(topic, responses) append(pd, dr) td[topic] = pd gd[gid] = td return gddef optionnal_send(broker, gid, topic, partitions): if gid in kafka_type: return kafka_send(broker, gid, topic, partitions) elif gid in zk_type: return zk_send(broker, gid, topic, partitions) else: responses = zk_send(broker, gid, topic, partitions) dct = parse_offsets(topic, responses) if is_suitable(dct): zk_type.append(gid) return responses responses = kafka_send(broker, gid, topic, partitions) dct = parse_offsets(topic, responses) if is_suitable(dct): kafka_type.append(gid) return responsesdef is_suitable(dct): for x in dct.values(): if x != -1: return Truedef kafka_send(broker, gid, topic, partitions): client.send(broker, OffsetFetchRequest_v1(consumer_group=gid, topics=[(topic, partitions)])) return client.poll()def zk_send(broker, gid, topic, partitions): client.send(broker, OffsetFetchRequest_v0(consumer_group=gid, topics=[(topic, partitions)])) return client.poll()def do_task(): offset_dict = get_offsets() #print (offset_dict) logsize_dict = get_logsize() #print (logsize_dict) print (&#x27;----------kafka monitor, info:-------------&#x27;) for gk, gv in offset_dict.items(): for tk, tv in gv.items(): for pk, pv in tv.items(): if logsize_dict and tk in logsize_dict: dr = logsize_dict[tk] # partition:logsize if dr and pk in dr: param = (gk, tk, pk, pv, dr[pk], time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime(time.time()))) print(param)if __name__ == &quot;__main__&quot;: client = KafkaClient(bootstrap_servers=servers, request_timeout_ms=3000) while True: do_task() time.sleep(time_interval) duration += time_interval 参考:https://my.oschina.net/ktlb/blog/863308","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Kafka","slug":"数据/数据处理/DataStore/Kafka","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Kafka/"}]},{"title":"Scala学习","date":"2018-12-02T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Scala/Scala入门/","text":"有了java,为什么要用scala.想学scala. 先了解下它有什么比java更优秀的地方. Scala是2001年诞生的一门多范式语言 .设计初衷是要集成面向对象编程和函数式编程的各种特性 Scala 特性 面向对象特性 函数式编程 静态类型 扩展性 并发","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Scala","slug":"平台工具/2-计算机基础/编程语言/Scala","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Scala/"}]},{"title":"Scala项目构建","date":"2018-12-02T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Scala/使用maven构建scala项目/","text":"SCALA WITH MAVEN 1234mvn archetype:generate输入 groupId等 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576 &lt;dependency&gt; &lt;groupId&gt;org.scala-lang&lt;/groupId&gt; &lt;artifactId&gt;scala-library&lt;/artifactId&gt; &lt;version&gt;2.11.8&lt;/version&gt; &lt;/dependency&gt;&lt;build&gt; &lt;plugins&gt; &lt;!-- This plugin compiles Scala files --&gt; &lt;plugin&gt; &lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt; &lt;artifactId&gt;scala-maven-plugin&lt;/artifactId&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;scala-compile-first&lt;/id&gt; &lt;phase&gt;process-resources&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;add-source&lt;/goal&gt; &lt;goal&gt;compile&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;execution&gt; &lt;id&gt;scala-test-compile&lt;/id&gt; &lt;phase&gt;process-test-resources&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;testCompile&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;!-- This plugin compiles Java files --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;compile&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;compile&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;!-- This plugin adds all dependencies to JAR file during &#x27;package&#x27; command. Pay EXTRA attention to the &#x27;mainClass&#x27; tag. You have to set name of class with entry point to program (&#x27;main&#x27; method) --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.3&lt;/version&gt; &lt;configuration&gt; &lt;descriptorRefs&gt; &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt; &lt;/descriptorRefs&gt; &lt;archive&gt; &lt;manifest&gt; &lt;mainClass&gt;ScalaRunner&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;single&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; scala和maven整合实践","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Scala","slug":"平台工具/2-计算机基础/编程语言/Scala","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Scala/"}]},{"title":"Python学习","date":"2018-12-02T03:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Python/Python语法学习笔记/","text":"语言比较 有非常完善的基础代码库 定位:“优雅”、“明确”、“简单” Python的哲学就是简单优雅，尽量写容易看明白的代码，尽量写少的代码。如果一个资深程序员向你炫耀他写的晦涩难懂、动不动就几万行的代码，你可以尽情地嘲笑他。 可以做什么? 网站、后台服务等都可以 数据类型在内存中存储的数据可以有多种类型。 例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。 Python 定义了一些标准类型，用于存储各种类型的数据。 Python有五个标准的数据类型： Numbers（数字） String（字符串） List（列表） Tuple（元组） Dictionary（字典） 基本类型及Python数据类型转换 1. List1list = [ &#x27;runoob&#x27;, 786 , 2.23, &#x27;john&#x27;, 70.2 ] 列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。列表用 [ ] 标识，是 python 最通用的复合数据类型。列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。 2. Tuple1tuple = ( &#x27;runoob&#x27;, 786 , 2.23, &#x27;john&#x27;, 70.2 ) 元组是另一个数据类型，类似于List（列表）。 元组用”()”标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。 3. Dictionary1234dict = &#123;&#125;dict[&#x27;one&#x27;] = &quot;This is one&quot;dict[2] = &quot;This is two&quot;tinydict = &#123;&#x27;name&#x27;: &#x27;john&#x27;,&#x27;code&#x27;:6734, &#x27;dept&#x27;: &#x27;sales&#x27;&#125; 4. 数据类型转换Python数据类型转换 其他Python 内置函数 Python GUI编程(Tkinter) Python JSON","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"平台工具/2-计算机基础/编程语言/Python","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"}]},{"title":"关于kafka的offset存储","date":"2018-11-24T17:36:57.000Z","path":"wk/数据/数据处理/DataStore/Kafka/关于kafka的offset存储/","text":"消费者通过offset控制消费的进度,这里有几个概念先解释一下. Offset: 每个ConsumerGroup中针对一个topic的每个Partition的消费进度.通过这个来控制消费进度. LogSize: Kafka的数据位置,随着新的数据到来而增加. Lag: LogSize - Offset . 指落后的大小. 因此正常Consumer的不堆积是Lag的值处于比较小的范围,比如 0~1000. 然而,存在的一些问题: 那随着数据量的增加,offset和logSize的值一直增加,到超过int的范围吗,还是有清零的规则.(应该是有相应的机制,这个不重要了) 有关offset的一些注意点如下 存储位置从kafka-0.9版本及以后,消费者组和offset信息就不存在zk中了,而是存到broker服务器上.存放在一个叫__consumer_offsets的topic中. 关于offset的消费者参数auto.offset.reset 123456earliest 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费 latest 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据 none topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常 也就是说,这个参数的指定只有在新的consumer group添加的时候,或者其他原因导致分区上的offset没有了的情况,才更有意义. 那随之又有的问题: 如果为了能消费新的数据,而对于老的customer-group,不想消费堆积的数据. 或者说想废弃掉这个group了,那不用之后会有什么影响 另外,对于无止尽的customer-group创建,对kafka集群有什么影响吗,当然不仅仅是新group替代旧的group.而是还有在用group的增多,会对集群有什么影响? 下面详细总结下 1. 废弃group的增多个人理解: group增多,增加了对group的管理成本,那对于不用的group,存放在broker中,不会对其它造成影响.目前只是猜测,具体再详细研究. 2. 在用group的增多对于老版本(zk管理customer信息和offset), 会增加customer与zk的交互成本. 新版本(大于0.9), customer信息和offset由broker管理,只是增加了customer与broker的交互, 然而这一部分交互信息对于整个数据流来说微乎其微,所以影响应该不大. 需要在研究下offset更新的流程(customer与broker) 再聊聊kafka的group coordinator Coordinator一般指的是运行在broker上的group Coordinator，用于管理Consumer Group中各个成员，每个KafkaServer都有一个GroupCoordinator实例，管理多个消费者组，主要用于offset位移管理和Consumer Rebalance。 在 Server 端增加了 GroupCoordinator 这个角色 将 topic 的 offset 信息由之前存储在 zookeeper(/consumers//offsets//,zk写操作性能不高) 上改为存储到一个特殊的 topic 中（__consumer_offsets） 1. rebalance时机 有新的consumer加入 旧的consumer挂了 coordinator挂了，集群选举出新的coordinator topic的partition新加 consumer调用unsubscrible()，取消topic的订阅 关于offset的提交,管理 2. __consumer_offsetsConsumer通过发送OffsetCommitRequest请求到指定broker（偏移量管理者）提交偏移量。 这个请求中包含一系列分区以及在这些分区中的消费位置（偏移量） 偏移量管理者会追加键值（key－value）形式的消息到一个指定的topic（__consumer_offsets）。key是由consumerGroup-topic-partition组成的，而value是偏移量。 感觉其实用HashMap应该更好一些,因为通过key来获取或管理offset(偏移量-value) 因为这种存储方式(队列), find的时间复杂度为O(n), 需要遍历整个__consumer_offsets,扫描全部偏移量topic日志. 因此集群的内存中也是维护了一份最近的记录,为了能在指定key的情况下能够快速的给出OffsetFetchRequests而不用扫描全部偏移量topic日志. 如果偏移量管理者因某种原因失败，新的broker将会成为偏移量管理者并且通过扫描偏移量topic来重新生成偏移量缓存。 ps: 内存中应该是Map结构,那内存中的记录与偏移量topic(__consumer_offsets)的数据怎么保证一致性的呢?? 3. Consumer与Consumer Groupconsumer group是kafka提供的可扩展且具有容错性的消费者机制。组内可以有多个消费者或消费者实例(consumer instance)，它们共享一个公共的ID，即group ID。组内的所有消费者协调在一起来消费订阅主题(subscribed topics)的所有分区(partition)。 consumer instance可以是一个进程，也可以是一个线程. 有关offset的几个概念Kafka 之 Group 状态变化分析及 Rebalance 过程","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Kafka","slug":"数据/数据处理/DataStore/Kafka","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Kafka/"}]},{"title":"Kafak环境搭建","date":"2018-11-21T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Kafka/Kafka环境搭建/","text":"Docker创建kafka数据dev环境123docker run -d --name data-dev --restart always --net=host -e ADV_HOST=172.16.26.193 landoop/fast-data-devbin/kafka-topics.sh --create --zookeeper 172.16.26.193:2181 --replication-factor 1 --partitions 5 --topic my-replicated-topicbin/kafka-topics.sh --alter --zookeeper 127.0.0.1:2181 --partitions 5 --topic nginx_log 下载kafkahttp://kafka.apache.org/quickstart 启动zookeeperbin/zookeeper-server-start.sh config/zookeeper.properties &gt;&gt; zookeeper.out 2&gt;&amp;1 &amp; 启动kafka单机bin/kafka-server-start.sh config/server.properties &gt;&gt;kafka.out 2&gt;&amp;1 &amp; 集群启动bin/kafka-server-start.sh config/server.properties &gt;&gt;kafka-0.out 2&gt;&amp;1 &amp;bin/kafka-server-start.sh config/server-1.properties &gt;&gt;kafka-1.out 2&gt;&amp;1 &amp;bin/kafka-server-start.sh config/server-2.properties &gt;&gt;kafka-2.out 2&gt;&amp;1 &amp; 监控Kafka三款监控工具比较 Kafka监控工具KafkaOffsetMonitor配置及使用 下载KakfaOffsetMonitor 12345java -Xms512M -Xmx512M -Xss1024K -XX:PermSize=256m -XX:MaxPermSize=512m -cp KafkaOffsetMonitor-assembly-0.2.0.jar com.quantifind.kafka.offsetapp.OffsetGetterWeb \\--port 8088 \\--zk 10.0.0.50:12181,10.0.0.60:12181,10.0.0.70:12181 \\--refresh 5.minutes \\--retain 1.day &gt;/dev/null 2&gt;&amp;1; TODO 监控原理 PS: kafka 日志默认保存7天. topic创建1bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 5 --topic my-replicated-topic 命令行消费者1bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic nginx_log --from-beginning ubuntu命令行设置系统代理 增加partition1bin/kafka-topics.sh --alter --zookeeper 127.0.0.1:2181 --partitions 10 --topic nginx_log 查看某个topic的 logSize指的是topic各个分区的logSize 1bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list api.quartz.ren:9092,api.quartz.ren:9093,api.quartz.ren:9094 --topic nginx_log --time -1 time 为-2 表示查看offset的最小值, -1 表示最大值1bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list api.quartz.ren:9092,api.quartz.ren:9093,api.quartz.ren:9094 -topic nginx_log --time -2 查看消费者组内的offset位置(消费情况)关于kafka更改消费者对应分组下的offset值 12# To view offsets, as mentioned earlier, we &quot;describe&quot; the consumer group like this:bin/kafka-consumer-groups.sh --bootstrap-server api.quartz.ren:9092,api.quartz.ren:9093,api.quartz.ren:9094 --group consumer02 --describe Managing Consumer GroupsManaging Consumer Groups 123456# bin/kafka-consumer-groups.sh --bootstrap-server api.quartz.ren:9092,api.quartz.ren:9093,api.quartz.ren:9094 --list# provides the list of all active members in the consumer group.bin/kafka-consumer-groups.sh --bootstrap-server api.quartz.ren:9092,api.quartz.ren:9093,api.quartz.ren:9094 --describe --group consumer02 --members# bin/kafka-consumer-groups.sh --bootstrap-server api.quartz.ren:9092,api.quartz.ren:9093,api.quartz.ren:9094 --describe --group consumer02 --state 更改offset1234# 先查看一下customer的offset状态bin/kafka-consumer-groups.sh --bootstrap-server api.quartz.ren:9092,api.quartz.ren:9093,api.quartz.ren:9094 --group consumer02 --describe# reset offsets of a consumer group to the latest offset: (earliest)bin/kafka-consumer-groups.sh --bootstrap-server api.quartz.ren:9092,api.quartz.ren:9093,api.quartz.ren:9094 --reset-offsets --group consumer02 --topic nginx_log --to-latest 以上reset 只能在 consumer inactive状态时,才可以. 问题: 这个操作的目的和结果是什么??? Kafka auto.offset.reset值详解 123456earliest 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费 latest 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据 none topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Kafka","slug":"数据/数据处理/DataStore/Kafka","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Kafka/"}]},{"title":"pandas总结","date":"2018-11-17T09:10:49.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Python/pandas使用总结/","text":"API Referenct https://www.w3cschool.cn/python/dict Pandas-DataFrame基础知识点总结","tags":[{"name":"Python","slug":"Python","permalink":"https://wiki.quartz.ren/tags/Python/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"平台工具/2-计算机基础/编程语言/Python","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"}]},{"title":"pandas读取表格","date":"2018-11-17T09:10:49.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Python/pandas处理表格/","text":"1234import pandas as pd data = pd.read_table(&quot;./1.csv&quot;, header=None, sep=&#x27;,&#x27;, nrows = 10)# nrow 参数用来控制读取行数print(data)","tags":[{"name":"Python","slug":"Python","permalink":"https://wiki.quartz.ren/tags/Python/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"平台工具/2-计算机基础/编程语言/Python","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"}]},{"title":"pip 模块安装","date":"2018-11-17T09:10:49.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Python/模块安装/","text":"pip安装1apt install python3-pip 安装完pip就可以使用它来安装需要的模块。也可以指定安装目录1pip install xgboost --target=/home/work/.local/lib/python2.7/site-packages/ -i https://mirrors.aliyun.com/pypi/simple/ 1https://mirrors.aliyun.com/pypi/simple/","tags":[{"name":"Python","slug":"Python","permalink":"https://wiki.quartz.ren/tags/Python/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"平台工具/2-计算机基础/编程语言/Python","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"}]},{"title":"01.Python语法规则","date":"2018-11-17T09:10:49.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Python/01.Python基础/001.语法规则/","text":"主要是Python语法规则基础知识总结。包括 变量声明、 数据类型、运算符、控制结构等 1. 变量声明变量是存储在 内存中的值， 这就意味着在创建变量时会在内存中开辟一个空间。 1.1 变量赋值Python变量赋值不需要声明类型： python是动态类型语言，在声明时不需要指定数据类型。会运行时自动推断变量的类型。 类型检查：python是运行时进行类型检查， 这意味着类型错误会在执行时被发现。 变量作用域： LEGB规则。 可以是 局部的、全局变量和参数变量。 类型转换：Python允许隐式类型转换。 2. 数据类型(重点)python变量类型 2.1 标准数据类型 Numbers(数字) String(字符串) List(列表) Tuple(元组)类似于List(列表)。 用()标识。 内部元素用 逗号 隔开。 元组不能二次赋值， 相当于只读List. Dicionary(字典)除列表之外，python中最灵活的内置数据结构类型。 列表是有序的对象集合， 字典是无序的对象集合。 1.2.1 字典用法123456789101112dict = &#123;&#125;dict[&#x27;one&#x27;] = &quot;This is one&quot;dict[2] = &quot;This is two&quot; tinydict = &#123;&#x27;name&#x27;: &#x27;runoob&#x27;,&#x27;code&#x27;:6734, &#x27;dept&#x27;: &#x27;sales&#x27;&#125; print dict[&#x27;one&#x27;] # 输出键为&#x27;one&#x27; 的值print dict[2] # 输出键为 2 的值print tinydict # 输出完整的字典print tinydict.keys() # 输出所有键print tinydict.values() # 输出所有值 1.2.2 数据类型转换有时候需要对 内置的类型进行转换。 只需要将数据类型作为函数名即可。 1234567891011121314dict(d)创建一个字典。d 必须是一个序列 (key,value)元组。frozenset(s)转换为不可变集合chr(x)将一个整数转换为一个字符unichr(x)将一个整数转换为Unicode字符ord(x)将一个字符转换为它的整数值hex(x)将一个整数转换为一个十六进制字符串oct(x)将一个整数转换为一个八进制字符串 1.2.3 List(列表) Python列表截取 12L = [&#x27;Google&#x27;, &#x27;Runoob&#x27;, &#x27;Taobao&#x27;]L[1:] # 表示 从第二个元素开始截取. [&#x27;Runoob&#x27;, &#x27;Taobao&#x27;] Lmn m表示行数、n表示列数。 L[1] 表示取第二行. 如果L是二维数组. 则 2.23. 运算符4. 控制结构 条件语句 循环语句 break语句 continue语句 pass语句 5. 数据类型详解 字符串 列表 元组 字典 bytes 类型： 不可变的二进制数据类型。 由字节(byte)组成。每个字节是一个 8 位的整数，取值范围从 0 到 255。bytes 类型在 Python 3 中广泛用于处理二进制数据，例如文件的读写、网络通信等。 日期和时间 5.1 字典123456789101112dict = &#123;&#125;dict[&#x27;one&#x27;] = &quot;This is one&quot;dict[2] = &quot;This is two&quot; tinydict = &#123;&#x27;name&#x27;: &#x27;runoob&#x27;,&#x27;code&#x27;:6734, &#x27;dept&#x27;: &#x27;sales&#x27;&#125; print dict[&#x27;one&#x27;] # 输出键为&#x27;one&#x27; 的值print dict[2] # 输出键为 2 的值print tinydict # 输出完整的字典print tinydict.keys() # 输出所有键print tinydict.values() # 输出所有值 5.2 bytes类型5.3 日期和时间‘&lt;U5’ 是一个特定的 dtype 字符串表示 5.4 列表6. 函数和模块6.1 函数6.2 模块6.3 内置函数7. 高级教程7.1 面向对象相关概念： 类、类变量、 数据成员、方法重写、局部变量、实例变量、继承、实例化、方法、对象 1234567891011# 创建类class Employee: empCount = 0 def __init__(self, name, salary): self.name = name; self.salary = salary Employee.empCount += 1 def displayCoint(self): print &quot;Totle Employee %d&quot; % Employee.empCount init()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法 7.1.1 Python内置属性dict : 类的属性（包含一个字典，由类的数据属性组成）doc :类的文档字符串name: 类名module: 类定义所在的模块（类的全名是’main.className’，如果类位于一个导入模块mymod中，那么className.module 等于 mymod）bases : 类的所有父类构成元素（包含了一个由所有父类组成的元组） 7.1.2 对象销毁(垃圾回收)7.1.3 类的继承","tags":[{"name":"Python","slug":"Python","permalink":"https://wiki.quartz.ren/tags/Python/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"平台工具/2-计算机基础/编程语言/Python","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"},{"name":"01.Python基础","slug":"平台工具/2-计算机基础/编程语言/Python/01-Python基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/01-Python%E5%9F%BA%E7%A1%80/"}]},{"title":"01.numpy","date":"2018-11-17T09:10:49.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Python/01.Python基础/003.numpy/","text":"开源的Python科学计算库， 用于进行 大规模数值计算。 它是 数据科学 和机器学习生态系统中的 核心库 之一。 广泛用于 数据分析、科学计算、机器学习等领域。 1 主要特点1.1 多维数组强大的 n维数组对象 ndarray. 也称为 numpy.array , 这些数组具有固定类型，且支持高级的数组操作. 1.1.1 常用函数shape(1, 70000) 表示 行的大小是1， 列的大小是 70000. 是一个行向量。 和矩阵的定义 mn 相同， 即 Amn 表示m行n列矩阵。 当m是1、n为70000时 为行向量。 形状 (, 784) 表示一个二维数组，其中第一个维度（通常是批量大小）是未知的或未指定的，而第二个维度是784。 形状 (1, 784) 表示一个二维数组或矩阵，其中有1行和784列。 形状 (784,) 通常表示一个一维数组或向量，其中包含784个元素。 reshapenp.reshape(a, newshape)：给数组一个新的形状，不改变数据。 plt.imshow是 Python 中 Matplotlib 库的一个函数，用于显示图像数据。 参数说明： image：要显示的图像数据，可以是二维数组（灰度图像）或三维数组（彩色图像）. norm：归一化对象，用于调整图像的亮度和对比度。 1.2 类型一致性Numpy 的数组要求所有 元素必须是相同类型的， 这使得在底层实现优化，从而提高性能。 1.3 广播功能NumPy 提供了广播机制， 允许Numpy 用不同大小的数组进行 算术运算 1.4 丰富的函数库1.5 与C/C++的接口NumPy 提供了与 C 和 C++ 的接口，允许调用这些语言编写的代码，进一步提高性能。","tags":[{"name":"Python","slug":"Python","permalink":"https://wiki.quartz.ren/tags/Python/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"平台工具/2-计算机基础/编程语言/Python","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"},{"name":"01.Python基础","slug":"平台工具/2-计算机基础/编程语言/Python/01-Python基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/01-Python%E5%9F%BA%E7%A1%80/"}]},{"title":"1.Docker常用命令","date":"2018-11-16T17:13:34.000Z","path":"wk/平台工具/中间件_组件/Docker/001.Docker常用命令/","text":"Deepin下安装Docker 阿里云.来自云端的容器镜像服务 0. Docker认识 容器级别的虚拟化、不是基于硬件虚拟化. 和宿主机共享操作系统内核和资源 轻量 方便的构建&amp;部署应用程序 采用虚拟化控制 1. 镜像加速1.1 配置镜像加速器12345678sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123; &quot;registry-mirrors&quot;: [&quot;https://tabss8zh.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker 记得重启docker. 资料：Docker镜像加速：阿里云 2. nvidia-dockertodo 其他配置信息. 12345678910# nvidia-docker增加runtimes信息如下：&#123; &quot;registry-mirrors&quot;: [&quot;https://tabss8zh.mirror.aliyuncs.com&quot;], &quot;runtimes&quot;: &#123; &quot;nvidia&quot;: &#123; &quot;path&quot;: &quot;/usr/bin/nvidia-container-runtime&quot;, &quot;runtimeArgs&quot;: [] &#125; &#125;&#125; 3. Docker常用操作命令 查看日志123456docker logs -f -t --since=&quot;2017-05-31&quot; --tail=10 edu_web_1--since : 此参数指定了输出日志开始日期，即只输出指定日期之后的日志。-f : 查看实时日志-t : 查看日志产生的日期-tail=10 : 查看最后的10条日志。edu_web_1 : 容器名称 4. Docker 容器自定义 hosts 网络访问Docker自定义hosts网络访问 需求：使用自己的域名服务。 在很多应用环境中都会有其他服务器的访问需求。直接使用ip不便于修改。因此搭建自己的域名服务，之后配置docker环境使用此域名服务即可。也可同时使用其它域名服务。 12345(1)resolv-file=/etc/resolv.conf(2)strict-order(3)listen-address=192.168.0.127,127.0.0.1(4)addn-hosts=/etc/hosts //这歌地址指向的是你mac的hosts地址，你只需在里边做相应的 host(5)cache-size=2048 5. Docker镜像管理 搭建Docker私有仓库 更改Docker环境的配置指向私有仓库 向私有仓库提交镜像 从另外的docker环境获取上述镜像 Docker的镜像归纳为两种 需要知道docker容器的地址的类似zk这种组件的 不需要知道docker容器地址类似应用程序通过注册服务到zk，然后自动发现服务。 docker查看运行容器ip1docker inspect 容器ID | grep IPAddress 6. 宿主机和容器文件copydocker cp dea2fb66819e:/PaddleOCR/deploy/hubserving/ocr_system/params.py . docker cp params.py dea2fb66819e:/PaddleOCR/deploy/hubserving/ocr_system/params.py","tags":[{"name":"Docker","slug":"Docker","permalink":"https://wiki.quartz.ren/tags/Docker/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Docker","slug":"平台工具/中间件-组件/Docker","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Docker/"}]},{"title":"ES环境搭建","date":"2018-11-16T17:13:34.000Z","path":"wk/平台工具/中间件_组件/Elasticsearch/001.ES环境搭建/","text":"Elasticsearch Reference 搭建集群环境下载安装包安装步骤 选择 7.5.0. 更高版本需要jdk9 甚至更高版本. 1wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.5.0-linux-x86_64.tar.gz 后续下载， 先下载jdk11, 然后下载高版本的 es. 下载并解压 修改配置文件 default ： $ES_HOME/config/elasticsearch.yml 一般需要修改的几个地方如下： 1234567891011121314# 集群名称cluster.name: my-application# 节点名称node.name: node-1# 绑定的IPnetwork.host: 192.168.1.106# 开始发现新节点的IPdiscovery.zen.ping.unicast.hosts: [&quot;192.168.1.108&quot;, &quot;192.168.1.106&quot;]# 最多发现主节点的个数discovery.zen.minimum_master_nodes: 1# 当重启集群节点后最少启动N个节点后开始做恢复gateway.recover_after_nodes: 3# 在一台机器上最多启动的节点数node.max_local_storage_nodes: 1 具体配置文件解释见: elasticsearch配置文件详解 配置集群模式，在其它节点修改以上对应配置项，启动即可。 启动1./bin/elasticsearch -d 异常bootstrap check failure [1] of [2]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]bootstrap check failure [2] of [2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144] 第二个异常： 原因是 es用户拥有的内存权限太小。 至少需要262144.解决方案： sudo sysctl -w vm.max_map_count=262144 第一个异常：解决方案： vim /etc/security/limits.conf， 添加tensor soft nofile 65536tensor hard nofile 65536 root soft nofile 65536root hard nofile 65536 https://blog.csdn.net/qq_38636133/article/details/105621876 验证： 12ulimit -Huulimit -Su ubuntu 环境不生效. 经过排查，limits.conf这个文件实际是 Linux PAM（插入式认证模块，Pluggable Authentication Modules）中 pam_limits.so模块的配置文件，然而，ubuntu的PAM默认并没有加载这个模块，导致最后limits.conf里面的配置不生效。 sudo vim /etc/pam.d/su https://mikemiao.com/ubuntu-limits-conf/ 第三个异常：1[2]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured 解决： cluster.initial_master_nodes: [“tensor-es”]node.name: tensor-es 最大文件描述符》》》 ubuntu子系统 没法改. 使用 高版本es. 配置使用高版本的jdk. JAVA11_HOME= 重启win10 子系统12net stop LxssManagernet start LxssManager","tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wiki.quartz.ren/tags/elasticsearch/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Elasticsearch","slug":"平台工具/中间件-组件/Elasticsearch","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Elasticsearch/"}]},{"title":"ES环境搭建","date":"2018-11-16T17:13:34.000Z","path":"wk/平台工具/中间件_组件/Elasticsearch/1.ES环境搭建/","text":"Elasticsearch Reference 搭建集群环境下载安装包安装步骤 下载并解压 修改配置文件 default ： $ES_HOME/config/elasticsearch.yml 一版需要修改的几个地方如下： 1234567891011121314# 集群名称cluster.name: my-application# 节点名称node.name: node-1# 绑定的IPnetwork.host: 192.168.1.106# 开始发现新节点的IPdiscovery.zen.ping.unicast.hosts: [&quot;192.168.1.108&quot;, &quot;192.168.1.106&quot;]# 最多发现主节点的个数discovery.zen.minimum_master_nodes: 1# 当重启集群节点后最少启动N个节点后开始做恢复gateway.recover_after_nodes: 3# 在一台机器上最多启动的节点数node.max_local_storage_nodes: 1 具体配置文件解释见: elasticsearch配置文件详解 配置集群模式，在其它节点修改以上对应配置项，启动即可。 启动1./bin/elasticsearch -d","tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wiki.quartz.ren/tags/elasticsearch/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Elasticsearch","slug":"平台工具/中间件-组件/Elasticsearch","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Elasticsearch/"}]},{"title":"Python客户端创建索引","date":"2018-11-16T17:13:34.000Z","path":"wk/平台工具/中间件_组件/Elasticsearch/Python客户端创建索引/","text":"安装elasticsearch模块 进入python交互界面 引入es的模块1from elasticsearch import Elasticsearch 定义es链接及变量12doc_type = &#x27;log&#x27;es = Elasticsearch(urls = [&#x27;http://192.168.1.108:9200&#x27;,&#x27;http://192.168.1.106:9200&#x27;], timeout = 60, max_retries = 0) 设置mapping 创建索引1es.index(index = &#x27;app-log&#x27;, doc_type=&#x27;log&#x27;, body = mapping) 12345678910111213141516171819202122232425262728293031323334mapping = &#123; &#x27;settings&#x27;: &#123; &#x27;index&#x27;: &#123; &#x27;number_of_replicas&#x27;: 1, &#x27;number_of_shards&#x27;: 6, &#x27;refresh_interval&#x27;: &#x27;5s&#x27; &#125; &#125;, &#x27;mappings&#x27;: &#123; &#x27;_default_&#x27;: &#123; &#x27;_all&#x27;: &#123; &#x27;enabled&#x27;: False &#125; &#125;, doc_type : &#123; &#x27;properties&#x27; : &#123; &#x27;day&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;time&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;nanoTime&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;created&#x27;: &#123; &#x27;type&#x27;: &#x27;date&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;app&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;host&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;thread&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;level&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;eventType&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;pack&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;clazz&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;line&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;messageSmart&#x27;: &#123; &#x27;type&#x27;: &#x27;text&#x27;, &#x27;analyzer&#x27;: &#x27;ik_smart&#x27;, &#x27;search_analyzer&#x27;: &#x27;ik_smart&#x27;, &#x27;include_in_all&#x27;: &#x27;true&#x27;, &#x27;boost&#x27;: 8&#125;, &#x27;messageMax&#x27;: &#123; &#x27;type&#x27;: &#x27;text&#x27;, &#x27;analyzer&#x27;: &#x27;ik_max_word&#x27;, &#x27;search_analyzer&#x27;: &#x27;ik_max_word&#x27;, &#x27;include_in_all&#x27;: &#x27;true&#x27;, &#x27;boost&#x27;: 8&#125; &#125; &#125; &#125; &#125; 验证1curl &#x27;192.168.1.108:9200/_cat/indices?v&#x27; 完整脚本12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#!/usr/bin/python# -*- coding: UTF-8 -*-import sysimport datetimefrom pyelasticsearch import ElasticSearchfrom pyelasticsearch import bulk_chunksdef main(argv): doc_type = &#x27;log&#x27; index = &#x27;app-log&#x27; es = ElasticSearch(urls = [&#x27;http://192.168.1.108:9200&#x27;], timeout = 60, max_retries = 0) mapping = &#123; &#x27;settings&#x27;: &#123; &#x27;index&#x27;: &#123; &#x27;number_of_replicas&#x27;: 1, &#x27;number_of_shards&#x27;: 6, &#x27;refresh_interval&#x27;: &#x27;5s&#x27; &#125; &#125;, &#x27;mappings&#x27;: &#123; &#x27;_default_&#x27;: &#123; &#x27;_all&#x27;: &#123; &#x27;enabled&#x27;: False &#125; &#125;, doc_type : &#123; &#x27;properties&#x27; : &#123; &#x27;day&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;time&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;nanoTime&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;created&#x27;: &#123; &#x27;type&#x27;: &#x27;date&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;app&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;host&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;thread&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;level&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;eventType&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;pack&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;clazz&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125;, &#x27;line&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;index&#x27;: &#x27;not_analyzed&#x27;&#125; # &#x27;messageSmart&#x27;: &#123; &#x27;type&#x27;: &#x27;string&#x27;, &#x27;analyzer&#x27;: &#x27;ik_smart&#x27;, &#x27;search_analyzer&#x27;: &#x27;ik_smart&#x27;, &#x27;include_in_all&#x27;: &#x27;true&#x27;, &#x27;boost&#x27;: 8&#125;, &#125; &#125; &#125; &#125; es.create_index(index = index, settings = mapping)if __name__ == &#x27;__main__&#x27;: main(sys.argv)","tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://wiki.quartz.ren/tags/elasticsearch/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Elasticsearch","slug":"平台工具/中间件-组件/Elasticsearch","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Elasticsearch/"}]},{"title":"Jenkins安装配置","date":"2018-11-16T17:13:34.000Z","path":"wk/平台工具/中间件_组件/Jenkins/2.Jenkins安装配置/","text":"1.下载war文件。 下载地址. 2.启动 启动脚本如下： 12#set JENKINS_HOME=nohup java -jar jenkins* --httpPort=8000 --prefix=/jks &gt;&gt; nohup.out 2&gt;&amp;1 &amp; 默认JENKINS_HOME为 .jenkins。默认端口8080 3.验证 在浏览器输入：http://127.0.0.1:8000 4.输入安装密码，进入初始化页面 在启动之后，日志中会出现一个安装密码。打开页面时需要配置。 选择推荐插件模式进行安装。（等5分钟） 5.创建第一个管理员账户（请牢记密码） 6.安装成功","tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://wiki.quartz.ren/tags/Jenkins/"},{"name":"CI","slug":"CI","permalink":"https://wiki.quartz.ren/tags/CI/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Jenkins","slug":"平台工具/中间件-组件/Jenkins","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Jenkins/"}]},{"title":"Jenkins认识","date":"2018-11-16T17:13:34.000Z","path":"wk/平台工具/中间件_组件/Jenkins/1.Jenkins认识/","text":"Jenkins可以做什么？软件开发实践过程中有很多重复性的工作，并且团队成员都需要经常集成他们的工作。 持续集成：一种软件开发实践。通过自动化的构建（包括编译，发布，自动化测试)来验证集成的工作任务。可以尽快的发现集成错误，可以大大减少集成的问题，让团队能够更快的开发内聚的软件。 而Jenkins的定义是一个可扩展的持续集成引擎。 持续集成不仅仅是自动化部署，它的重要性还包含了项目质量的提高以及减少重复的操作等等。 怎么让持续集成的价值体现出来呢？首先从这个持续集成工具开始。 持续集成的要素 1. Jenkins可以做的事最基本的就是项目构建，再就是通过Jenkins的插件围绕构建的一些工作进行自动化。比如以下： 自动化项目构建 自动化测试 自动化部署 Jenkins的强大依赖于很多第三方插件。 2. Jenkins实用插件 iOS专用：Xcode integration Android专用：Gradle plugin Gitlab插件：GitLab Plugin 和 Gitlab Hook Plugin Git插件： Git plugin GitBuckit插件： GitBuckit plugin 签名证书管理插件: Credentials Plugin 和Keychains and Provisioning Profiles Management FTP插件: Publish over FTP 脚本插件: Post-Build Script Plug-in 修改Build名称/描述(二维码)： build-name-setter / description setter plugin 获取仓库提交的commit log： Git Changelog Plugin 自定义全局变量: Environment Injector Plugin 自定义邮件插件： Email Extension Plugin 获取当前登录用户信息： build-user-vars-plugin 显示代码测试覆盖率报表： Cobertura Plugin 来展示生成的单元测试报表，支持一切单测框架，如junit、nosetests等： Junit Plugin 其它： GIT plugin / SSH Credentials Plugin 3. 基础环境配置 maven jdk 参考以下Jenkins Gitlab持续集成打包平台搭建 Jenkins使用 Jenkins系列文章","tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://wiki.quartz.ren/tags/Jenkins/"},{"name":"CI","slug":"CI","permalink":"https://wiki.quartz.ren/tags/CI/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Jenkins","slug":"平台工具/中间件-组件/Jenkins","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Jenkins/"}]},{"title":"Jenkins项目常用配置","date":"2018-11-16T17:13:34.000Z","path":"wk/平台工具/中间件_组件/Jenkins/4.Jenkins项目常用配置/","text":"主要是maven项目的构建 不是父子关系的依赖项目，关联构建 父子关系项目 表示子模块，通过pom.xml中模块关联。两个项目之间互为父子项目。配置如下： 12345678910&lt;modules&gt; &lt;module&gt;aaa&lt;/module&gt; &lt;module&gt;bbb&lt;/module&gt; &lt;module&gt;ccc&lt;/module&gt;&lt;/modules&gt;&lt;parent&gt; &lt;groupId&gt;com.xxx&lt;/groupId&gt; &lt;artifactId&gt;cc&lt;/artifactId&gt; &lt;version&gt;0001&lt;/version&gt;&lt;/parent&gt; 依赖项目关联构建 不属于上述情况，但项目之间是依赖关系。所以在构建需要的项目时，希望依赖的项目是最新的构建。 对于这种情况，就需要一种jenkins构建方案。目前发现的一种配置方式如下，可供参考。 配置项目如下： 表示：在构建当前项目时，会阻塞去构建依赖的项目，之后再完成当前项目的构建。","tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://wiki.quartz.ren/tags/Jenkins/"},{"name":"CI","slug":"CI","permalink":"https://wiki.quartz.ren/tags/CI/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Jenkins","slug":"平台工具/中间件-组件/Jenkins","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Jenkins/"}]},{"title":"Jenkins插件使用","date":"2018-11-16T17:13:34.000Z","path":"wk/平台工具/中间件_组件/Jenkins/3.Jenkins插件使用/","text":"Version Number Plug-In版本管理：自动生成工单版本（例如201712280。最后一位0代表当天第几次构建）。记录历史构建版本。版本规则可自定义。 Role-based Authorization Strategy项目权限管理：用户只能查看、修改、构建自己相关项目 参考：Jenkins权限控制 这里的项目权限控制，通过项目名称的正则匹配，并没有直接或间接的关联（像通常的管理系统权限管理）。","tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://wiki.quartz.ren/tags/Jenkins/"},{"name":"CI","slug":"CI","permalink":"https://wiki.quartz.ren/tags/CI/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"Jenkins","slug":"平台工具/中间件-组件/Jenkins","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/Jenkins/"}]},{"title":"Netty学习目录","date":"2018-11-16T17:13:34.000Z","path":"wk/平台工具/MicroService/技术框架/Netty/Netty学习目录/","text":"Java NIO unix网络IO模型 Java IO的演进 四种IO的概念与比较 Netty NIO开发 服务端、客户端Demo Tcp粘包、拆包问题 分隔符和定长解码器的应用 Netty编解码开发 编解码技术（序列化、Protobuf、Thrift、Marshaling） MessagePack编解码 Google Protobuf编解码 JBoss Marshaling编解码 Netty多协议开发 Http协议开发 WebSoket协议开发 私有协议栈开发 私有协议介绍 协议栈功能设计 协议栈功能开发 服务端创建细节客户端创建细节 源码分析 ByteBuf Channel和Unsafe ChannelPipeline和ChannelHandler EventLoop和EventLoopGroup NioEventLoop源码分析 Future和Promise 架构和行业应用 Java NIOunix网络IO模型Java IO的演进四种IO的概念与比较Netty NIO开发服务端、客户端DemoTcp粘包、拆包问题分隔符和定长解码器的应用Netty编解码开发编解码技术（序列化、Protobuf、Thrift、Marshaling）MessagePack编解码Google Protobuf编解码JBoss Marshaling编解码Netty多协议开发Http协议开发WebSoket协议开发私有协议栈开发私有协议介绍协议栈功能设计协议栈功能开发服务端创建细节客户端创建细节源码分析ByteBufChannel和UnsafeChannelPipeline和ChannelHandlerEventLoop和EventLoopGroupNioEventLoop源码分析Future和Promise架构和行业应用已连接netty/README.md","tags":[{"name":"Netty","slug":"Netty","permalink":"https://wiki.quartz.ren/tags/Netty/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/Netty/"}]},{"title":"读写事件流程分析与相关API","date":"2018-11-16T17:13:34.000Z","path":"wk/平台工具/MicroService/技术框架/Netty/读写事件流程分析与相关API/","text":"netty5笔记-总体流程分析3-ChannelHandlerContext Netty4学习笔记（1）— ChannelPipeline 处理链处理写操作流程、Pipeline，Context和Handler的协作处理。 netty核心的概念：Channel、Buffer、Selecter ChannelChannel是核心的一个接口，表示一个联络Socket的通道。通过Channel，可以对Socket进行各种操作。 ChannelHandler在实际程序实现中，很少直接操作Channel，而是通过ChannelHandler来间接操纵Channel。（使用策略模式？） ChannelHandler的种类:ChannelHandler接口的子接口 ChannelInboundHandler ChannelOutboundHandler 5.0.0.Alpha1 版本已经没有了这两个接口，why。4.1.5存在。 ChannelPipelineChannelPipeline里有一个双向链表，使用HashMap存放节点。节点类型为：ChannelHandlerContext。 是一个ChandlerHandler的链表。当需要对Channel进行某种处理的时候，Pipeline负责依次调用每一个Handler进行处理。（责任链模式？） 每个Channel都有一个属于自己的Pipeline.(一对一关系) ChannelPipeline的方法有很多，其中一部分是用来管理ChannelHandler的，如下面这些： 12345678910111213ChannelPipeline addFirst(String name, ChannelHandler handler); ChannelPipeline addLast(String name, ChannelHandler handler); ChannelPipeline addBefore(String baseName, String name, ChannelHandler handler); ChannelPipeline addAfter(String baseName, String name, ChannelHandler handler); ChannelPipeline remove(ChannelHandler handler); ChannelHandler remove(String name); ChannelHandler removeFirst(); ChannelHandler removeLast(); ChannelPipeline replace(ChannelHandler oldHandler, String newName, ChannelHandler newHandler); ChannelHandler replace(String oldName, String newName, ChannelHandler newHandler); ChannelHandler first(); ChannelHandler last(); ChannelHandler get(String name); 事件的传播为了搞清楚事件如何在Pipeline里传播， 让我们从Channel的抽象子类AbstractChannel开始： 12345678public abstract class AbstractChannel extends DefaultAttributeMap implements Channel &#123; // ... @Override public Channel write(Object msg) &#123; return pipeline.write(msg); &#125; // ... &#125; 再看DefaultChannelPipeline的write()方法实现 12345678final class DefaultChannelPipeline implements ChannelPipeline &#123; // ... @Override public ChannelFuture write(Object msg) &#123; return tail.write(msg); &#125; // ... &#125; 因为write是个outbound事件，所以DefaultChannelPipeline直接找到tail部分的context，调用其write()方法 接着看DefaultChannelHandlerContext的write()方法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546final class DefaultChannelHandlerContext extends DefaultAttributeMap implements ChannelHandlerContext &#123; // ... @Override public ChannelFuture write(Object msg) &#123; return write(msg, newPromise()); &#125; @Override public ChannelFuture write(final Object msg, final ChannelPromise promise) &#123; if (msg == null) &#123; throw new NullPointerException(&quot;msg&quot;); &#125; validatePromise(promise, true); write(msg, false, promise); return promise; &#125; private void write(Object msg, boolean flush, ChannelPromise promise) &#123; DefaultChannelHandlerContext next = findContextOutbound(); next.invokeWrite(msg, promise); if (flush) &#123; next.invokeFlush(); &#125; &#125; private DefaultChannelHandlerContext findContextOutbound() &#123; DefaultChannelHandlerContext ctx = this; do &#123; ctx = ctx.prev; &#125; while (!ctx.outbound); return ctx; &#125; private void invokeWrite(Object msg, ChannelPromise promise) &#123; try &#123; ((ChannelOutboundHandler) handler).write(this, msg, promise); &#125; catch (Throwable t) &#123; notifyOutboundHandlerException(t, promise); &#125; &#125; // ... &#125; context的write()方法沿着context链往前找，直至找到一个outbound类型的context为止，然后调用其invokeWrite()方法 invokeWrite()接着调用handler的write()方法： ChannelHandlerContextChannelPipeline并不是直接管理ChannelHandler，而是通过ChannelHandlerContext来间接管理，这一点通过ChannelPipeline的默认实现DefaultChannelPipeline可以看出来。 调用ChannelHandlerContext#channel()方法可以得到和Context绑定的Channel，调用ChannelHandlerContext#handler()方法可以得到和Context绑定的Handler。 一个ChannelHandlerContext只能对应一个ChannelHander，只对应一个Channel，而一个ChannelHander则可以对应多个ChannelHandlerContext","tags":[{"name":"Netty","slug":"Netty","permalink":"https://wiki.quartz.ren/tags/Netty/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/Netty/"}]},{"title":"SpringBoot","date":"2018-11-16T17:13:34.000Z","path":"wk/平台工具/MicroService/技术框架/SpringBoot/Readme/","text":"Spring Boot 2.0深度实践之核心技术","tags":[{"name":"springboot","slug":"springboot","permalink":"https://wiki.quartz.ren/tags/springboot/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"SpringBoot","slug":"平台工具/MicroService/技术框架/SpringBoot","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/SpringBoot/"}]},{"title":"Netty学习目录","date":"2018-11-16T17:13:34.000Z","path":"wk/平台工具/MicroService/技术框架/RPC/Netty/Netty学习目录/","text":"Java NIO unix网络IO模型 Java IO的演进 四种IO的概念与比较 Netty NIO开发 服务端、客户端Demo Tcp粘包、拆包问题 分隔符和定长解码器的应用 Netty编解码开发 编解码技术（序列化、Protobuf、Thrift、Marshaling） MessagePack编解码 Google Protobuf编解码 JBoss Marshaling编解码 Netty多协议开发 Http协议开发 WebSoket协议开发 私有协议栈开发 私有协议介绍 协议栈功能设计 协议栈功能开发 服务端创建细节客户端创建细节 源码分析 ByteBuf Channel和Unsafe ChannelPipeline和ChannelHandler EventLoop和EventLoopGroup NioEventLoop源码分析 Future和Promise 架构和行业应用 Java NIOunix网络IO模型Java IO的演进四种IO的概念与比较Netty NIO开发服务端、客户端DemoTcp粘包、拆包问题分隔符和定长解码器的应用Netty编解码开发编解码技术（序列化、Protobuf、Thrift、Marshaling）MessagePack编解码Google Protobuf编解码JBoss Marshaling编解码Netty多协议开发Http协议开发WebSoket协议开发私有协议栈开发私有协议介绍协议栈功能设计协议栈功能开发服务端创建细节客户端创建细节源码分析ByteBufChannel和UnsafeChannelPipeline和ChannelHandlerEventLoop和EventLoopGroupNioEventLoop源码分析Future和Promise架构和行业应用已连接netty/README.md","tags":[{"name":"Netty","slug":"Netty","permalink":"https://wiki.quartz.ren/tags/Netty/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"RPC","slug":"平台工具/MicroService/技术框架/RPC","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/RPC/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/Netty/"}]},{"title":"读写事件流程分析与相关API","date":"2018-11-16T17:13:34.000Z","path":"wk/平台工具/MicroService/技术框架/RPC/Netty/读写事件流程分析与相关API/","text":"netty5笔记-总体流程分析3-ChannelHandlerContext Netty4学习笔记（1）— ChannelPipeline 处理链处理写操作流程、Pipeline，Context和Handler的协作处理。 netty核心的概念：Channel、Buffer、Selecter ChannelChannel是核心的一个接口，表示一个联络Socket的通道。通过Channel，可以对Socket进行各种操作。 ChannelHandler在实际程序实现中，很少直接操作Channel，而是通过ChannelHandler来间接操纵Channel。（使用策略模式？） ChannelHandler的种类:ChannelHandler接口的子接口 ChannelInboundHandler ChannelOutboundHandler 5.0.0.Alpha1 版本已经没有了这两个接口，why。4.1.5存在。 ChannelPipelineChannelPipeline里有一个双向链表，使用HashMap存放节点。节点类型为：ChannelHandlerContext。 是一个ChandlerHandler的链表。当需要对Channel进行某种处理的时候，Pipeline负责依次调用每一个Handler进行处理。（责任链模式？） 每个Channel都有一个属于自己的Pipeline.(一对一关系) ChannelPipeline的方法有很多，其中一部分是用来管理ChannelHandler的，如下面这些： 12345678910111213ChannelPipeline addFirst(String name, ChannelHandler handler); ChannelPipeline addLast(String name, ChannelHandler handler); ChannelPipeline addBefore(String baseName, String name, ChannelHandler handler); ChannelPipeline addAfter(String baseName, String name, ChannelHandler handler); ChannelPipeline remove(ChannelHandler handler); ChannelHandler remove(String name); ChannelHandler removeFirst(); ChannelHandler removeLast(); ChannelPipeline replace(ChannelHandler oldHandler, String newName, ChannelHandler newHandler); ChannelHandler replace(String oldName, String newName, ChannelHandler newHandler); ChannelHandler first(); ChannelHandler last(); ChannelHandler get(String name); 事件的传播为了搞清楚事件如何在Pipeline里传播， 让我们从Channel的抽象子类AbstractChannel开始： 12345678public abstract class AbstractChannel extends DefaultAttributeMap implements Channel &#123; // ... @Override public Channel write(Object msg) &#123; return pipeline.write(msg); &#125; // ... &#125; 再看DefaultChannelPipeline的write()方法实现 12345678final class DefaultChannelPipeline implements ChannelPipeline &#123; // ... @Override public ChannelFuture write(Object msg) &#123; return tail.write(msg); &#125; // ... &#125; 因为write是个outbound事件，所以DefaultChannelPipeline直接找到tail部分的context，调用其write()方法 接着看DefaultChannelHandlerContext的write()方法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546final class DefaultChannelHandlerContext extends DefaultAttributeMap implements ChannelHandlerContext &#123; // ... @Override public ChannelFuture write(Object msg) &#123; return write(msg, newPromise()); &#125; @Override public ChannelFuture write(final Object msg, final ChannelPromise promise) &#123; if (msg == null) &#123; throw new NullPointerException(&quot;msg&quot;); &#125; validatePromise(promise, true); write(msg, false, promise); return promise; &#125; private void write(Object msg, boolean flush, ChannelPromise promise) &#123; DefaultChannelHandlerContext next = findContextOutbound(); next.invokeWrite(msg, promise); if (flush) &#123; next.invokeFlush(); &#125; &#125; private DefaultChannelHandlerContext findContextOutbound() &#123; DefaultChannelHandlerContext ctx = this; do &#123; ctx = ctx.prev; &#125; while (!ctx.outbound); return ctx; &#125; private void invokeWrite(Object msg, ChannelPromise promise) &#123; try &#123; ((ChannelOutboundHandler) handler).write(this, msg, promise); &#125; catch (Throwable t) &#123; notifyOutboundHandlerException(t, promise); &#125; &#125; // ... &#125; context的write()方法沿着context链往前找，直至找到一个outbound类型的context为止，然后调用其invokeWrite()方法 invokeWrite()接着调用handler的write()方法： ChannelHandlerContextChannelPipeline并不是直接管理ChannelHandler，而是通过ChannelHandlerContext来间接管理，这一点通过ChannelPipeline的默认实现DefaultChannelPipeline可以看出来。 调用ChannelHandlerContext#channel()方法可以得到和Context绑定的Channel，调用ChannelHandlerContext#handler()方法可以得到和Context绑定的Handler。 一个ChannelHandlerContext只能对应一个ChannelHander，只对应一个Channel，而一个ChannelHander则可以对应多个ChannelHandlerContext","tags":[{"name":"Netty","slug":"Netty","permalink":"https://wiki.quartz.ren/tags/Netty/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"MicroService","slug":"平台工具/MicroService","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/"},{"name":"技术框架","slug":"平台工具/MicroService/技术框架","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"},{"name":"RPC","slug":"平台工具/MicroService/技术框架/RPC","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/"},{"name":"Netty","slug":"平台工具/MicroService/技术框架/RPC/Netty","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/MicroService/%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/RPC/Netty/"}]},{"title":"闲聊","date":"2018-03-09T03:55:57.000Z","path":"wk/项目管理/[3]生活学习/[6]闲聊/001.闲聊/","text":"什么是浪费时间不快乐就是浪费时间，你不用羡慕任何人，因为任何人 都在进行一场 残酷的人生战争。 在所有品质当中，唯一值得羡慕的品质 是 这个人能够保持快乐。 快乐是一种能力，而不是一种状态 除了死法都是活法。 很多人之所以在婚姻上着了道， 是因为 她在谈恋爱的时候 只看这个男的对她有多好 是没有用的， 你要看他对别人怎么样 婚姻是一个人的事， 跟自己过不到一块 ，你跟谁都过不到一块 我们跟配偶之间的矛盾 都是来自于 我们对自己的不接纳 你不会游泳 怎么换游泳池 都没用 大家看繁华 好多人 就说 多希望有个 爷叔，都是这样 真正的爷叔就是书 你想 让司马迁跟你聊 ，看史记 所谓说读好书交高人。 基因负责上膛， 环境扣动扳机。","tags":[{"name":"Life","slug":"Life","permalink":"https://wiki.quartz.ren/tags/Life/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[6]闲聊","slug":"项目管理/3-生活学习/6-闲聊","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/6-%E9%97%B2%E8%81%8A/"}]},{"title":"资治通鉴","date":"2018-03-09T03:55:57.000Z","path":"wk/项目管理/[3]生活学习/[6]闲聊/002.资治通鉴/","text":"顺，不安喜； 逆，不惶馁 祸不安至， 福不徒来！ 反听之谓聪，内视之谓明，自胜之谓强！ 力田不如丰年，善仕不如遇合！ 智足以拒谏，言是以饰非口 三代之际，非一代之智也 成大功者不谋与众！ 非人情，不可，难近，难亲 自首如新，倾盖如故 天下熙熙皆为利来；天下嚷嚷皆为利往！","tags":[{"name":"Life","slug":"Life","permalink":"https://wiki.quartz.ren/tags/Life/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"[6]闲聊","slug":"项目管理/3-生活学习/6-闲聊","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/6-%E9%97%B2%E8%81%8A/"}]},{"title":"Something","date":"2018-03-09T03:55:57.000Z","path":"wk/项目管理/[3]生活学习/这些都是历史/生活/","text":"卡耐基在《人性的弱点》一书中讲述了忙里偷闲的方法，就是让我们学习那松松放置的袜子，很随意，也很自然，不与任何事物较劲儿。这样的放松，才能摆脱由紧张与压力所造成的焦虑。 我之所以没有留在无锡，没有考研．一方面是因为不想再被困在仅仅的学习中，我希望我以后的选择是自由的．可以想去那里，想有什么样的工作．不想为了一些事情被绑架，失去自由． 生活不仅是一种追逐，更是一种领悟和享受！ 其实，生活轻松与紧张都是相对的，要想不累，就要学会让自己的心情松弛下来。生活理应是有张有弛的，如果累了就停一停，生活没有奋斗的终点，并不是只争朝夕。要学会释放自己，学会忙里偷闲的时候给自己的心情放个假，去郊外山野走一走，听听音乐，看看书，与朋友聊聊天，就会找回那种最自然的轻松感觉。 其实，太过于追求完美，才是心灵的桎梏，不是吗？没完没了地加班加点，让你没有时间欣赏生活的美好，毫无休止的追句逐利，让你没有余暇体味幸福的甜蜜。其实，这样的生活，无疑是给自己施加了太大的压力，非但不会实现自己想要的生活，还会遗失那份”闲云野鹤“悠然心境。 http://news.163.com/12/0120/02/7O68KJJ700014AED_all.html 星座话题，衣服审美 有时候会发现努力的方向不对，你觉得目前的状态收获大吗，效率高吗.如果没有，为什么不去做一些这个年纪想做的事，铺垫一些未来．做一些环境准备． 很多新内容的学习认识，学会都很大程度受环境前提的影响． 2022.11.10最近看到这样一段话 把时间分给睡眠、 分给书籍、分给运动、分给花鸟树木和山川湖海 分给你对这个世界的热爱 而不是将自己浪费在无聊的人和事上 当你开始做时间的主人 你会感受到 平淡生活中 喷涌而出的 平静的力量 至于那些焦虑和不安 自然烟消云散.","tags":[{"name":"Life","slug":"Life","permalink":"https://wiki.quartz.ren/tags/Life/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"[3]生活学习","slug":"项目管理/3-生活学习","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"},{"name":"这些都是历史","slug":"项目管理/3-生活学习/这些都是历史","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%E8%BF%99%E4%BA%9B%E9%83%BD%E6%98%AF%E5%8E%86%E5%8F%B2/"}]},{"title":"非技术问题","date":"2018-03-09T03:55:57.000Z","path":"wk/项目管理/软件工程/问题/关于非技术类的几个问题/","text":"别人的一些经历,经验,需要学习的地方,思想 有关管理,交流的问题,人的管理.","tags":[{"name":"其它","slug":"其它","permalink":"https://wiki.quartz.ren/tags/%E5%85%B6%E5%AE%83/"}],"categories":[{"name":"项目管理","slug":"项目管理","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"软件工程","slug":"项目管理/软件工程","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"问题","slug":"项目管理/软件工程/问题","permalink":"https://wiki.quartz.ren/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98/"}]},{"title":"Hadoop学习资料","date":"2018-02-16T04:56:24.000Z","path":"wk/数据/数据处理/DataStore/Hadoop/Hadoop学习资料/","text":"hadoop-notebook HDFS MapReduce Yarn HDFShdfs架构图Hadoop核心之HDFS 架构设计 数据块 NameNode DataNode SecondaryNameNode 各自的作用 MapReduceMapreduce是一个计算框架。 MapReduce讲的就是分而治之的程序处理理念。 MapReduce的根本原则是信息处理的本地化，哪台PC持有相应要处理的数据，哪台PC就负责处理该部分的数据，这样做的意义在于可以减少网络通讯负担。 学习的demo Welcome to the Hadoop installed wiki! 以下是相关资料 搭建hadoop-2.6.0-cdh5.4.7伪分布式 apache hadoop-2.6.0-CDH5.4.1 安装:完全分布式 官网：Hadoop分布式文件系统：架构和设计 Yarn 和MapReduce比较 HBase 默认配置 基于CDH5.4.5（ha）的Hbase 3节点搭建 分布式系统概述（Hadoop与HBase的前生今世） HBase介绍、搭建、环境、安装部署:架构、数据结构、原理 zk的作用及spark HBase之单机模式与伪分布式模式安装 HBase命令及数据结构//TODO HBase HMaster的作用： 为Region server分配region负责Region server的负载均衡发现失效的Region server并重新分配其上的regionHDFS上的垃圾文件回收处理schema更新请求 HRegionServer作用： 维护master分配给他的region，处理对这些region的io请求负责切分正在运行过程中变的过大的region可以看到，client访问HBase上的数据并不需要master参与（寻址访问zookeeper和region server，数据读写访问region server），master仅仅维护table和region的元数据信息（table的元数据信息保存在zookeeper上），负载很低。HRegionServer存取一个子表时，会创建一个HRegion对象，然后对表的每个列族创建一个Store实例，每个Store都会有一个MemStore和0个或多个StoreFile与之对应，每个StoreFile都会对应一个HFile， HFile就是实际的存储文件。因此，一个HRegion有多少个列族就有多少个Store。一个HRegionServer会有多个HRegion和一个HLog。Welcome to the Hadoop installed wiki! 以下是相关资料 搭建hadoop-2.6.0-cdh5.4.7伪分布式 apache hadoop-2.6.0-CDH5.4.1 安装:完全分布式 官网：Hadoop分布式文件系统：架构和设计 Yarn 和MapReduce比较 HBase 默认配置 基于CDH5.4.5（ha）的Hbase 3节点搭建 分布式系统概述（Hadoop与HBase的前生今世） HBase介绍、搭建、环境、安装部署:架构、数据结构、原理 zk的作用及spark HBase之单机模式与伪分布式模式安装 HBase命令及数据结构//TODO HBaseHMaster的作用：为Region server分配region负责Region server的负载均衡发现失效的Region server并重新分配其上的regionHDFS上的垃圾文件回收处理schema更新请求 HRegionServer作用：维护master分配给他的region，处理对这些region的io请求负责切分正在运行过程中变的过大的region可以看到，client访问HBase上的数据并不需要master参与（寻址访问zookeeper和region server，数据读写访问region server），master仅仅维护table和region的元数据信息（table的元数据信息保存在zookeeper上），负载很低。HRegionServer存取一个子表时，会创建一个HRegion对象，然后对表的每个列族创建一个Store实例，每个Store都会有一个MemStore和0个或多个StoreFile与之对应，每个StoreFile都会对应一个HFile， HFile就是实际的存储文件。因此，一个HRegion有多少个列族就有多少个Store。一个HRegionServer会有多个HRegion和一个HLog。 已连接data/bigdata/hadoop-learning/resources.md","tags":[{"name":"hadoop","slug":"hadoop","permalink":"https://wiki.quartz.ren/tags/hadoop/"}],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Hadoop","slug":"数据/数据处理/DataStore/Hadoop","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Hadoop/"}]},{"title":"3.ES常用API","date":"2018-01-21T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Elasticsearch/3.ES常用api/","text":"常用API 查看所有索引1http://yun.quartz.ren:9200/_cat/indices?v 索引和搜索文档索引里面还有类型的概念，在索引文档之前要先设置类型type 查询所有文档(索引的所有文档) 1234GET /lagou_job/_search&#123; &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;&#125; 查看索引结构其他语言的APIpython API","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Elasticsearch","slug":"数据/数据处理/DataStore/Elasticsearch","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Elasticsearch/"}]},{"title":"2.ES环境搭建","date":"2018-01-21T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Elasticsearch/2.ES环境搭建/","text":"Docker安装esInstall Elasticsearch with Docker es 建议先手动安装. head 插件可以使用doker创建 12345docker pull elasticsearchdocker run -d -p 9200:9200 --name=es-for-dev elasticsearch或者docker pull registry.docker-cn.com/library/elasticsearchdocker run -e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; -d -p 9200:9200 -p 9300:9300 --name myes 使用另外一个镜像做head插件 1docker run --name elasticsearch-head -d -p 9100:9100 mobz/elasticsearch-head:5 使用docker可视化界面管理容器 1docker run --name docker-ui -d -p 9000:9000 --privileged -v /var/run/docker.sock:/var/run/docker.sock uifd/ui-for-docker 安装kibana1docker run -it -d -e ELASTICSEARCH_URL=http://127.0.0.1:9200 --name kibana -p 5601:5601 kibana:5.6.12 版本和es最好对应，这里还注意127.0.0.1是有问题，docker内部的127会访问不到外部 ES本地安装包安装下载 elasticsearch-6.3.2.tar.gz. 1wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.2.zip 解压后:修改配置文件,添加 12http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot; 上述是由于head插件和es 之间存在跨域问题(两个进程),需要给权限 https://www.jianshu.com/p/f80fb1dd842b 如果需要其他网络可以访问（不是同一个地址），需要设置如下： 1network.host: 0.0.0.0 这个时候可能会启动失败，解决：https://www.cnblogs.com/phpper/p/9803934.html https://www.cnblogs.com/hongdada/p/7887455.html 修改后重启吧，很恶心.（目前找到的资料是只能重启） 终极解决方案，新建用户．应该是当前用户有限制，会覆盖系统设置的max file limit. 或者好用的12非常简单好用docker run -d -p 9200:9200 -p 5601:5601 nshou/elasticsearch-kibana 12# 启动bin/elasticsearch -d 安装插件analysis-ik1./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.3.2/elasticsearch-analysis-ik-6.3.2.zip https://github.com/medcl/elasticsearch-analysis-ik 安装sql插件1./bin/elasticsearch-plugin install https://github.com/NLPchina/elasticsearch-sql/releases/download/6.3.2.0/elasticsearch-sql-6.3.2.0.zip https://github.com/NLPchina/elasticsearch-sql 其他插件https://www.elastic.co/guide/en/elasticsearch/plugins/6.3/analysis.html 安装kibana1wget https://artifacts.elastic.co/downloads/kibana/kibana-6.3.2-linux-x86_64.tar.gz http://www.quartz.ren:5601/app/kibana#/home?_g=())","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Elasticsearch","slug":"数据/数据处理/DataStore/Elasticsearch","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Elasticsearch/"}]},{"title":"4.权限设置","date":"2018-01-21T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Elasticsearch/4.ES权限设置/","text":"参考 开启权限 12curl -H &quot;Content-Type:application/json&quot; -XPOST http://yun.quartz.ren:9200/_xpack/license/start_trial?acknowledge=true 修改es的配置 12添加xpack.security.enabled: true 设置用户名和密码详见 1bin/elasticsearch-setup-passwords interactive 重要: 在Kibana中配置Security 添加用户,角色等操作. 6.3版本x-pack破解","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Elasticsearch","slug":"数据/数据处理/DataStore/Elasticsearch","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Elasticsearch/"}]},{"title":"7.ES核心-Lucene","date":"2018-01-21T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Elasticsearch/7.Es核心Lucene/","text":"Elasticsearch 基于 Lucene，隐藏其复杂性，并提供简单易用的 Restful API接口、Java API 接口。所以理解 ES 的关键在于理解 Lucene 的基本原理。","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Elasticsearch","slug":"数据/数据处理/DataStore/Elasticsearch","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Elasticsearch/"}]},{"title":"Mongo基础-相关命令行-Docker","date":"2018-01-21T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Mongo/Mongo基础-Docker环境及相关命令/","text":"Docker安装mongo12docker pull mongodocker run --name mongo-server -p 27017:27017 -v /data/mongo/db:/data/db -d mongo 使用mongo镜像执行mongo命令了连接容器 1docker run -it mongo mongo --host 172.17.0.2 相关命令1234命令行登陆数据库（类似 mysql -uroot -p -h）mongo --port 27017use admindb.auth(&quot;adminUser&quot;, &quot;adminPass&quot;) 1234567891011&gt; 查看数据库show databases; // 或者 show dbs;&gt; 创建数据库use new_db; //只有插入数据,db才会真正创建.&gt; 创建集合后要再插入一个文档(记录)db.test.insert(&#123;&quot;name&quot;:&quot;菜鸟&quot;&#125;)&gt; 删除数据库db; // 查看当前数据库db.dropDatabase();//删除当前数据库&gt; 集合的删除db.collection.drop(); // 在当前数据库下的集合 12&gt; 查看集合show collections 开启权限验证1mongod --auth --dbpath &quot;/data/db&quot; 开启docker中的mongodb认证授权 集合创建集合创建 集合(collection)和table的区别? 创建固定大小的集合 123db.createCollection(&quot;mycol&quot;, &#123; capped : true, autoIndexId : true, size : 6142800, max : 10000 &#125; ) 文档文档的数据结构和JSON基本一样。所有存储在集合中的数据都是BSON格式。BSON是一种类json的一种二进制形式的存储格式,简称Binary JSON。 1234567db.col.insert(&#123;title: &#x27;MongoDB 教程&#x27;, description: &#x27;MongoDB 是一个 Nosql 数据库&#x27;, by: &#x27;菜鸟教程&#x27;, url: &#x27;http://www.runoob.com&#x27;, tags: [&#x27;mongodb&#x27;, &#x27;database&#x27;, &#x27;NoSQL&#x27;], likes: 100&#125;) 查看已经插入的文档 1db.col.find() 也可以将数据定义为一个变量,然后插入 12345678document=(&#123;title: &#x27;MongoDB 教程&#x27;, description: &#x27;MongoDB 是一个 Nosql 数据库&#x27;, by: &#x27;菜鸟教程&#x27;, url: &#x27;http://www.runoob.com&#x27;, tags: [&#x27;mongodb&#x27;, &#x27;database&#x27;, &#x27;NoSQL&#x27;], likes: 100&#125;);db.col.insert(document); 文档更新语法MongoDB 更新文档 123456789101112131415161718192021222324252627282930db.collection.update( &lt;query&gt;, &lt;update&gt;, &#123; upsert: &lt;boolean&gt;, multi: &lt;boolean&gt;, writeConcern: &lt;document&gt; &#125;)例如:db.col.update(&#123;&#x27;title&#x27;:&#x27;MongoDB 教程&#x27;&#125;,&#123;$set:&#123;&#x27;title&#x27;:&#x27;MongoDB&#x27;&#125;&#125;)db.col.find().pretty()&#123; &quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;), &quot;title&quot; : &quot;MongoDB&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot; ], &quot;likes&quot; : 100&#125;以上语句只会修改第一条发现的文档，如果你要修改多条相同的文档，则需要设置 multi 参数为 true。&gt;db.col.update(&#123;&#x27;title&#x27;:&#x27;MongoDB 教程&#x27;&#125;,&#123;$set:&#123;&#x27;title&#x27;:&#x27;MongoDB&#x27;&#125;&#125;,&#123;multi:true&#125;) 删除文档MongoDB 删除文档 查询文档MongoDB 查询文档 MongoDB 条件操作符 MongoDB $type 操作符 MongoDB 索引MongoDB 索引 创建索引语法: 1db.collection.createIndex(keys, options) MongoDB JavaMongoDB Java","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Mongo","slug":"数据/数据处理/DataStore/Mongo","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Mongo/"}]},{"title":"Mongo环境搭建配置-客户端","date":"2018-01-21T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Mongo/Mongo环境配置/","text":"下载安装https://www.mongodb.com/download-center/community?jmp=nav 客户端连接新mongo环境 mongo mongodb://127.0.0.1:27017然后创建账号并授权.mongo mongodb://nlp:nlp@192.168.1.42:27017 参考:https://www.mongodb.org.cn/tutorial/7.html 123show dbsuse `dbName` Docker整合Prometheus、Grafana监控MongoDBDocker整合Prometheus、Grafana监控MongoDB 12# 启动 mongodb_exporter 监控mongodocker run -d --name mongodb_exporter -p 9104:9001 chux0519/mongodb_exporter --mongodb.uri mongodb://192.168.0.103:27017 另一种方式。 先进行镜像编译. {镜像太大太复杂。不建议了} 12git clone git@github.com:dcu/mongodb_exporter.gitdocker build -t mongodb_exporter . 问题 eses/mongodb_exporter 没有找到现成的grafana面板. elarasu/mongodb_exporter 基于 dcu/mongodb_exporter.https://github.com/percona/mongodb_exporter 其他镜像都和 监控面板不匹配。 chux0519/mongodb_exporter 和 https://grafana.com/grafana/dashboards/2583 匹配。 另外一些其他监控指标可以后续了解支持. Prometheus 添加配置 12345678910# 进入 Prometheus 的容器. 修改配置docker exec -it prometheus vi /etc/prometheus/prometheus.yml # 添加一下job - job_name: &#x27;mongodb&#x27; static_configs: - targets: [&#x27;192.168.0.103:9104&#x27;] labels: instance: mongodb 检查 是否正常http://localhost:9090/targets 获取grafana json配置https://grafana.com/grafana/dashboards?search=mongo&amp;orderBy=name&amp;direction=asc找到适合的仪表盘. mongodb_replset_member_state 请大家为西银高铁、西部交通辛勤付出的同志们投一票,非常感谢, 请选择马校伟,李全,何俊.","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Mongo","slug":"数据/数据处理/DataStore/Mongo","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Mongo/"}]},{"title":"使用python添加数据到mongo","date":"2018-01-21T17:55:57.000Z","path":"wk/数据/数据处理/DataStore/Mongo/使用python添加数据到Mongo/","text":"123456789101112131415161718192021222324252627282930313233343536import pymongoimport jsonclient = pymongo.MongoClient(&quot;localhost&quot;, 27017)db = client.test# print (db.name)# print (db.my_collection)# db.my_collection.insert_one(&#123;&quot;x&quot;: 10&#125;).inserted_id# create collection . 可以不用创建,插入数据会自动创建## db.createCollection(&quot;UserBehavior&quot;, &#123; capped : true, autoIndexId : true, size : 6142800, max : 100000 &#125; )fo = open(&quot;/home/zhangquanquan/workspace/stream-project/my-flink-project/src/main/resources/UserBehavior.csv&quot;, &quot;r&quot;)print (&quot;文件名为: &quot;, fo.name)fileList = fo.readlines()fo.close()for line in fileList: line = line.strip() lineItem = line.split(&quot;,&quot;) ub = &#123;&#125; ub[&#x27;userId&#x27;] = lineItem[0] ub[&#x27;itemId&#x27;] = lineItem[1] ub[&#x27;categoryId&#x27;] = lineItem[2] ub[&#x27;behavior&#x27;] = lineItem[3] ub[&#x27;timestamp&#x27;] = lineItem[4] json_ub = json.dumps(ub) db.user_behavior.insert(ub) # 批量插入,可以使用 db.collection.insertMany([&#123;&quot;b&quot;: 3&#125;, &#123;&#x27;c&#x27;: 4&#125;]) # print (json_ub)print (&quot;finished.&quot;)# for item in db.my_collection.find().sort(&quot;x&quot;, pymongo.ASCENDING):# print(item[&quot;x&quot;])","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Mongo","slug":"数据/数据处理/DataStore/Mongo","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Mongo/"}]},{"title":"3.Java8Stream","date":"2018-01-21T17:55:57.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Java/Java8Stream/","text":"12345List&lt;Vo&gt; results = voList.stream().collect(Collectors.groupingBy(this::fetchKey)).values() .stream().map(vo -&gt; vo.stream().reduce((vo1, vo2) -&gt; &#123; vo1.setCount(vo1.getCount() + vo2.getCount()); return vo1; &#125;).orElse(new Vo())).collect(Collectors.toList());","tags":[],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Java","slug":"平台工具/2-计算机基础/编程语言/Java","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"}]},{"title":"Oracle批量测试数据生成","date":"2018-01-08T03:55:57.000Z","path":"wk/数据/数据处理/DataStore/Oracle/Oracle批量测试数据生成/","text":"oracle使用declare 1234567891011121314declarei integer; --定义变量 begin i := 1;loop /* 插入数据: 自定义 */INSERT INTO table VALUES(i, &#x27;20171016&#x27;);/* 参数递增 */i := i + 1;/* 停止条件 */ exit when i &gt; 100000; end loop;commit;end;","tags":[],"categories":[{"name":"数据","slug":"数据","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/"},{"name":"数据处理","slug":"数据/数据处理","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"DataStore","slug":"数据/数据处理/DataStore","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/"},{"name":"Oracle","slug":"数据/数据处理/DataStore/Oracle","permalink":"https://wiki.quartz.ren/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/DataStore/Oracle/"}]},{"title":"ActiveMQ分享","date":"2017-11-16T17:13:34.000Z","path":"wk/平台工具/中间件_组件/ActiveMQ/ActiveMQ分享/","text":"队列的优点总结整理实际应用 具体使用的细节 消费者线程的问题，以及队列使用模式/流程 队列的优点、有哪些场景以及好处、其中包括我们使用队列的场景 我们使用队列的流程以及短信消息处理的流程 队列相关的概念（broker、创建一个队列） 交互的协议介绍、及各个端口的作用、连接方式（协议、连接池） 消息模式：我们使用的、还有其他模式 集群与单点 消息的流程、有哪些线程。可以知道在哪个环境出问题。 提升系统的稳定性提升响应速度","tags":[{"name":"activemq","slug":"activemq","permalink":"https://wiki.quartz.ren/tags/activemq/"},{"name":"mq","slug":"mq","permalink":"https://wiki.quartz.ren/tags/mq/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"ActiveMQ","slug":"平台工具/中间件-组件/ActiveMQ","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/ActiveMQ/"}]},{"title":"ActiveMQ介绍","date":"2017-11-16T17:13:34.000Z","path":"wk/平台工具/中间件_组件/ActiveMQ/ActiveMQ介绍/","text":"使用方式（嵌入模式、集群模式） 概念：具体某一个队列、整个队列的创建、使用。一个broker 连接方式（连接池？） 支持协议 几个端口作用、以及监控实现 消息模式（发送订阅和点对点消息） 与其它消息队列比较 消息确认机制（事物） ActiveMQ的设置消息时长，事务，确认机制 ，持久化(六)（http://blog.csdn.net/u014401141/article/details/54772847） 集群方案（内嵌代理所引发的问题：消息过载、管理混乱） 队列使用 讲解流程前言：断连导致消息丢失问题，消费者没有中断。1、队列的优点，大概说一下（异步、系统之间解耦）2、队列的使用场景，复杂的交易系统消息异步，实现系统解耦合。 3、activemq相关（几个端口，支持的协议，应用的连接方式，队列的详细：broker、及队列及管理）消息模式，消息时长的设置，事务，持久化机制。4、我们对activemq的应用，应用内嵌模式。及用了之后的好处(异步，提高系统性能、缓冲或者流量削峰，降低系统压力、防止不正常因素&lt;系统停止，连接断连，&gt;导致消息丢失，持久化消息)或者说弥合 生产者和消费者速度和稳定性 不一致的差异。实现系统间解耦。 举例，之前的积分系统，需要请求账户系统做积分增加。但账户系统某一天凌晨2点会停机升级。那这个积分就加不上了。目前系统中的断连的情况，没有消息队列，消息只能丢失，或者没有好的处理方式防止丢失。 为什么需要消息队列 系统的性能（并发量，吞吐量，响应时间）会有瓶颈 聊聊QPS/TPS/并发量/系统吞吐量的概念 短信发送时间肯定能达到1000，但完成单个事务的平均处理时间受到数据库操作的影响，两个同步数据库操作，一个insert，一个update。所以最多处理一秒1000个比较难。做一些细节的优化。 数据库优化","tags":[{"name":"activemq","slug":"activemq","permalink":"https://wiki.quartz.ren/tags/activemq/"},{"name":"mq","slug":"mq","permalink":"https://wiki.quartz.ren/tags/mq/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"ActiveMQ","slug":"平台工具/中间件-组件/ActiveMQ","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/ActiveMQ/"}]},{"title":"Jupyter","date":"2017-11-16T17:13:34.000Z","path":"wk/平台工具/[2]计算机基础/编程语言/Python/jupyter/1.什么是jupyter/","text":"Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。 Jupyter Notebook 的本质是一个 Web 应用程序，便于创建和共享文学化程序文档，支持实时代码，数学方程，可视化和 markdown。 用途包括：数据清理和转换，数值模拟，统计建模，机器学习等等. 运行Jupyter Notebook12# 查看帮助文档jupyter notebook -h 123456# 启动jupyter notebook# 指定端口启动jupyter notebook --port &lt;port_number&gt;# 启动不打开浏览器jupyter notebook --no-browser 主页面当执行完启动命令之后，浏览器将会进入到Notebook的主页面，如下图所示。","tags":[{"name":"python","slug":"python","permalink":"https://wiki.quartz.ren/tags/python/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"[2]计算机基础","slug":"平台工具/2-计算机基础","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"编程语言","slug":"平台工具/2-计算机基础/编程语言","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"平台工具/2-计算机基础/编程语言/Python","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"},{"name":"jupyter","slug":"平台工具/2-计算机基础/编程语言/Python/jupyter","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/jupyter/"}]},{"title":"Wiki Start","date":"2017-02-16T04:56:24.000Z","path":"wk/WikiStart/","text":"1. Nova’s Wiki通过wiki不断地构建和扩展自己的知识体系. 系统地学习和解决问题才叫做科学. 不是系统的而是零碎的，一定是低效和不科学的用功在于恒， 而不在于猛很多技术和知识如今更新速度日新月异，但底层的基础知识和思维随着层级越低变化越小 我的博客 2. 最近在做的事TODOLIST工作学习手册:QuickStart 当前的主线方向：架构和算法(架构设计、算法工程) 你最擅长的领域是(技术方面)：后端开发(java、springboot、微服务架构)和机器学习(xgb、tensorflow) 3. Wiki Build项目地址 wiki项目源码(master)和部署文件(gh-pages)都在 https://gitee.com/quano/quano.Gitee Pages部署. (由于gitee pages停止服务，将部署文件更换到github gh-pages分支) quanolh wiki的文章[_post]位置: https://gitee.com/quano/notebook/tree/master/z_wiki_post. wiki环境搭建 拉取wiki项目源码(master分支). 安装node、npm、hexo. 使用hexo搭建. 链接wiki的文章[_post]项目，至wiki项目源码. (重要) 123# 初次搭建的时候，在本地链接目录即可。# 注：后面不能有 / ； 左边为 wiki文章的项目路径, 右边为 wiki项目源码地址.ln -s /Users/zhangquanquan/Documents/notebook_east/z_wiki_post /Users/zhangquanquan/quano/wiki/source/_posts 插件优化 mathjar(hexo-filter-mathjax)主要用于 公式渲染.存在的问题：因为 hexo 默认的转义规则会将一些字符进行转义，比如 _ 转为 。 这时有冲突会使得部分公式不能正常渲染(比如矩阵)解决办法12345678打开/node_modules/kramed/lib/rules/inline.js把：escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()#$+\\-.!_&gt;])/,更改为：escape: /^\\\\([`*\\[\\]()# +\\-.!_&gt;])/,把：em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,更改为：em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 具体配置参考:wiki中使用数学公式 4. Blog Build项目地址blog项目源码在：https://github.com/quanoc/quanoc.github.ioenv:分支 存放blog源代码文件master：存放部署的静态文件， 通过github pages服务提供blog (使用hexo d命令自动部署) wiki环境搭建 拉取blog项目源码(master分支). 安装node、npm、hexo. 使用hexo搭建. 切换分支至 env. blog更新后，使用hexo d自动部署.blog文章存放在项目： https://gitee.com/quano/notebook github存放 pages代码、价值开源项目。 giee存放重要的非pages代码。 文章更新a. 编辑：通过编辑软件(sublime等)编辑[notebook.z_wiki_post].b. 发布：通过wiki的项目源码，在本地执行 hexo deploy 进行发布（发布后需要在gitee上手动更新Pages服务哦）. 编辑后可以 通过hexo s， 启动后进行本地查看并调试. 5. Node\\npm\\hexo Setup 安装nodejs 环境 https://www.quartz.ren/blog/nodejs-env/ 安装hexo 123456npm install -g hexo-cli...等好长时间ln -s /opt/node-v4.4.4-linux-x86/bin/hexo /usr/local/bin/hexo## 加速方案npm install -g hexo-cli --registry=http://registry.npm.taobao.org 创建hexo项目-建站 https://hexo.io/zh-cn/docs/setup 使用Wikitten主题 https://github.com/zthxxx/hexo-theme-Wikitten 主要的命令如下: 123456git clone https://github.com/zthxxx/hexo-theme-Wikitten.git themes/Wikittencp -rf themes/Wikitten/_source/* source/cp -rf themes/Wikitten/_scaffolds/* scaffolds/cp -f themes/Wikitten/_config.yml.example themes/Wikitten/_config.yml# edit and customize itvim themes/Wikitten/_config.yml 一些其他的配置 gitee 编辑环境 不错的vpn推荐 https://wiki.zthxxx.me/wiki/index/ 6. Hexo Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"wiki","slug":"wiki","permalink":"https://wiki.quartz.ren/tags/wiki/"},{"name":"hexo","slug":"hexo","permalink":"https://wiki.quartz.ren/tags/hexo/"}],"categories":[]},{"title":"Git学习","date":"2015-11-16T17:13:34.000Z","path":"wk/平台工具/中间件_组件/IDE/Git学习/","text":"svn与git的比较 时光机穿梭 git的分支管理 git的命令 svn与git的比较集中式vs分布式分支管理版本管理（回退-某个文件、整个项目工程） 时光穿梭机Git会把所有人的提交串成一条时间线。（使用可视化工具可以清楚的看到） git reset ： 版本回退（回到过去，回到将来） git reflog ： 查看每一次命令 工作区、暂存区git的命令分为两种 一种是本地仓库相关的。另一种是提交远程仓库的","tags":[{"name":"Git","slug":"Git","permalink":"https://wiki.quartz.ren/tags/Git/"},{"name":"版本管理","slug":"版本管理","permalink":"https://wiki.quartz.ren/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"IDE","slug":"平台工具/中间件-组件/IDE","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/IDE/"}]},{"title":"Git使用规范","date":"2015-11-16T17:13:34.000Z","path":"wk/平台工具/中间件_组件/IDE/Git使用规范/","text":"Git使用流程的规范. 目的: 避免杂乱无章的commit,从而让项目难以协调和维护。避免合并代码导致的丢失。 一.新建分支每次开发新功能。都需要从最新的master新建分支。 123456# 获取主干最新代码$ git checkout master$ git pull# 新建一个开发分支myfeature$ git checkout -b myfeature 二.提交分支commit分支功能开发修改后，就可以提交commit了。 123$ git add --all # 需要提交全部修改的话通过使用--all. 或者[git add .] $ git status$ git commit --verbose 如果是commit指定的几个文件. 12git status 查看变动的文件之后git add $&#123;需要提交的文件&#125; git add 只是将文件修改添加到了暂存区。git commit提交更改，是把暂存区的所有内容提交到当前分支。 Git工作区和暂存区 三.撰写提交信息完整的功能开发，或者重要的修改迭代点给出完整扼要的提交信息。下面是一个范本 12345678主题内容（一行不超过50字的提要）罗列出改动原因、主要变动、以及需要注意的问题。例如:标黄公司GpsWifi策略需求开发- 增加过滤大厂，增加过滤保险公司接口变量- 增加命中标黄类型处理逻辑 简单的改动使用一行改动的主题说明即可。格式可以是：1234增加$&#123;什么内容&#125;修改$&#123;什么内容&#125;优化$&#123;什么内容&#125;修复$&#123;什么内容&#125; 四.与主干同步分支的开发过程中，要经常与主干保持同步。 12$ git fetch origin$ git rebase origin/master 五.合并commit分支开发完成后，很可能有一堆commit，但是合并到主干的时候，往往希望只有一个（或最多两三个）commit，这样不仅清晰，也容易管理。 那么，怎样才能将多个commit合并呢？这就要用到 git rebase 命令。 1$ git rebase -i origin/master","tags":[{"name":"Git","slug":"Git","permalink":"https://wiki.quartz.ren/tags/Git/"},{"name":"版本管理","slug":"版本管理","permalink":"https://wiki.quartz.ren/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"}],"categories":[{"name":"平台工具","slug":"平台工具","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/"},{"name":"中间件_组件","slug":"平台工具/中间件-组件","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/"},{"name":"IDE","slug":"平台工具/中间件-组件/IDE","permalink":"https://wiki.quartz.ren/categories/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%BB%84%E4%BB%B6/IDE/"}]}]}